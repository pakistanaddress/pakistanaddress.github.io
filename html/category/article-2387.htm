<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2387.htm" />
<title>Java 的程序逻辑控制 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Java 的程序逻辑控制</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="htmledit_views"> <p>在程序开发的过程之中一共会存在三种程序逻辑：顺序结构、分支结构、循环结构，对于之前所编写的代码大部分都是顺序结构的定义，即：所有的程序将按照定义的代码顺序依次执行。</p> <h1>&nbsp;IF 分支结构</h1> <p>if 分支结构主要是针对于关系表达式进行判断处理的分支操作。对于分支语句主要有三类的使用形式，使用的关键字：if、else。</p> <h1>switch 分支语句</h1> <p>switch 是一个开关语句，它主要是根据内容来进行的判断，需要注意的是 switch 中可以判断的只能够是数据（int、char、枚举、String）,而不能使用逻辑判断。</p> <p>举例：</p> <pre><code class="language-java">&nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp;int ch=2;  &nbsp; &nbsp; &nbsp; &nbsp;switch (ch){  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 2:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("设置的内容是2。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 1:{  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("设置的内容是1。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default:{  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("没有内容满足。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; }  &nbsp; &nbsp; /**  &nbsp; &nbsp; &nbsp;* 输出结果：  &nbsp; &nbsp; &nbsp;* 设置的内容是2。  &nbsp; &nbsp; &nbsp;* 设置的内容是1。  &nbsp; &nbsp; &nbsp;* 没有内容满足。  &nbsp; &nbsp; &nbsp;*/  &nbsp; &nbsp; }</code></pre> <p>switch 语句进行设计的时候，如果你在每一个 case 后面没有追加 break 语句，那么会在第一个匹配的 case 之后继续执行，一直到全部的 switch 中后续代码执行完毕或者遇见 break。</p> <p>举例：</p> <pre><code class="language-java">&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp;int ch=2;  &nbsp; &nbsp; &nbsp; &nbsp;switch (ch){  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 2:  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("设置的内容是2。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case 1:{  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("设置的内容是1。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;default:{  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;System.out.println("没有内容满足。");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; &nbsp; &nbsp;}  &nbsp; &nbsp; }  &nbsp; &nbsp; /**  &nbsp; &nbsp; &nbsp;* 输出结果：  &nbsp; &nbsp; &nbsp;*设置的内容是2。  &nbsp; &nbsp; &nbsp;*/</code></pre> <h1>while 循环结构</h1> <p>所谓的循环结构指的是某一段代码被重复执行的处理操作，在程序之中提供有while 语句来实现循环的定义，该语句有两类使用形式：</p> <p>while 循环：</p> <pre><code class="language-java">&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; int sum = 0;// 保存最终的计算总和  &nbsp; &nbsp; &nbsp; &nbsp; int num = 1;//进行循环控制  &nbsp; &nbsp; &nbsp; &nbsp; while (num &lt;= 100) { //循环的执行条件  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum += num; //累加  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; num++; //修改循环条件  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(sum);//5050    &nbsp; &nbsp; }</code></pre> <p>do...while 循环：</p> <pre><code class="language-java">&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; int sum = 0;// 保存最终的计算总和  &nbsp; &nbsp; &nbsp; &nbsp; int num = 1;//进行循环控制  &nbsp; &nbsp; &nbsp; &nbsp; do { //循环的执行条件  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum += num; //累加  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; num++; //修改循环条件  &nbsp; &nbsp; &nbsp; &nbsp; } while (num &lt;= 100);  &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(sum);//5050    &nbsp; &nbsp; }</code></pre> <h1>while 循环与 do...while 循环的最大差别：</h1> <p>while 循环是先判断后执行，而 do...while先执行一次后判断。开发中能见到 do...while循环的几率几乎为1%，99%的情况下首选的肯定是 while 循环。</p> <h1>for 循环结构</h1> <p>for 循环也是一种常规的使用结构。</p> <p>举例：</p> <pre><code>&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; int sum = 0;// 保存最终的计算总和  &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt;= 100; i++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sum += i; //累加  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(sum);//5050  &nbsp; &nbsp; }</code></pre> <p>对于 while 和 for 循环的选择只有一个参考标准：</p> <p>1. 在明确确定循环次数的情况下优先选择 for 循环；</p> <p>2. 在不知道循环次数但是直到循环结束条件的情况下使用 while 循环；</p> <h1>循环控制</h1> <p>在循环语句定义的时候还有两个控制语句：break、continue</p> <p>1. break 主要的功能是退出整个循环结构</p> <p>举例：</p> <pre><code>&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt;10 ; i++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (i==3){  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(i+" "); //0 1 2  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; }</code></pre> <p>2. continue 严格来讲只是结束当前的一次调用（结束当前循环）</p> <p>举例：</p> <pre><code>&nbsp; &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt;10 ; i++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (i==3){  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(i+" "); //0 1 2 4 5 6 7 8 9  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; }</code></pre> <p>当执行到了 continue 的时候就表示当前的语句之后后续代码不再执行，而直接进行后续的判断处理。</p> <h1>循环嵌套</h1> <p>在一个循环语句之中嵌套其它的循环语句就称为循环嵌套处理，循环嵌套层次越多时间复杂度就越高，那么下面通过循环的嵌套观察两个简单的程序。</p> <p>举例“：打印乘法口诀表</p> <pre><code> &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 1; i &lt;= 9; i++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int j = 1; j &lt; 10; j++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (j &gt; i) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(j + "*" + i + "=" + (i * j) + " ");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println();  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; }</code></pre> <p>举例：打印三角形</p> <pre><code> &nbsp; public static void main(String[] args) {  &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt;= 9; i++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int j = 0; j &lt; 9 - i; j++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print(" ");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int j = 0; j &lt; 2 * i + 1; j++) {  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.print("*");  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println();  &nbsp; &nbsp; &nbsp; &nbsp; }  &nbsp; &nbsp; }</code></pre> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2386.htm">在MySQL中，如何将时间值表示为整数？</a></p>
                                        <p>下一个：<a href="/html/category/article-2388.htm">spring boot 基础学习 &#8211; thymeleaf页面模板技术</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2508.htm" title="idea中配置maven仓库">idea中配置maven仓库</a></li>
                        <li class="py-2"><a href="/html/category/article-2522.htm" title="Python 实现走迷宫深度优先回溯算法（优质代码）">Python 实现走迷宫深度优先回溯算法（优质代码）</a></li>
                        <li class="py-2"><a href="/html/category/article-2512.htm" title="测试开发该如何在团队中推广新工具和新技术">测试开发该如何在团队中推广新工具和新技术</a></li>
                        <li class="py-2"><a href="/html/category/article-3745.htm" title="vue 跨组件进行传值简易方法">vue 跨组件进行传值简易方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2527.htm" title="Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库">Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库</a></li>
                        <li class="py-2"><a href="/html/category/article-2502.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                        <li class="py-2"><a href="/html/category/article-2517.htm" title="C#关键字Check简单介绍_C#教程">C#关键字Check简单介绍_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-2840.htm" title="MySQL 表数据多久刷一次盘">MySQL 表数据多久刷一次盘</a></li>
                        <li class="py-2"><a href="/html/category/article-2546.htm" title="SpringBoot整合 &#8211; 依赖以及配置文件">SpringBoot整合 &#8211; 依赖以及配置文件</a></li>
                        <li class="py-2"><a href="/html/category/article-3137.htm" title="[转]图解分布式一致性协议Paxos">[转]图解分布式一致性协议Paxos</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>