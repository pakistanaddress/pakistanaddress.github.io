<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2373.htm" />
<title>SSM框架-SpringMVC详解 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">SSM框架-SpringMVC详解</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="htmledit_views"> <h1><strong>springmvc概述</strong></h1> <p>Springmvc是spring框架的一个模块，spring和springmvc无需中间整合层整合。</p> <p>Springmvc是一个基于mvc的web框架</p> <p>表现层的三大任务：</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/ac5a2dc526b246d3f661599d8d3bbca5.jpg"></p> <ul> <li>URL到controller的映射</li> <li>http请求参数绑定</li> <li>http响应的生成和输出</li> </ul> <h1><strong>MVC设计模式</strong></h1> <p>MVC设计模式是一种通用的软件编程思想。</p> <p>在MVC设计模式中认为, 任何软件都可以分为三部分组成：</p> <p>(1)控制程序流转的控制器（Controller）</p> <p>(2)封装数据处理数据的模型（Model）</p> <p>(3)负责展示数据的视图（view）</p> <h1><strong>springmvc的实现原理</strong></h1> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/fd52f1a340b854e822f95ee4ad35030f.jpg"></p> <p>(1) .用户发送请求 至 前端控制器(DispatcherServlet)；</p> <p>提示：DispatcherServlet的作用：接收请求，调用其它组件处理请求，响应结 果，相当于转发器、中央处理器，是整个流程控制的中心</p> <p>(2) .前端控制器(DispatcherServlet)收到请求后调用处理器映射器 (HandlerMapping)</p> <p>处理器映射器(HandlerMapping)找到具体的Controller(可以根据xml配置、注解进 行查找)，并将Controller返回给DispatcherServlet；</p> <p>(3) .前端控制器(DispatcherServlet)调用处理器适配器(HandlerAdapter)。处理 器适配器经过适配调用具体的Controller；(Controller--&gt; service --&gt; Dao --&gt; 数据库)</p> <p>Controller执行完成后返回ModelAndView，</p> <p>提示：Model(模型数据，即Controller处理的结果，Map) View(逻辑视图名，即 负责展示结果的JSP页面的名字)</p> <p>处理器适配器(HandlerAdapter)将controller执行的结果(ModelAndView)返回给前 端控制器(DispatcherServlet)；</p> <p>(4) .前端控制器(DispatcherServlet)将执行的结果(ModelAndView)传给视图解析 器(ViewReslover)</p> <p>视图解析器(ViewReslover)根据View(逻辑视图名)解析后返回具体JSP页面</p> <p>(5) .前端控制器(DispatcherServlet)根据Model对View进行渲染（即将模型数据 填充至视图中）；</p> <p>前端控制器(DispatcherServlet)将填充了数据的网页响应给用户</p> <h1><strong>springmvc实现</strong></h1> <p>第一步：创建maven项目springmvc</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/a0c8bf65305d689766193221d730478c.jpg"></p> <p>第二步：在pom文件中添加依赖</p> <pre><code>&lt;dependencies&gt;     &lt;!-- 单元测试 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;junit&lt;/groupId&gt;         &lt;artifactId&gt;junit&lt;/artifactId&gt;         &lt;version&gt;4.10&lt;/version&gt;         &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- SpringMVC的jar包 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework&lt;/groupId&gt;         &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;         &lt;version&gt;4.1.3.RELEASE&lt;/version&gt;     &lt;/dependency&gt;     &lt;!-- servlet 和 jsp的jar包 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet&lt;/groupId&gt;         &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;         &lt;version&gt;2.5&lt;/version&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax.servlet&lt;/groupId&gt;         &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;         &lt;version&gt;2.0&lt;/version&gt;         &lt;scope&gt;provided&lt;/scope&gt;     &lt;/dependency&gt;     &lt;!-- java对象转换json的工具类     &lt;dependency&gt;         &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;         &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;         &lt;version&gt;2.5.1&lt;/version&gt;     &lt;/dependency&gt;     --&gt; &lt;/dependencies&gt;</code></pre> <p>第三步：web.xml中配置前端控制器</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xmlns="http://java.sun.com/xml/ns/javaee"          xsi:schemaLocation="http://java.sun.com/xml/ns/javaee                              http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"          id="WebApp_ID" version="2.5"&gt;     &lt;!-- 配置springmvc前端控制器, 将所有请求交给springmvc来处理 --&gt;     &lt;servlet&gt;         &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;         &lt;servletclass&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;     &lt;!-- 配置springmvc核心配置文件的位置，默认Springmvc的配置文件是在     WEB-INF目录下，默认的名字为springmvc-servlet.xml，如果要放在其他目录，则     需要指定如下配置：     --&gt;     &lt;init-param&gt;         &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;         &lt;param-value&gt;classpath:springmvc-config.xml&lt;/param-value&gt;     &lt;/init-param&gt;     &lt;/servlet&gt;     &lt;!-- 其中的斜杠（/）表示拦截所有请求（除JSP以外）, 所有请求都要经过     springmvc前端控制器 --&gt;     &lt;servlet-mapping&gt;         &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;         &lt;url-pattern&gt;/&lt;/url-pattern&gt;     &lt;/servlet-mapping&gt; &lt;/web-app&gt;</code></pre> <p>第四步：创建并配置springmvc-config.xml</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:mvc="http://www.springframework.org/schema/mvc"        xmlns:context="http://www.springframework.org/schema/context"        xsi:schemaLocation="http://www.springframework.org/schema/mvc                            http://www.springframework.org/schema/mvc/spring-mvc4.0.xsd                            http://www.springframework.org/schema/beans                            http://www.springframework.org/schema/beans/springbeans-4.0.xsd                            http://www.springframework.org/schema/context                            http://www.springframework.org/schema/context/spring-context4.0.xsd"&gt;     &lt;!-- 1.配置前端控制器放行静态资源(html/css/js等，否则静态资源将无法访问) --&gt;     &lt;mvc:default-servlet-handler/&gt;     &lt;!-- 2.配置注解驱动，用于识别注解（比如@Controller） --&gt;     &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;     &lt;!-- 3.配置需要扫描的包：spring自动去扫描 base-package 下的类，     如果扫描到的类上有 @Controller、@Service、@Component等注解，     将会自动将类注册为bean--&gt;     &lt;context:component-scan base-package="com.tedu.controller"&gt;     &lt;/context:component-scan&gt;     &lt;!-- 4.配置内部资源视图解析器     prefix:配置路径前缀     suffix:配置文件后缀     --&gt;     &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;         &lt;property name="prefix" value="/WEB-INF/pages/"/&gt;         &lt;property name="suffix" value=".jsp"/&gt;</code></pre> <p>第五步：创建HelloController</p> <h1><strong>restController=controller+responsebody：</strong></h1> <p>restController返回json对象</p> <p>controller返回string：modelandview</p> <p>controller+responsebody返回json对象</p> <pre><code>package com.tedu.controller;  import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping;  /* @Controller，如果当前类所在的包配置了Spring容器包扫描，具有  * 该注解的类，就会作为bean注册到spring容器中，由spring容器  * 创建实例。 */ @Controller public class HelloController {     /* @RequestMapping为当前方法配置访问路径      * 当浏览器访问http://localhost:8080/day20-springmvc/hello            * 如果Controller类上没有配置访问路径，当前项目中所有      *     controller中方法上的访问路径都不同冲突！ */     @RequestMapping("/hello")     public String testHello() {         System.out.println( "HelloController.testHello()" );         System.out.println( "hello springmvc..." );         //跳转到 /WEB-INF/pages/home.jsp         return "home";     } }</code></pre> <p>第六步：创建并实现home.jsp</p> <p>在WEB-INF/pages/目录下，创建home.jsp页面。</p> <pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"     pageEncoding="UTF-8"%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt;     &lt;h1&gt;day20-springmvc...home.jsp...&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>第七步：发送请求，进行测试</p> <blockquote> <p>打开浏览器，输入url地址： http://localhost :8080/day16-springmv/hello 地址。</p> </blockquote> <h1><strong>重定向和转发</strong></h1> <p>重定向redirect和转发forward的区别</p> <p>1，重定向浏览器地址栏显示新的地址，转发地址栏不变</p> <p>2，重定向可以重定向别的网站，转发只能转发到本网站中的方法。</p> <h1><strong>redirect重定向</strong></h1> <p>适用于原先的网页不继续提供服务了。</p> <pre><code>@Controller public class UserController {     //重定向，原先的登录地址     @RequestMapping("/login")     public String login() {         return "redirect:https://passport.jd.com/new/login.aspx";     } }</code></pre> <p>http://localhost:8080/login</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/a7d0d76f6f2f8a2cd08ab2a5b7653bb1.jpg"></p> <p>转发后浏览器的地址栏变为转发后的地址。</p> <p>在chrome的调试窗口中network中查看status code</p> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/5ccf6d18e5ef14b9fc40c9e96d65f2e1.jpg"></p> <h1><strong>forward转发</strong></h1> <p>转发后浏览器地址栏还是原来的地址。所以转发前请求的参数在转发后仍然可以读取到。</p> <pre><code>//第一输入用户名和密码     @RequestMapping("/loginByName")     @ResponseBody     public String loginByNamePwd(String username,String password) {                  return "login";     }          //再次登录时，还要输入验证码     @RequestMapping("/loginByCode")     public String loginByCode(String username,String password,String code) {         //判断验证码是否正确         return "forward:/loginByName";     }</code></pre> <p><img decoding="async" alt="SSM框架-SpringMVC详解" src="http://img.555519.xyz/uploads/20221201/258bf99b13f6ce3e58738ded5aa45a32.jpg"></p> <h1><strong>restful风格</strong></h1> <p>@PathVariable用于将请求URL中的模板变量映射到功能处理方法的参数上</p> <p>形成RUSTFul形式，这将是未来的发展趋势。它更加简洁，安全。强化URL GET访问方式。</p> <pre><code>@RestController public class OrderCotroller {     @RequestMapping("/order/{startTime}/{endTime}")     public String searchByDate(@PathVariable String startTime,             @PathVariable String endTime) {         return "restful startTime="+startTime+",endtime="+endtime;     } }</code></pre> <p>浏览器访问的URL</p> <blockquote> <p>http://localhost :8080/order/2019-10-01/2020-10-10</p> </blockquote> <p>自动将URL 中模板变量{startTime}和{endTime}绑定到@PathVariable注解的同名参数上，即入参后startTime=“2019-10-01”、endTime=“2020-10-10”。</p> <p></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2372.htm">javascript删除数组元素的7个方法</a></p>
                                        <p>下一个：<a href="/html/category/article-2374.htm">Docker安装confluence企业版wiki</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6676.htm" title="车险哪个品牌好(车险哪个品牌好一些)">车险哪个品牌好(车险哪个品牌好一些)</a></li>
                        <li class="py-2"><a href="/html/category/article-7688.htm" title="莲藕菜干猪骨汤的做法(菜干猪骨汤的做法大全)">莲藕菜干猪骨汤的做法(菜干猪骨汤的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-6815.htm" title="靳东个人资料简介简历（山楂树之恋演员）速看，">靳东个人资料简介简历（山楂树之恋演员）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-6907.htm" title="动物疫苗有哪些大厂家打的呢多少钱（动物疫苗哪个好）">动物疫苗有哪些大厂家打的呢多少钱（动物疫苗哪个好）</a></li>
                        <li class="py-2"><a href="/html/category/article-6861.htm" title="小孩不知道是不是被猫抓伤需要***吗（不确定小孩是不是被猫抓了能打狂犬疫苗）">小孩不知道是不是被猫抓伤需要***吗（不确定小孩是不是被猫抓了能打狂犬疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7183.htm" title="2020年开宠物店怎么样（2020年开宠物店怎么样了）">2020年开宠物店怎么样（2020年开宠物店怎么样了）</a></li>
                        <li class="py-2"><a href="/html/category/article-7090.htm" title="花鼠明星俱乐部（花鼠能长多大）">花鼠明星俱乐部（花鼠能长多大）</a></li>
                        <li class="py-2"><a href="/html/category/article-6164.htm" title="动物疫苗学（动物疫苗的作用意义）">动物疫苗学（动物疫苗的作用意义）</a></li>
                        <li class="py-2"><a href="/html/category/article-7551.htm" title="宁波安安宠医康丽宠物医院（北仑安安宠物医院）">宁波安安宠医康丽宠物医院（北仑安安宠物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-7182.htm" title="猫咪摸它哪里最舒服（猫咪摸它哪里最舒服 分布图）">猫咪摸它哪里最舒服（猫咪摸它哪里最舒服 分布图）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>