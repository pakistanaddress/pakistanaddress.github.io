<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2298.htm" />
<title>SpringCloudRPC远程调用核心原理：Feign远程调用的执行流程 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">SpringCloudRPC远程调用核心原理：Feign远程调用的执行流程</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="htmledit_views"> <h1>Feign远程调用的执行流程</h1> <p>由于Feign中生成RPC接口JDK动态代理实例涉及的InvocationHandler调用处理器有多种，导致Feign远程调用的执行流程稍微有所区别，但是远程调用执行流程的主要步骤是一致的。这里主要介绍与两类InvocationHandler调用处理器相关的RPC执行流程：</p> <p>（1）与默认的调用处理器FeignInvocationHandler相关的RPC执行流程。</p> <p>（2）与Hystrix调用处理器HystrixInvocationHandler相关的RPC执行流程。</p> <p>还是以uaa-provider启动过程中的DemoClient接口的动态代理实例的执行过程为例演示和分析远程调用的执行流程。</p> <h1>与FeignInvocationHandler相关的远程调用执行流程</h1> <p>FeignInvocationHandler是默认的调用处理器，如果进行特殊的配置，那么Feign将默认使用此调用处理器。</p> <p>结合uaa-provider服务中DemoClient的动态代理实例的hello()方法远程调用执行过程，这里详细介绍与FeignInvocationHandler相关的远程调用执行流程，如图3-25所示。</p> <p style="text-align:center;"><img decoding="async" alt="SpringCloudRPC远程调用核心原理：Feign远程调用的执行流程" src="http://img.555519.xyz/uploads/20221201/ed1ce4cd8abca9b7bd480cdc22a1d6ef.jpg"></p> <p>图3-25 与FeignInvocationHandler相关的远程调用执行流程</p> <p>整体的远程调用执行流程大致分为4步，具体如下：</p> <p>（1）通过Spring IOC容器实例完成动态代理实例的装配。</p> <p>前文讲到，Feign在启动时会为加上了@FeignClient注解的所有远程接口（包括DemoClient接口）创建一个FactoryBean工厂实例，并注册到Spring IOC容器。然后在uaa-provider的DemoRPCController控制层类中，通过@Resource注解从Spring IOC容器找到FactoryBean工厂实例，通过其getObject()方法获取到动态代理实例，装配给DemoRPCController实例的成员变量demoClient。</p> <p>在需要进行hello()远程调用时，直接通过demoClient成员变量调用JDK动态代理实例的hello()方法。</p> <p>（2）执行InvocationHandler调用处理器的invoke（...）方法。</p> <p>前面讲到，JDK动态代理实例的方法调用过程是通过委托给InvocationHandler调用处理器完成的，故在调用demoClient的hello()方法时，会调用到它的调用处理器FeignInvocationHandler实例的invoke（...）方法。</p> <p>大家知道，FeignInvocationHandler实例内部保持了一个远程调用方法反射实例和方法处理器的dispatch映射。FeignInvocationHandle在它的invoke（...）方法中会根据hello()方法的Java反射实例在dispatch映射对象中找到对应的MethodHandler方法处理器，然后由后者完成实际的HTTP请求和结果的处理。</p> <p>（3）执行MethodHandler方法处理器的invoke（...）方法。</p> <p>通过前面关于MethodHandler方法处理器的组件介绍，大家都知道，feign默认的方法处理器为SynchronousMethodHandler同步调用处理器，它的invoke（...）方法主要通过内部feign。Client类型的client成员实例完成远程URL请求执行和获取远程结果。</p> <p>feign.Client客户端有多种类型，不同的类型完成URL请求处理的具体方式不同。（4）通过feign.Client客户端成员完成远程URL请求执行和获取远程结果。</p> <p>如果MethodHandler方法处理器client成员实例是默认的feign.Client.Default实现类，就通过JDK自带的HttpURLConnnection类完成远程URL请求执行和获取远程结果。</p> <p>如果MethodHandler方法处理器实例的client客户端是ApacheHttpClient客户端实现类，就使用ApacheHttpClient开源组件完成远程URL请求执行和获取远程结果。</p> <p>如果MethodHandler方法处理器实例的client客户端是LoadBalancerFeignClient负载均衡客户端实现类，就使用Ribbon结算出最佳的Provider节点，然后由内部的delegate委托客户端成员去请求Provider服务，完成URL请求处理。</p> <p>以上4步基本上就是Spring Cloud中的Feign远程调用的执行流程。</p> <p>然而，默认的基于FeignInvocationHandler调用处理器的执行流程在运行机制和调用性能上都满足不了生产环境的要求，大致原因有以下两点：</p> <p>（1）在远程调用过程中没有异常的熔断监测和恢复机制。</p> <p>（2）没有用到高性能的HTTP连接池技术。</p> <p>接下来将为大家介绍一种结合Hystrix进行RPC保护的远程调用处理流程。在该流程中所使用的InvocationHandler调用处理器叫作HystrixInvocationHandler调用处理器。</p> <p>这里作为铺垫，首先为大家介绍HystrixInvocationHandler调用处理器本身的具体实现。</p> <h1>&nbsp;与HystrixInvocationHandler相关的远程调用执行流程</h1> <p>HystrixInvocationHandler调用处理器类位于feign.hystrix包中，其字节码文件不是处于feign核心包feign-core-*.jar中，而是在扩展包feignhystrix-*.jar中。这里的*表示的是与Spring Cloud版本配套的版本号，当Spring Cloud的版本为Finchley.RELEASE时，feign-core和feign-hystrix两个JAR包的版本号都为9.5.1。</p> <p>HystrixInvocationHandler是具备RPC保护能力的调用处理器，它实现了InvocationHandler接口，对接口的invoke（...）抽象方法的实现如下：</p> <pre><code>package feign.hystrix; //省略import final class HystrixInvocationHandler implements InvocationHandler { ... //... Map映射：Key为RPC方法的反射实例，value为方法处理器 private final Map&lt;Method, MethodHandler&gt; dispatch; ... public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable {  //创建一个HystrixCommand命令，对同步方法调用器进行封装  HystrixCommand&lt;Object&gt; hystrixCommand =  new HystrixCommand&lt;Object&gt;  ( (Setter)this.setterMethodMap.get(method) ) {  protected Object run() throws Exception {  try { SynchronousMethodHandler handler=HystrixInvocationHandler.this.dispatch.get(method)；  return handler.invoke(args);  } catch (Exception var2) {  throw var2;  } catch (Throwable var3) {  throw (Error)var3;  }  }  protected Object getFallback() {  //省略HystrixCommand的异常回调  }  };  //根据method的返回值类型，或返回hystrixCommand，或直接执行  if (this.isReturnsHystrixCommand(method)) {  return hystrixCommand;  } else if (this.isReturnsObservable(method)) {  return hystrixCommand.toObservable();  } else if (this.isReturnsSingle(method)) {  return hystrixCommand.toObservable().toSingle();  } else {  //直接执行  return this.isReturnsCompletable(method) ?  hystrixCommand.toObservable().toCompletable() : hystrixCommand.execute();  }  ... }</code></pre> <p>HystrixInvocationHandler调用处理器与默认调用处理器FeignInvocationHandler有一个共同点：都有一个非常重要的Map类型成员dispatch映射，保存着RPC方法反射实例到MethodHandler方法处理器的映射。</p> <p>在源码中，HystrixInvocationHandler的invoke（...）方法会创建hystrixCommand命令实例，对从dispatch获取的SynchronousMethodHandler实例进行封装，然后对RPC方法实例method进行判断，判断是直接返回hystrixCommand命令实例，还是立即执行其execute()方法。默认情况下，都是立即执行它的execute()方法。</p> <p>HystrixCommand具备熔断、隔离、回退等能力，如果它的run()方法执行发生异常，就会执行getFallback()失败回调方法，这一点后面会详细介绍。</p> <p>回到uaa-provider服务中DemoClient动态代理实例的hello()方法的具体执行过程，在执行命令处理器hystrixCommand实例的run()方法时，步骤如下：</p> <p>（1）根据RPC方法DemoClient.hello()的反射实例在dispatch映射对象中找到对应的方法处理器MethodHandler实例。</p> <p>（2）调用MethodHandler方法处理器的invoke（...）方法完成实际的hello()方法所配置的远程URL的HTTP请求和结果的处理。</p> <p>如果MethodHandler内的RPC调用出现异常，比如远程server宕机、网络延迟太大而导致请求超时、远程server来不及响应等，hystrixCommand命令器就会调用失败回调方法getFallback()返回回退结果。</p> <p>而hystrixCommand的getFallback()方法最终会调用配置在RPC接口@FeignClient注解的fallback属性上的失败回退类中对应的回退方法，执行业务级别的失败回退处理。</p> <p>使用HystrixInvocationHandler方法处理器进行远程调用，总体流程与使用默认的方法处理器FeignInvocationHandler进行远程调用大致是相同的。</p> <p>以uaa-provider模块的DemoClient中hello()方法的远程调用执行过程为例，进行整体流程的展示，具体的时序图如图3-26所示。</p> <p style="text-align:center;"><img decoding="async" alt="SpringCloudRPC远程调用核心原理：Feign远程调用的执行流程" src="http://img.555519.xyz/uploads/20221201/f87c765d8f2cd0cefd6c22eef48cec2f.jpg"></p> <p>图3-26 与HystrixInvocationHandler相关的远程调用执行流程</p> <p>总体来说，使用HystrixInvocationHandler处理器的执行流程与使用FeignInvocationHandler默认的调用处理器相比大致是相同的。不同的是，HystrixInvocationHandler增加了RPC的保护机制。</p> <h1>Feign远程调用的完整流程及其特性</h1> <p>Feign是一个声明式的RPC调用组件，它整合了Ribbon和Hystrix，使得服务调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和方法注解就可以定义好HTTP请求的参数、格式、地址等信息。</p> <p>Feign极大地简化了RPC远程调用，大家只需要像调用普通方法一样就可以完成RPC远程调用。</p> <p>Feign远程调用的核心是通过一系列封装和处理，将以JAVA注解方式定义的RPC方法最终转换成HTTP请求，然后将HTTP请求的响应结果解码成POJO对象返回给调用者。</p> <p>Feign远程调用的完整流程如图3-27所示。</p> <p style="text-align:center;"><img decoding="async" alt="SpringCloudRPC远程调用核心原理：Feign远程调用的执行流程" src="http://img.555519.xyz/uploads/20221201/7cb65ed94cfa5c647704b43ee3e5df45.jpg"></p> <p>图3-27 Feign远程调用的完整流程</p> <p>从图3-27可以看到，Feign通过对RPC注解的解析将请求模板化。当实际调用时传入参数，再根据参数应用到请求模板上，进而转化成真正的Request请求。通过Feign及其动态代理机制，Java开发人员不用再通过HTTP框架封装HTTP请求报文的方式完成远程服务的HTTP调用。</p> <p>Spring Cloud Feign具有如下特性：</p> <p>（1）可插拔的注解支持，包括Feign注解和Spring MVC注解。</p> <p>（2）支持可插拔的HTTP编码器和解码器。</p> <p>（3）支持Hystrix和它的RPC保护机制。</p> <p>（4）支持Ribbon的负载均衡。</p> <p>（5）支持HTTP请求和响应的压缩。</p> <p>总体来说，使用Spring Cloud Feign组件本身整合了Ribbon和Hystrix，可设计一套稳定可靠的弹性客户端调用方案，避免整个系统出现雪崩效应。</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2297.htm">如何在 Java 中实现 Dijkstra 最短路算法</a></p>
                                        <p>下一个：<a href="/html/category/article-2299.htm">Java调用REST接口（get，post请求方法）</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7183.htm" title="2020年开宠物店怎么样（2020年开宠物店怎么样了）">2020年开宠物店怎么样（2020年开宠物店怎么样了）</a></li>
                        <li class="py-2"><a href="/html/category/article-7044.htm" title="动物疫苗审批管理办法最新（动物疫苗销售许可证如何办理）">动物疫苗审批管理办法最新（动物疫苗销售许可证如何办理）</a></li>
                        <li class="py-2"><a href="/html/category/article-7367.htm" title="自动挡不踩油门车速会降低吗（油门踩下去提不起车速）">自动挡不踩油门车速会降低吗（油门踩下去提不起车速）</a></li>
                        <li class="py-2"><a href="/html/category/article-7091.htm" title="动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）">动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-7182.htm" title="猫咪摸它哪里最舒服（猫咪摸它哪里最舒服 分布图）">猫咪摸它哪里最舒服（猫咪摸它哪里最舒服 分布图）</a></li>
                        <li class="py-2"><a href="/html/category/article-8148.htm" title="螃蟹怎么做才好吃?螃蟹做法大全来袭">螃蟹怎么做才好吃?螃蟹做法大全来袭</a></li>
                        <li class="py-2"><a href="/html/category/article-8241.htm" title="国内动物疫苗生产企业有多少家（国内动物疫苗龙头企业）">国内动物疫苗生产企业有多少家（国内动物疫苗龙头企业）</a></li>
                        <li class="py-2"><a href="/html/category/article-7642.htm" title="动物疫苗生产企业排行（动物疫苗生产企业排行榜最新）">动物疫苗生产企业排行（动物疫苗生产企业排行榜最新）</a></li>
                        <li class="py-2"><a href="/html/category/article-7137.htm" title="动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）">动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-7551.htm" title="宁波安安宠医康丽宠物医院（北仑安安宠物医院）">宁波安安宠医康丽宠物医院（北仑安安宠物医院）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>