<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2317.htm" />
<title>如何在 Java 中实现无向图 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">如何在 Java 中实现无向图</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<h1 id="基本概念">基本概念</h1> <h2 id="图的定义">图的定义</h2> <p>一个图是由点集<span class="math inline">\(V=\{v_i\}\)</span> 和<span class="math inline">\(V\)</span> 中元素的无序对的一个集合<span class="math inline">\(E=\{e_k\}\)</span> 所构成的二元组，记为<span class="math inline">\(G=(V,E)\)</span>，<span class="math inline">\(V\)</span> 中的元素<span class="math inline">\(v_i\)</span> 叫做顶点，<span class="math inline">\(E\)</span> 中的元素<span class="math inline">\(e_k\)</span> 叫做边。</p> <p>对于<span class="math inline">\(V\)</span> 中的两个点<span class="math inline">\(u, v\)</span>，如果边<span class="math inline">\((u, v)\)</span> 属于<span class="math inline">\(E\)</span>，则称<span class="math inline">\(u,v\)</span> 两点相邻，<span class="math inline">\(u,v\)</span> 称为边<span class="math inline">\((u, v)\)</span> 的端点。</p> <p>我们可以用<span class="math inline">\(m(G)=|E|\)</span> 表示图<span class="math inline">\(G\)</span> 中的边数，用<span class="math inline">\(n(G)=|V|\)</span> 表示图<span class="math inline">\(G\)</span> 中的顶点个数。</p> <h2 id="无向图的定义">无向图的定义</h2> <p>对于<span class="math inline">\(E\)</span> 中的任意一条边<span class="math inline">\((v_i, v_j)\)</span>，如果边<span class="math inline">\((v_i, v_j)\)</span> 端点无序，则它是无向边，此时图<span class="math inline">\(G\)</span> 称为无向图。无向图是最简单的图模型，下图显示了同一幅无向图，顶点使用圆圈表示，边则是顶点之间的连线，没有箭头（图片来自于《算法第四版》）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c9a35e5e4ad378373d9a917ca9e671b4.jpg" alt="如何在 Java 中实现无向图"></p> <h1 id="无向图的-api">无向图的 API</h1> <p>对于一幅无向图，我们关心图的顶点数、边数、每个顶点的相邻顶点和边的添加操作，所以接口如下所示：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  /**  * 无向图  */ public interface Graph {     /**      * 返回图中的顶点数      */     int V();      /**      * 返回图中的边数      */     int E();      /**      * 向图中添加一条边      * @param v 顶点 v      * @param w 顶点 w      */     void addEdge(int v, int w);      /**      * 返回所有相邻顶点      * @param v 顶点 v      * @return 所有相邻顶点      */     Iterable&lt;Integer&gt; adj(int v); }</code></pre> <h1 id="无向图的实现方式">无向图的实现方式</h1> <h2 id="邻接矩阵">邻接矩阵</h2> <p>用矩阵表示图对研究图的性质及应用常常是比较方便的，对于各种图有各种矩阵表示方式，比如权矩阵和邻接矩阵，这里我们只关注邻接矩阵。它的定义为：</p> <p>对于图<span class="math inline">\(G=(V,E)\)</span>，<span class="math inline">\(|V|=n\)</span>，构造一个矩阵<span class="math inline">\(\boldsymbol A=(a_{ij})_{n\times n}\)</span>，其中：</p> <div class="math display">\[a_{ij} = \left\{<br /> \begin{aligned}<br /> 1&amp; \quad (v_i,v_j)\in E\\<br /> 0&amp; \quad 其他<br /> \end{aligned}<br /> \right.<br /> \]</div> <p>则称矩阵<span class="math inline">\(\boldsymbol{A}\)</span> 为图<span class="math inline">\(G\)</span> 的邻接矩阵。</p> <p>由定义可知，我们可以使用一个二维的布尔数组<code>A</code> 来实现邻接矩阵，当<code>A[i][j] = true</code> 时说明顶点<code>i</code> 和<code>j</code> 相邻。</p> <p>对于<span class="math inline">\(n\)</span> 个顶点的图<span class="math inline">\(G\)</span>，邻接矩阵需要消耗的空间为<span class="math inline">\(n^2\)</span> 个布尔值的大小，对于稀疏图来说会造成很大的浪费，当顶点数很大时所消耗的空间会是个天文数字。同时当图比较特殊，存在自环以及平行边时，邻接矩阵的表示方式是无能为力的。《算法》中给出了存在这两种情况的图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3fabdac6c7dcc13b5f1bfcb3a932b3c4.jpg" alt="如何在 Java 中实现无向图"></p> <h2 id="边的数组">边的数组</h2> <p>对于无向图，我们可以实现一个类<code>Edge</code>，里面只用两个实例变量用来存储两个顶点<span class="math inline">\(u\)</span> 和<span class="math inline">\(v\)</span>，接着在一个数组里面保存所有<code>Edge</code> 即可。这样做有一个很大的问题，就是在获取顶点<span class="math inline">\(v\)</span> 的所有相邻顶点时必须遍历整个数组才能得到，时间复杂度是<span class="math inline">\(O(|E|)\)</span>，由于获取相邻顶点是很常用的操作，所以这种表示方式也不太行。</p> <h2 id="邻接表数组">邻接表数组</h2> <p>如果我们把顶点表示为一个整数，取值范围为<span class="math inline">\(0\sim |V|-1\)</span>，那么就可以用一个长度为<span class="math inline">\(|V|\)</span> 的数组的索引表示每一个顶点，然后将每一个数组元素设置为一个链表，上面挂载着索引所代表的的顶点相邻的其他顶点。图一所示的无向图可以用下图所示的邻接表数组表示出来：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/617efda5ab77bb4bde3d7492272948c9.jpg" alt="如何在 Java 中实现无向图"></p> <p>使用邻接表实现无向图的代码如下所示，由于邻接表数组中的每个链表都会保存与顶点相邻的顶点，所以将边添加到图中时需要对数组中的两个链表进行添加节点的操作：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack;  /**  * 使用邻接表实现的无向图  */ public class LinkGraph implements Graph {     private final int V;     private int E;     private LinkStack&lt;Integer&gt;[] adj;      public LinkGraph(int V) {         this.V = V;         adj = (LinkStack&lt;Integer&gt;[]) new LinkStack[V];         for (int i = 0; i &lt; V; i++) {             adj[i] = new LinkStack&lt;&gt;();         }     }      @Override     public int V() {         return V;     }      @Override     public int E() {         return E;     }      @Override     public void addEdge(int v, int w) {         adj[v].push(w);         adj[w].push(v);         E++;     }      @Override     public Iterable&lt;Integer&gt; adj(int v) {         return adj[v];     } }</code></pre> <p>这里用到的栈代码如下所示，栈的实现不是这篇博客的重点，所以这里不做过多解释：</p> <pre><code class="language-java">package com.zhiyiyo.collection.stack;  import java.util.EmptyStackException; import java.util.Iterator;  /**  * 使用链表实现的堆栈  */ public class LinkStack&lt;T&gt; {     private int N;     private Node first;      public void push(T item) {         first = new Node(item, first);         N++;     }      public T pop() throws EmptyStackException {         if (N == 0) {             throw new EmptyStackException();         }          T item = first.item;         first = first.next;         N--;         return item;     }      public int size() {         return N;     }      public boolean isEmpty() {         return N == 0;     }      public Iterator&lt;T&gt; iterator() {         return new ReverseIterator();     }      private class Node {         T item;         Node next;          public Node() {         }          public Node(T item, Node next) {             this.item = item;             this.next = next;         }     }       private class ReverseIterator implements Iterator&lt;T&gt; {         private Node node = first;          @Override         public boolean hasNext() {             return node != null;         }          @Override         public T next() {             T item = node.item;             node = node.next;             return item;         }          @Override         public void remove() {         }     } }</code></pre> <h1 id="无向图的遍历">无向图的遍历</h1> <p>给定下面一幅图，现在要求找到每个顶点到顶点 0 的路径，该如何实现？或者简单点，给定顶点 0 和 4，要求判断从顶点 0 开始走，能否到达顶点 4，该如何实现？这就要用到两种图的遍历方式：深度优先搜索和广度优先搜索。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/2b5c1ebd00a055c6e4fdc8ec0995b678.jpg" alt="如何在 Java 中实现无向图"></p> <p>在介绍这两种遍历方式之前，先给出解决上述问题需要实现的 API：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  public interface Search {     /**      * 起点 s 和 顶点 v 之间是否连通      * @param v 顶点 v      * @return 是否连通      */     boolean connected(int v);      /**      * 返回与顶点 s 相连通的顶点个数（包括 s）      */     int count();      /**      * 是否存在从起点 s 到顶点 v 的路径      * @param v 顶点 v      * @return 是否存在路径      */     boolean hasPathTo(int v);      /**      * 从起点 s 到顶点 v 的路径，不存在则返回 null      * @param v 顶点 v      * @return 路径      */     Iterable&lt;Integer&gt; pathTo(int v); }</code></pre> <h2 id="深度优先搜索">深度优先搜索</h2> <p>深度优先搜索的思想类似树的先序遍历。我们从顶点 0 开始，将它的相邻顶点 2、1、5 加到栈中。接着弹出栈顶的顶点 2，将它相邻的顶点 0、1、3、4 添加到栈中，但是写到这你就会发现一个问题：顶点 0 和 1明明已经在栈中了，如果还把他们加到栈中，那这个栈岂不是永远不会变回空。所以还需要维护一个数组<code>boolean[] marked</code>，当我们将一个顶点<code>i</code> 添加到栈中时，就将<code>marked[i]</code> 置为<code>true</code>，这样下次要想将顶点<code>i</code> 加入栈中时，就得先检查一个<code>marked[i]</code> 是否为<code>true</code>，如果为<code>true</code> 就不用再添加了。重复栈顶节点的弹出和节点相邻节点的入栈操作，直到栈为空，我们就完成了顶点 0 可达的所有顶点的遍历。</p> <p>为了记录每个顶点到顶点 0 的路径，我们还需要一个数组<code>int[] edgeTo</code>。每当我们访问到顶点<code>u</code> 并将其一个相邻顶点<code>i</code> 压入栈中时，就将<code>edgeTo[i]</code> 设置为<code>u</code>，说明要想从顶点<code>i</code> 到达顶点 0，需要先回退顶点<code>u</code>，接着再从顶点<code>edgeTo[u]</code> 处获取下一步要回退的顶点直至找到顶点 0。</p> <pre><code class="language-java">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.stack.LinkStack; import com.zhiyiyo.collection.stack.Stack;   public class DepthFirstSearch implements Search {     private boolean[] marked;     private int[] edgeTo;     private Graph graph;     private int s;     private int N;      public DepthFirstSearch(Graph graph, int s) {         this.graph = graph;         this.s = s;         marked = new boolean[graph.V()];         edgeTo = new int[graph.V()];         dfs();     }      /**      * 递归实现的深度优先搜索      *      * @param v 顶点 v      */     private void dfs(int v) {         marked[v] = true;         N++;         for (int i : graph.adj(v)) {             if (!marked[i]) {                 edgeTo[i] = v;                 dfs(i);             }         }     }      /**      * 堆栈实现的深度优先搜索      */     private void dfs() {         Stack&lt;Integer&gt; vertexes = new LinkStack&lt;&gt;();         vertexes.push(s);         marked<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = true;          while (!vertexes.isEmpty()) {             Integer v = vertexes.pop();             N++;              // 将所有相邻顶点加到堆栈中             for (Integer i : graph.adj(v)) {                 if (!marked[i]) {                     edgeTo[i] = v;                     marked[i] = true;                     vertexes.push(i);                 }             }         }     }      @Override     public boolean connected(int v) {         return marked[v];     }      @Override     public int count() {         return N;     }      @Override     public boolean hasPathTo(int v) {         return connected(v);     }      @Override     public Iterable&lt;Integer&gt; pathTo(int v) {         if (!hasPathTo(v)) return null;         Stack&lt;Integer&gt; path = new LinkStack&lt;&gt;();          int vertex = v;         while (vertex != s) {             path.push(vertex);             vertex = edgeTo[vertex];         }          path.push(s);         return path;     } }</code></pre> <h2 id="广度优先搜索">广度优先搜索</h2> <p>广度优先搜索的思想类似树的层序遍历。与深度优先搜索不同，从顶点 0 出发，广度优先搜索会先处理完所有与顶点 0 相邻的顶点 2、1、5 后，才会接着处理顶点 2、1、5 的相邻顶点。这个搜索过程就是一圈一圈往外扩展、越走越远的过程，所以可以用来获取顶点 0 到其他节点的最短路径。只要将深度优先搜索中的堆换成队列，就能实现广度优先搜索：</p> <pre><code class="language-java">package com.zhiyiyo.graph;  import com.zhiyiyo.collection.queue.LinkQueue;  public class BreadthFirstSearch implements Search {     private boolean[] marked;     private int[] edgeTo;     private Graph graph;     private int s;     private int N;      public BreadthFirstSearch(Graph graph, int s) {         this.graph = graph;         this.s = s;         marked = new boolean[graph.V()];         edgeTo = new int[graph.V()];         bfs();     }      private void bfs() {         LinkQueue&lt;Integer&gt; queue = new LinkQueue&lt;&gt;();         marked<span class="show-more" title="文字折叠"><span><i class="be be-squareplus"></i>展开</span></span> = true;         queue.enqueue(s);          while (!queue.isEmpty()) {             int v = queue.dequeue();             N++;              for (Integer i : graph.adj(v)) {                 if (!marked[i]) {                     edgeTo[i] = v;                     marked[i] = true;                     queue.enqueue(i);                 }             }         }     } }</code></pre> <p>队列的实现代码如下：</p> <pre><code class="language-java">package com.zhiyiyo.collection.queue;   import java.util.EmptyStackException;   public class LinkQueue&lt;T&gt; {     private int N;     private Node first;     private Node last;      public void enqueue(T item) {         Node node = new Node(item, null);         if (++N == 1) {             first = node;         } else {             last.next = node;         }         last = node;     }      public T dequeue() throws EmptyStackException {         if (N == 0) {             throw new EmptyStackException();         }          T item = first.item;         first = first.next;         if (--N == 0) {             last = null;         }         return item;     }      public int size() {         return N;     }      public boolean isEmpty() {         return N == 0;     }      private class Node {         T item;         Node next;          public Node() {         }          public Node(T item, Node next) {             this.item = item;             this.next = next;         }     } }</code></pre> <h1 id="后记">后记</h1> <p>这样就简要介绍完了无向图的实现及遍历方式，对于无向图的更多操作，比如寻找环和判断是否为二分图可以参见《算法第四版》，以上~~</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2316.htm">使用Java中的json-simple库将JSON字符串转换为Java对象？</a></p>
                                        <p>下一个：<a href="/html/category/article-2318.htm">SpringBoot整合MybatisPlus基本的增删改查，保姆级教程_在线工具</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6769.htm" title="宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内">宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内</a></li>
                        <li class="py-2"><a href="/html/category/article-7228.htm" title="中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）">中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）</a></li>
                        <li class="py-2"><a href="/html/category/article-6209.htm" title="附近哪里可以领养宠物（附近哪里可以领养宠物狗）">附近哪里可以领养宠物（附近哪里可以领养宠物狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-5944.htm" title="宠物用品批发进货app（宠物用品批发进货市场）">宠物用品批发进货app（宠物用品批发进货市场）</a></li>
                        <li class="py-2"><a href="/html/category/article-6906.htm" title="动物疫苗存放标语图片大全（动物疫苗未冷藏几小时失效）">动物疫苗存放标语图片大全（动物疫苗未冷藏几小时失效）</a></li>
                        <li class="py-2"><a href="/html/category/article-5945.htm" title="正宗国产车有哪些牌子(巅峰极速国产车有哪些牌子)">正宗国产车有哪些牌子(巅峰极速国产车有哪些牌子)</a></li>
                        <li class="py-2"><a href="/html/category/article-6815.htm" title="靳东个人资料简介简历（山楂树之恋演员）速看，">靳东个人资料简介简历（山楂树之恋演员）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-6014.htm" title="国内宠物粮上市公司有哪些公司（宠物主粮上市公司）">国内宠物粮上市公司有哪些公司（宠物主粮上市公司）</a></li>
                        <li class="py-2"><a href="/html/category/article-7183.htm" title="2020年开宠物店怎么样（2020年开宠物店怎么样了）">2020年开宠物店怎么样（2020年开宠物店怎么样了）</a></li>
                        <li class="py-2"><a href="/html/category/article-6999.htm" title="宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）">宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>