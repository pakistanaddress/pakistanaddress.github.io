<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2306.htm" />
<title>java8在日常开发中使用LocalDate和LocalTime - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">java8在日常开发中使用LocalDate和LocalTime</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> <h1>一 我们为什么要学习 java.timeAPI</h1> <ol> <li>原先的Date and Calendar 类的api比较复杂，不易于理解，应用起来不是很灵活。</li> <li>Calendar 是个线程不安全的类会导致SimpleDateFormat线程不安全。</li> <li>java.time是JSR 310: Date and Time API.规范所开发，其所有类都是线程安全的或者是枚举类型的类</li> <li>java.time 的API 使用简单，能够灵活计算时间，矫正时间。</li> </ol> <h1>二 LocalDate</h1> <p>LocalDate 是 日期，在java.time 中 日期和时间是可以分开和组合的。</p> <h2>2.1 创建date的方式</h2> <pre><code> // 创建date的方式     @Test     public void LocalDateTest(){         // 1当前日期 常用         LocalDate now = LocalDate.now();         System.out.println(now);//2019-10-27         // 2指定年月 日 方式 常用         LocalDate ofDate = LocalDate.of(2018, 8, 8);         System.out.println(ofDate);//2018-08-08         // 3使用Clock方式创建 不常用         Clock clock = Clock.systemDefaultZone();         LocalDate date = LocalDate.now(clock);         System.out.println(date);// 2019-10-27         // 4 指定年份 和 一年的天数进行创建         LocalDate localDate = LocalDate.ofYearDay(2018, 256);         System.out.println(localDate);// 2018-09-13              }</code></pre> <h2>2.2 使用LocalDate读取date</h2> <pre><code> @Test     public void LocalDateTest2(){         // 创建时间         LocalDate date = LocalDate.of(2019,10,27);         // 获得年份 2019         date.getYear();         System.out.println(date.getYear());         // 获得一个月中的第几天 27         date.getDayOfMonth();         System.out.println(date.getDayOfMonth());         // 获得星期 SUNDAY         date.getDayOfWeek();         System.out.println(date.getDayOfWeek());         // 获得一年中的第几天 300         date.getDayOfYear();         System.out.println(date.getDayOfYear());         // 获得月份值 10         date.getMonthValue();         System.out.println(date.getMonthValue());         // 获得月份长度 31         date.lengthOfMonth();         System.out.println(date.lengthOfMonth());         // 是否是闰年 false         date.isLeapYear();         System.out.println(date.isLeapYear());      }</code></pre> <h2>2.3 TemporalField 读取 LocalDate 的值</h2> <p>ChronoField 是个枚举其实现了TemporalField接口，除了2.2的方式读取date我们还可以使用ChronoField方式读取date.</p> <pre><code>    // 使用 TemporalField 读取 LocalDate 的值     @Test     public void LocalDateTest3() {         // 创建时间         LocalDate date = LocalDate.of(2019, 10, 27);         // 获得年份 2019         date.get(ChronoField.YEAR);         System.out.println(date.get(ChronoField.YEAR));         // 获得月份 10         date.get(ChronoField.MONTH_OF_YEAR);         System.out.println(date.get(ChronoField.MONTH_OF_YEAR));         // 获得这个月中的第几天 27         date.get(ChronoField.DAY_OF_MONTH);         System.out.println(date.get(ChronoField.DAY_OF_MONTH));         // 获得这个星期的第几天 7         date.get(ChronoField.DAY_OF_WEEK);         System.out.println(date.get(ChronoField.DAY_OF_WEEK));         // 其他不再举例自行研究都是字面意思很好理解      }</code></pre> <h2>2.4 解析LocalDate</h2> <pre><code>   @Test     public void LocalDateParse(){         // 默认支持格式解析         String dateStr = "2019-10-27";         LocalDate parse = LocalDate.parse(dateStr);         System.out.println(parse);//2019-10-27         // 指定格式解析         DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");         LocalDate date = LocalDate.parse("2019/10/27", dateTimeFormatter);         System.out.println(date);//2019-10-27     }</code></pre> <h2>2.5 使用 Period 操纵 date</h2> <p>获得连个日期之间的差值，可以获得年，月，日，判断是否非0等等。</p> <pre><code>    @Test     public void LocalDatePor(){         LocalDate date1 = LocalDate.of(2019, 10, 27);         LocalDate date2 = LocalDate.of(2019, 10, 25);         Period between = Period.between(date2, date1);         System.out.println(between.getDays());// 2     }</code></pre> <h2>2.6 修改date</h2> <p>通过withAttribute修改不会改变原来的date，会在原来date的基础上形成新的LocalDate副本。</p> <pre><code>    // 修改     @Test     public void LocalDateWith(){         LocalDate date1 = LocalDate.of(2019, 10, 27);         LocalDate date2 = date1.withMonth(9);//2019-09-27         System.out.println(date2);         LocalDate date3 = date2.withYear(2018);//2018-09-27         System.out.println(date3);         // 2019-10-27         System.out.println(date1);     }</code></pre> <h2>2.7 使用 TemporalAdjuster 修改日期</h2> <p>TemporalAdjuster 时间矫正器修改时间也是不会改变原来的date,会新生成LocalDate 副本，相比于withAttribute，其API更加丰富，提供大量的静态工厂方法，能满足我们日常开发需求。</p> <pre><code>    //  TemporalAdjuster youku1327     @Test     public void LocalDateTemporalAdjuster(){         LocalDate date1 = LocalDate.of(2019, 10, 27);         LocalDate date2 = date1.with(TemporalAdjusters.firstDayOfMonth());         // 2019-10-01         System.out.println(date2);         LocalDate date3 = date1.with(TemporalAdjusters.firstDayOfYear());         // 2019-01-01         System.out.println(date3);         LocalDate date4 = date1.with(TemporalAdjusters.lastDayOfYear());         // 2019-12-31         System.out.println(date4);      }</code></pre> <h1>三LocalTime</h1> <p>如果你已经掌握了上述的LocalDate的基本用法，那么学习LocalTime也是十分简单，原因是LocalTime和LocalDate的API基本差不多。</p> <h2>3.1 创建LocalTime</h2> <pre><code>    @Test     public void localTimeTest1(){         // 1当前时间         LocalTime now = LocalTime.now();         System.out.println(now);//22:49:03.360         // 2指定时间         LocalTime of = LocalTime.of(22, 47);         System.out.println(of);//22:47      }</code></pre> <h2>3.2 读取时间</h2> <pre><code>@Test     public void localTimeRead(){         // 1指定时间         LocalTime tiem = LocalTime.of(22, 50);         // 小时         int hour = tiem.getHour();         // 分钟         int minute = tiem.getMinute();         // 秒         int second = tiem.getSecond();         // 纳秒         int nano = tiem.getNano();              }</code></pre> <h2>3.3 时间解析</h2> <pre><code> // 解析时间     @Test     public void localTimeParse(){         // 默认支持格式解析         LocalTime parse = LocalTime.parse("22:50:00");         System.out.println(parse);// 22:50         // 指定格式解析         LocalTime time = LocalTime.parse("22:50:00", DateTimeFormatter.ISO_TIME);         System.out.println(time);// 22:50      }</code></pre> <h2>3.4 时间修改</h2> <pre><code>    //     @Test     public void localTime(){         // 1时间         LocalTime time = LocalTime.of(22, 50);         LocalTime time1 = time.withHour(2);//02:50         System.out.println(time1);         LocalTime time2 = time.withMinute(10);//22:10         System.out.println(time2);     }</code></pre> <h2>3.5 使用Duration获得时间差值</h2> <pre><code>  @Test     public void localTime(){         LocalTime time1 = LocalTime.of(22, 50,20,20);         LocalTime time2 = LocalTime.of(23, 10);         // 差值         Duration duration = Duration.between(time1, time2);         long seconds = duration.getSeconds();         int nano = duration.getNano();         System.out.println(seconds);//1179         System.out.println(nano);//999999980      }</code></pre> <h1>四 LocalDate 和 LocalTime 的相互合并和转换</h1> <p>LocalDate 和 LocalTime 能相互合并成 LocalDateTime ,LocalDateTime 也可以转为 LocalDate 或者 LocalTime。<br /> LocalDateTime其他的API 跟 LocalTime，LocalDate 差不多，在次不赘述。</p> <pre><code>    // youku1327 谢谢 lsc      @Test     public void LocalDateTimeTest(){         LocalDate date = LocalDate.of(2019, 10, 27);         LocalTime time = LocalTime.of(23, 20, 00);         // 合并为 LocalDateTime         LocalDateTime localDateTime = LocalDateTime.of(date, time);         System.out.println(localDateTime);//2019-10-27T23:20         // 转为LocalDate         LocalDate localDate = localDateTime.toLocalDate();         System.out.println(localDate);//2019-10-27         // 转为 LocalTime         LocalTime localTime = localDateTime.toLocalTime();         System.out.println(localTime);// 23:20     }</code></pre> <h1>五 ZoneId</h1> <p>java8中 java.time.ZoneId代替了老版本java.util.TimeZone 。</p> <h2>5.1 时区偏移</h2> <p>默认是当前时区和UTC /格林威治的固定偏差值</p> <pre><code>     @Test     public void TimeZoneId(){         // 上海         ZoneId shanghai = ZoneId.of("Asia/Shanghai");         LocalDate date = LocalDate.of(2019, 10, 27);         // 设置时区         ZonedDateTime zonedDateTime = date.atStartOfDay(shanghai);         // 获得偏移         ZoneOffset offset = zonedDateTime.getOffset();         System.out.println(offset);//+08:00     }</code></pre> <h2>5.2 TimeZone 转 ZoneId</h2> <pre><code>    @Test     public void TimeZoneId2(){         ZoneId zoneId = TimeZone.getDefault().toZoneId();         String id = zoneId.getId();         System.out.println(id);//Asia/Shanghai     }</code></pre> <h2>5.3 时区时间计算</h2> <pre><code>    @Test     public void TimeZoneId3(){         ZoneId zoneId = ZoneId.of("America/Chicago");         Instant instant = Instant.now();         // 上海时间 2019-10-27T23:51:27.168         System.out.println(LocalDateTime.ofInstant(instant,ZoneId.of("Asia/Shanghai")));         ZonedDateTime zonedDateTime = instant.atZone(zoneId);         ZoneOffset offset = zonedDateTime.getOffset();         // 美国芝加哥离上海时区差值 -05:00         System.out.println(offset);         LocalDateTime localDateTime = zonedDateTime.toLocalDateTime();         // 芝加哥时间         System.out.println(localDateTime);//2019-10-27T10:51:27.168     }</code></pre> <h1><br /></h1> <h1><br /></h1> <p></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2305.htm">Hyperledger Fabric的test-network启动过程Bash源码详解</a></p>
                                        <p>下一个：<a href="/html/category/article-2307.htm">PyQt5 在qtdesigner中使用自定义的控件</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7643.htm" title="宠物领养协议法律效力如何 宠物领养协议法律效力如何">宠物领养协议法律效力如何 宠物领养协议法律效力如何</a></li>
                        <li class="py-2"><a href="/html/category/article-7228.htm" title="中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）">中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）</a></li>
                        <li class="py-2"><a href="/html/category/article-6907.htm" title="动物疫苗有哪些大厂家打的呢多少钱（动物疫苗哪个好）">动物疫苗有哪些大厂家打的呢多少钱（动物疫苗哪个好）</a></li>
                        <li class="py-2"><a href="/html/category/article-6014.htm" title="国内宠物粮上市公司有哪些公司（宠物主粮上市公司）">国内宠物粮上市公司有哪些公司（宠物主粮上市公司）</a></li>
                        <li class="py-2"><a href="/html/category/article-6033.htm" title="塞尔达传说海拉鲁大陆（塞尔达传说海拉鲁大陆上藏匿了 900 个）">塞尔达传说海拉鲁大陆（塞尔达传说海拉鲁大陆上藏匿了 900 个）</a></li>
                        <li class="py-2"><a href="/html/category/article-7229.htm" title="动物疫苗有哪些大厂家打（动物疫苗的上市公司有哪些）">动物疫苗有哪些大厂家打（动物疫苗的上市公司有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-6015.htm" title="广州猫领养中心地址查询官网（广州去哪领养猫）">广州猫领养中心地址查询官网（广州去哪领养猫）</a></li>
                        <li class="py-2"><a href="/html/category/article-7597.htm" title="澜沧县中医院电话(澜沧县中医院有几个科室)">澜沧县中医院电话(澜沧县中医院有几个科室)</a></li>
                        <li class="py-2"><a href="/html/category/article-7505.htm" title="鸡蛋汤如何打">鸡蛋汤如何打</a></li>
                        <li class="py-2"><a href="/html/category/article-6861.htm" title="小孩不知道是不是被猫抓伤需要***吗（不确定小孩是不是被猫抓了能打狂犬疫苗）">小孩不知道是不是被猫抓伤需要***吗（不确定小孩是不是被猫抓了能打狂犬疫苗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>