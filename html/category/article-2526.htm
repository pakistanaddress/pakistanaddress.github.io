<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2526.htm" />
<title>【笔记】PyTorch快速入门：基础部分合集_在线工具 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">【笔记】PyTorch快速入门：基础部分合集_在线工具</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<h1 id="pytorch快速入门">PyTorch快速入门</h1> <h2 id="tensors">Tensors</h2> <p>Tensors贯穿PyTorch始终</p> <p>和多维数组很相似，一个特点是可以硬件加速</p> <h3 id="tensors的初始化">Tensors的初始化</h3> <p>有很多方式</p> <ul> <li> <p>直接给值</p> <pre><code class="language-python">data = [[1,2],[3,4]] x_data = torch.tensor(data)</code></pre> </li> <li> <p>从NumPy数组转来</p> <pre><code class="language-python">np_arr = np.array(data) x_np = torch.from_numpy(np_array)</code></pre> </li> <li> <p>从另一个Tensor</p> <pre><code class="language-python">x_ones = torch.ones_like(x_data)</code></pre> </li> <li> <p>赋01或随机值</p> <pre><code class="language-python">shape = (2,3,) rand_tensor = torch.rand(shape) ones_tensor = torch.ones(shape) zeros_tensor = torch.zeros(shape)</code></pre> </li> </ul> <h3 id="tensors的属性">Tensors的属性</h3> <pre><code class="language-python">tensor = torch.rand(3,4) print(f"Shape of tensor: {tensor.shape}") print(f"Datatype of tensor: {tensor.dtype}") print(f"Device tensor is stored on: {tensor.device}")</code></pre> <p>shape维度，dtype元素类型，device运行设备(cpu/gpu)</p> <h3 id="tensors的操作">Tensors的操作</h3> <p>使用GPU的方法</p> <pre><code class="language-python">if torch.cuda_is_available():   tensor = tensor.to("cuda")</code></pre> <p>各种操作</p> <ul> <li> <p>索引和切片</p> <pre><code class="language-python">tensor = torch.ones(4,4) print(tensor[0]) 			#第一行（0开始） print(tensor[;,0])		#第一列（0开始） print(tensor[...,-1])	#最后一列</code></pre> </li> <li> <p>连接</p> <pre><code class="language-python">t1 = torch.cat([tensor,tensor],dim=1) #沿着第一维的方向拼接</code></pre> </li> <li> <p>矩阵乘法</p> <p>三种办法，类似于运算符重载、成员函数和非成员函数</p> <pre><code class="language-python">y1 = tensor @ tensor y2 = tensor.matmul(tensor.T) y3 = torch.rand_like(tensor) torch.matmul(tensor,tensor.T,out=y3)</code></pre> </li> <li> <p>点乘</p> <p>类似，也是三种办法</p> <pre><code class="language-python">z1 = tensor * tensor z2 = tensor.mul(tensor) z3 = torch.rand_like(tensor) torch.mul(tensor,tensor,out=z3)</code></pre> </li> <li> <p>单元素tensor求值</p> <pre><code class="language-python">agg = tensor.sum() agg_item = agg.item() print(agg_item,type(agg_item))</code></pre> </li> <li> <p>In-place 操作</p> <p>就是会改变成员内容的成员函数，以下划线结尾</p> <pre><code class="language-python">tensor.add_(5) #每个元素都+5</code></pre> <p>节约内存，但是会丢失计算前的值，不推荐使用。</p> </li> </ul> <h3 id="和numpy的联系">和NumPy的联系</h3> <ul> <li> <p>Tensor转NumPy数组</p> <pre><code>t = torch.ones(5) n = t.numpy()</code></pre> <p><mark>注意</mark>，这个写法类似引用，没有新建内存，二者修改同步</p> </li> <li> <p>NumPy数组转tensor</p> <pre><code class="language-python">n = np.ones(5) t = torch.from_numpy(n)</code></pre> <p>同样是引用，一个的修改会对另一个有影响</p> </li> </ul> <h2 id="数据集和数据加载器">数据集和数据加载器</h2> <p>处理数据的代码通常很杂乱，难以维护，我们希望这部分代码和主代码分离。</p> <h3 id="加载数据集">加载数据集</h3> <p>以FasnionMNIST为例，我们需要四个参数</p> <ul> <li> <p>root是路径</p> </li> <li> <p>Train区分训练集还是测试集</p> </li> <li> <p>download表示如果root找不到，就从网上下载</p> </li> <li> <p>transform表明数据的转换方式</p> </li> </ul> <pre><code class="language-python">import torch from torch.utils.data import Dataset from torchvision import datasets from torchvision.transforms import ToTensor import matplotlib.pyplot as plt  training_data = datasets.FansionMNIST( 	root = "data",   train = True,   download = True,   transform = ToTensor() )  test_data = datasets.FansionMNIST( 	root = "data",   train = False,   download = True,   transform = ToTensor() )</code></pre> <h3 id="标号和可视化">标号和可视化</h3> <pre><code class="language-python">labels_map = {     0: "T-Shirt",     1: "Trouser",     2: "Pullover",     3: "Dress",     4: "Coat",     5: "Sandal",     6: "Shirt",     7: "Sneaker",     8: "Bag",     9: "Ankle Boot", } figure = plt.figure(figsize=(8, 8)) cols, rows = 3, 3 for i in range(1, cols * rows + 1):     sample_idx = torch.randint(len(training_data), size=(1,)).item()     img, label = training_data[sample_idx]     figure.add_subplot(rows, cols, i)     plt.title(labels_map[label])     plt.axis("off")     plt.imshow(img.squeeze(), cmap="gray") plt.show()</code></pre> <h3 id="自己创建数据集类">自己创建数据集类</h3> <p>必须实现三个函数<code>__init__</code>,<code>__len__</code>,<code>__getitem__</code></p> <pre><code class="language-python">import os import pandas as pd from torchvision.io import read_image  class CustomImageDataset(Dataset):     def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):         self.img_labels = pd.read_csv(annotations_file)         self.img_dir = img_dir         self.transform = transform         self.target_transform = target_transform      def __len__(self):         return len(self.img_labels)      def __getitem__(self, idx):         img_path = os.path.join(self.img_dir, self.img_labels.iloc[idx, 0])         image = read_image(img_path)         label = self.img_labels.iloc[idx, 1]         if self.transform:             image = self.transform(image)         if self.target_transform:             label = self.target_transform(label)         return image, label</code></pre> <p><code>__init__</code>类似于构造函数</p> <p><code>__len__</code>求数据个数</p> <p><code>__getitem__</code>按下标找数据和标签，类似重载[]</p> <h3 id="用dataloaders准备数据用于训练">用DataLoaders准备数据用于训练</h3> <p>DataLoaders主要做3件事，将数据划分为小batches，随机打乱数据，和多核处理。</p> <pre><code class="language-python">from torch.utils.data import DataLoader train_dataloader = DataLoader(training_data,batch_size = 64,shuffle=True) test_dataloader = DataLoader(test_data,batch_size = 64,shuffle=True)</code></pre> <h3 id="用dataloader进行迭代训练">用DataLoader进行迭代训练</h3> <pre><code class="language-python"># 展示图像和标签 train_features, train_labels = next(iter(train_dataloader)) print(f"Feature batch shape: {train_features.size()}") print(f"Labels batch shape: {train_labels.size()}") img = train_features[0].squeeze() label = train_labels[0] plt.imshow(img, cmap="gray") plt.show() print(f"Label: {label}")</code></pre> <h2 id="transforms">Transforms</h2> <p>让数据变形成需要的形式</p> <p><code>transform</code>指定feature的变形</p> <p><code>target_transform</code>指定标签的变形</p> <p>比如，需要数据从PIL Image变成Tensors，标签从整数变成one-hot encoded tensors</p> <pre><code class="language-python">import torch from torchvision import datasets from torchvision.transforms import ToTensor, Lambda  ds = datasets.FashionMNIST(     root="data",     train=True,     download=True,     transform=ToTensor(),     target_transform=Lambda(lambda y: torch.zeros(10, dtype=torch.float).scatter_(0, torch.tensor(y), value=1)) )</code></pre> <p>这里用了两个技术，<code>ToTensor()</code>和<code>Lambda</code>表达式</p> <p><code>ToTensor()</code>将PIL images或者NumPy数组转化成FloatTensor，每个像素的灰度转化到[0,1]范围内</p> <p><code>Lambda</code>类似C++里的Lambda表达式，我们需要将整数转化为 one-hot encoded tensor，就先创建一个长度为数据标签类型的全0的Tensor，然后用scatter_()把第y个值改为1。注意到，scatter的index接受的参数也是Tensor，可见Tensor的广泛使用。</p> <h2 id="神经网络">神经网络</h2> <p>神经网络是一些层或者模块，对数据进行处理。</p> <p><code>torch.nn</code>提供了诸多构造神经网络的模块，模块化的结构方便了管理复杂结构。</p> <p>接下来以在FashionMNIST上构造一个图像分类器为例。</p> <pre><code class="language-python">import os import torch from torch import nn from torch.utils.data import DataLoader from torchvision import datasets, transforms</code></pre> <h3 id="准备训练设备">准备训练设备</h3> <p>有GPU用GPU，没有用CPU</p> <pre><code class="language-python">device = "cuda" if torch.cuda.is_available() else "cpu" print(f"Using {device} device")</code></pre> <h3 id="定义网络的类">定义网络的类</h3> <p>我们的网络从<code>nn.Module</code>继承来</p> <pre><code class="language-python">class NeuralNetwork(nn.Module):     def __init__(self):         super(NeuralNetwork, self).__init__()         self.flatten = nn.Flatten()         self.linear_relu_stack = nn.Sequential(             nn.Linear(28*28, 512),             nn.ReLU(),             nn.Linear(512, 512),             nn.ReLU(),             nn.Linear(512, 10),         )      def forward(self, x):         x = self.flatten(x)         logits = self.linear_relu_stack(x)         return logits</code></pre> <p>然后创建一个实例（对象），把它放到device上</p> <pre><code class="language-python">model = NeuralNetwork().to(device) print(model)</code></pre> <p>跑一下的结果</p> <pre><code class="language-shell">Using cpu device NeuralNetwork(   (flatten): Flatten(start_dim=1, end_dim=-1)   (linear_relu_stack): Sequential(     (0): Linear(in_features=784, out_features=512, bias=True)     (1): ReLU()     (2): Linear(in_features=512, out_features=512, bias=True)     (3): ReLU()     (4): Linear(in_features=512, out_features=10, bias=True)   ) )</code></pre> <p>结果是返回值的softmax，这是个10维的概率，找最大的就是预测结果</p> <pre><code class="language-python">X = torch.rand(1, 28, 28, device=device) logits = model(X) pred_probab = nn.Softmax(dim=1)(logits) y_pred = pred_probab.argmax(1) print(f"Predicted class: {y_pred}")</code></pre> <h3 id="模型的layers">模型的layers</h3> <p>以3张28x28的图像为例，分析它在network里的状态</p> <pre><code class="language-python">input_image = torch.rand(3,28,28) print(input_image.size()) '''  torch.Size([3,28,28]) '''</code></pre> <h4 id="nnflatten">nn.Flatten</h4> <p>Flatten顾名思义，扁平化，用于将2维tensor转为1维的</p> <pre><code class="language-python">flatten = nn.Flatten() flat_image = flatten(input_image) print(flag_image.size()) '''  torch.Size([3,784]) '''</code></pre> <h4 id="nnlinear">nn.Linear</h4> <p>Linear，做线性变换的</p> <pre><code class="language-python">layer1 = nn.Linear(in_features=28*28,out_features=20) hidden1 = layer1(flag_image) print(hidden1.size()) ''' torch.Size([3,20]) '''</code></pre> <h4 id="nnrelu">nn.ReLU</h4> <p>非线性激活函数，在Linear层后，增加非线性，让神经网络学到更多的信息</p> <pre><code class="language-python">hidden1 = nn.ReLU()(hidden1)</code></pre> <h4 id="nnsequential">nn.Sequential</h4> <p>Sequential，序列的，类似于把layers一层一层摆着</p> <pre><code class="language-python">seq_modules = nn.Sequential(     flatten,     layer1,     nn.ReLU(),     nn.Linear(20, 10) ) input_image = torch.rand(3,28,28) logits = seq_modules(input_image)</code></pre> <h4 id="nnsoftmax">nn.Softmax</h4> <p>最后一层的结果返回一个在[-inf,inf]的值logits，通过softmax层后，映射到[0,1]</p> <p>这样[0,1]的值可以作为概率输出，dim指定和为1的维度</p> <pre><code class="language-python">softmax = nn.Softmax(dim=1) pred_probab = softmax(logits)</code></pre> <h3 id="模型的参数">模型的参数</h3> <p>这些layers是参数化的，就是说在训练中weights和biases不断被优化</p> <p>以下的代码输出这个模型里的所有参数值</p> <pre><code class="language-python">for name, param in model.named_parameters():   print(name,param.size(),param[:2])</code></pre> <h2 id="自动求导">自动求导</h2> <p>训练神经网络的时候，最常用的是反向传播，模型参数根据loss functoin的梯度进行调整。</p> <p>为了求梯度，也就是求导，我们使用<code>torch.autograd</code>。</p> <p>考虑就一个layer的网络，输入x，参数w和b，以及一个loss function，也就是</p> <pre><code class="language-python">import torch  x = torch.ones(5)  # input tensor y = torch.zeros(3)  # expected output w = torch.randn(5, 3, requires_grad=True) b = torch.randn(3, requires_grad=True) z = torch.matmul(x, w)+b loss = torch.nn.functional.binary_cross_entropy_with_logits(z, y)</code></pre> <h3 id="tensors-functions-and-computational-graph">Tensors, Functions and Computational Graph</h3> <p>考虑这个过程的Computational Graph，如下</p> <p><img decoding="async" src="https://pytorch.org/tutorials/_images/comp-graph.png" alt="【笔记】PyTorch快速入门：基础部分合集_在线工具"></p> <p>这个一定是<strong>DAG</strong>（有向无环图）</p> <p>为了计算loss在w和b方向上的梯度，我们给他们设置<code>requires_grad</code></p> <pre><code class="language-python">w.requires_grad_(True) b.requires_grad_(True)</code></pre> <p>Functions实际上是对象，有计算正向值和反向导数的成员。</p> <pre><code class="language-python">print(z.grad_fn) print(loss.grad_fn)</code></pre> <h3 id="计算梯度">计算梯度</h3> <p>我们要计算Loss对w和b的偏导，只需要使用</p> <pre><code class="language-python">loss.backward()</code></pre> <p>然后就得到了</p> <pre><code class="language-python">print(w.grad) print(b.grad)</code></pre> <p><mark>注意</mark>：</p> <ul> <li>我们只能计算图里叶子的梯度，内部的点不能算</li> <li>一张图只能计算一次梯度，要保留节点的话，backward要传<code>retain_graph=True</code></li> </ul> <pre><code class="language-python">import torch x = torch.randn((1,4),dtype=torch.float32,requires_grad=True) y = x ** 2 z = y * 4 print(x) print(y) print(z) loss1 = z.mean() loss2 = z.sum() print(loss1,loss2) loss1.backward()    # 这个代码执行正常，但是执行完中间变量都free了，所以下一个出现了问题 print(loss1,loss2) loss2.backward()    # 这时会引发错误</code></pre> <p>所以要把loss1的那行改成</p> <pre><code class="language-python">loss1.backward(retain_graph=True)</code></pre> <h3 id="不计算梯度">不计算梯度</h3> <p>有些时候我们不需要计算梯度，比如模型已经训好了，只需要正向用</p> <p>这个时候算梯度就很拖累时间，所以要禁用梯度</p> <pre><code class="language-python">z = torch.matmul(x, w)+b print(z.requires_grad)  with torch.no_grad():     z = torch.matmul(x, w)+b print(z.requires_grad) ''' True False '''</code></pre> <p>另一个办法是用<code>.detach()</code></p> <pre><code class="language-python">z = torch.matmul(x, w)+b z_det = z.detach() print(z_det.requires_grad) ''' False '''</code></pre> <h3 id="tensor输出和雅克比积">tensor输出和雅克比积</h3> <p>如果函数的输出是tensor，就不能简单算梯度了</p> <p>结果是一个矩阵（其实就是依次遍历x和y的分量，求偏导）</p> <div class="math display">\[J=\left(\begin{array}{ccc}\frac{\partial y_{1}}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial y_{1}}{\partial x_{n}} \\ \vdots &amp; \ddots &amp; \vdots \\ \frac{\partial y_{m}}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial y_{m}}{\partial x_{n}}\end{array}\right)<br /> \]</div> <p>PyTorch不计算J的原始值，而是给一个<span class="math inline">\(v\)</span>，计算<span class="math inline">\(v^T\cdot J\)</span>，输出接口是统一的</p> <p>具体来说，把v当参数传进去</p> <pre><code class="language-python">inp = torch.eye(5, requires_grad=True) out = (inp+1).pow(2) out.backward(torch.ones_like(inp), retain_graph=True)</code></pre> <h2 id="优化模型参数">优化模型参数</h2> <p>有了模型，接下来要进行训练、验证和测试。</p> <h3 id="前置代码">前置代码</h3> <p>首先要加载数据，建立模型</p> <pre><code class="language-python">import torch from torch import nn from torch.utils.data import DataLoader from torchvision import datasets from torchvision.transforms import ToTensor, Lambda  training_data = datasets.FashionMNIST(     root="data",     train=True,     download=True,     transform=ToTensor() )  test_data = datasets.FashionMNIST(     root="data",     train=False,     download=True,     transform=ToTensor() )  train_dataloader = DataLoader(training_data, batch_size=64) test_dataloader = DataLoader(test_data, batch_size=64)  class NeuralNetwork(nn.Module):     def __init__(self):         super(NeuralNetwork, self).__init__()         self.flatten = nn.Flatten()         self.linear_relu_stack = nn.Sequential(             nn.Linear(28*28, 512),             nn.ReLU(),             nn.Linear(512, 512),             nn.ReLU(),             nn.Linear(512, 10),         )      def forward(self, x):         x = self.flatten(x)         logits = self.linear_relu_stack(x)         return logits  model = NeuralNetwork()</code></pre> <h3 id="超参数">超参数</h3> <p>定义三个超参数</p> <ul> <li>Epochs数：数据集迭代次数</li> <li>Batch size：单次训练样本数</li> <li>Learning Rate：学习速度</li> </ul> <h3 id="优化循环">优化循环</h3> <p>接下来，我们进行多轮的优化，每轮叫一个epoch</p> <p>每个epoch包含两部分，训练loop和验证/测试loop</p> <h4 id="loss-function">Loss Function</h4> <p>PyTorch提供常见的Loss Functions</p> <ul> <li>nn.MSELoss (Mean Square Error)</li> <li>nn.NLLLoss (Negative Log Likelihood)</li> <li>nn.CrossEntropyLoss (交叉熵)</li> </ul> <p>我们使用交叉熵，把原始结果logits放进去</p> <pre><code class="language-python">loss_fn = nn.CrossEntropyLoss()</code></pre> <h4 id="optimizer">Optimizer</h4> <p>初始化优化器，给它需要优化的参数，和超参数Learning Rate</p> <pre><code class="language-python">optimizer = torch.optim.SGC(model.parameters(),lr = learning_rate)</code></pre> <p>优化器在每个epoch里做三件事</p> <ul> <li><code>optimizer.zero_grad()</code>将梯度清零</li> <li><code>loss.backward()</code>进行反向传播</li> <li><code>optimizer.step()</code>根据梯度调整参数</li> </ul> <h3 id="完整实现">完整实现</h3> <p>在<code>train_loop</code>里训练，<code>test_loop</code>里测试</p> <pre><code class="language-python">import torch from torch import nn from torch.utils.data import DataLoader from torchvision import datasets from torchvision.transforms import ToTensor, Lambda  training_data = datasets.FashionMNIST(     root="data",     train=True,     download=True,     transform=ToTensor() )  test_data = datasets.FashionMNIST(     root="data",     train=False,     download=True,     transform=ToTensor() )  train_dataloader = DataLoader(training_data, batch_size=64) test_dataloader = DataLoader(test_data, batch_size=64)  class NeuralNetwork(nn.Module):     def __init__(self):         super(NeuralNetwork, self).__init__()         self.flatten = nn.Flatten()         self.linear_relu_stack = nn.Sequential(             nn.Linear(28*28, 512),             nn.ReLU(),             nn.Linear(512, 512),             nn.ReLU(),             nn.Linear(512, 10),         )      def forward(self, x):         x = self.flatten(x)         logits = self.linear_relu_stack(x)         return logits  model = NeuralNetwork()  learning_rate = 1e-3 batch_size = 64 epochs = 5  # Initialize the loss function loss_fn = nn.CrossEntropyLoss()  optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  def train_loop(dataloader, model, loss_fn, optimizer):     size = len(dataloader.dataset)     for batch, (X, y) in enumerate(dataloader):         # Compute prediction and loss         pred = model(X)         loss = loss_fn(pred, y)          # Backpropagation         optimizer.zero_grad()         loss.backward()         optimizer.step()          if batch % 100 == 0:             loss, current = loss.item(), batch * len(X)             print(f"loss: {loss:&gt;7f}  [{current:&gt;5d}/{size:&gt;5d}]")   def test_loop(dataloader, model, loss_fn):     size = len(dataloader.dataset)     num_batches = len(dataloader)     test_loss, correct = 0, 0      with torch.no_grad():         for X, y in dataloader:             pred = model(X)             test_loss += loss_fn(pred, y).item()             correct += (pred.argmax(1) == y).type(torch.float).sum().item()      test_loss /= num_batches     correct /= size     print(f"Test Error: \n Accuracy: {(100*correct):&gt;0.1f}%, Avg loss: {test_loss:&gt;8f} \n")  loss_fn = nn.CrossEntropyLoss() optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  epochs = 10 for t in range(epochs):     print(f"Epoch {t + 1}\n-------------------------------")     train_loop(train_dataloader, model, loss_fn, optimizer)     test_loop(test_dataloader, model, loss_fn) print("Done!")</code></pre> <h2 id="保存和加载模型">保存和加载模型</h2> <p>如何保存和加载训好的模型？</p> <pre><code class="language-python">import torch import torchvision.models as models</code></pre> <h3 id="保存和加载模型权重">保存和加载模型权重</h3> <p>通过<code>torch.save</code>方法，可以将模型保存到<code>state_dict</code>类型的字典里。</p> <pre><code class="language-python">model = models.vgg16(pretrained=True) torch.save(model.state_dict(), 'model_weights.pth')</code></pre> <p>而要加载的话，需要先构造相同类型的模型，然后把参数加载进去</p> <pre><code class="language-python">model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights model.load_state_dict(torch.load('model_weights.pth')) model.eval()</code></pre> <p>注意，一定要调一下<code>model.eval()</code>，防止后续出错</p> <h3 id="保存和加载模型-1">保存和加载模型</h3> <p>上一种方法里，需要先实例化模型，再导入权值</p> <p>有没有办法直接保存和加载整个模型呢？</p> <p>我们用不传<code>mode.state_dict()</code>参数，改为<code>model</code></p> <p>保存方式：</p> <pre><code class="language-python">torch.save(model,'model.pth')</code></pre> <p>加载方式：</p> <pre><code class="language-python">model = torch.load('model.pth')</code></pre> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2525.htm">自研FeignClient轻量级http客户端</a></p>
                                        <p>下一个：<a href="/html/category/article-2527.htm">Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4601.htm" title="北京宠爱动物医院消费高吗 北京宠爱动物医院消费高吗知乎">北京宠爱动物医院消费高吗 北京宠爱动物医院消费高吗知乎</a></li>
                        <li class="py-2"><a href="/html/category/article-7091.htm" title="动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）">动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-6722.htm" title="兰亭门票绍兴人免费吗现在(兰亭门票绍兴人免费吗多少钱)">兰亭门票绍兴人免费吗现在(兰亭门票绍兴人免费吗多少钱)</a></li>
                        <li class="py-2"><a href="/html/category/article-6631.htm" title="开个小型宠物食品加工厂需要多少钱 开个小型宠物食品加工厂需要多少钱呢">开个小型宠物食品加工厂需要多少钱 开个小型宠物食品加工厂需要多少钱呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7274.htm" title="养狗容易得什么病如何预防（养狗狗容易得什么病）">养狗容易得什么病如何预防（养狗狗容易得什么病）</a></li>
                        <li class="py-2"><a href="/html/category/article-6209.htm" title="附近哪里可以领养宠物（附近哪里可以领养宠物狗）">附近哪里可以领养宠物（附近哪里可以领养宠物狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4602.htm" title="宠天福宠物医院（宠福鑫动物医院好不好）">宠天福宠物医院（宠福鑫动物医院好不好）</a></li>
                        <li class="py-2"><a href="/html/category/article-5944.htm" title="宠物用品批发进货app（宠物用品批发进货市场）">宠物用品批发进货app（宠物用品批发进货市场）</a></li>
                        <li class="py-2"><a href="/html/category/article-7413.htm" title="延吉宠物店电话 延吉宠物店电话号码">延吉宠物店电话 延吉宠物店电话号码</a></li>
                        <li class="py-2"><a href="/html/category/article-5585.htm" title="宠物粮加工厂投资成本高吗知乎（宠物粮食加工厂挣钱吗）">宠物粮加工厂投资成本高吗知乎（宠物粮食加工厂挣钱吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>