<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2325.htm" />
<title>Java类的加载、链接、初始化 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Java类的加载、链接、初始化</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="htmledit_views"> <p style="text-indent:33px;">Java 语言的类型可以分为两大类：基本类型（primitive types）和引用类型（reference types），基本类型是由Java 虚拟机预先定义好的。引用类型，Java 将其细分为四种：类、接口、数组类和泛型参数。由于泛型参数会在编译过程中被擦除（我会在专栏的第二部分详细介绍），因此 Java 虚拟机实际上只有前三种。在类、接口和数组类中，数组类是由 Java 虚拟机直接生成的，其他两种则有对应的字节流(如class文件)。</p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220817/ba289d196c6981021b09be3dc61ebee7.jpg"></p> <p style="margin-left:0cm;"><strong>加载</strong></p> <p>Class 只有在必须要使用的时候才会被装载，Java 虚拟机不会无条件地装载 Class 类型。Java 虚拟机规定，一个类或接口在初次使用前，必须要进行初始化。这里指的 “使用”, 是指主动使用，主动使用只有下列几种情况:</p> <ul> <li>当创建一个类的实例时，比如使用 new 关键字，或者通过反射、克隆、反序列化。</li> <li>当调用类的静态方法时，即当使用了字节码 invokestatic 指令。</li> <li>当使用类或接口的静态字段时 (final 常量除外), 比如，使用 getstatic 或者 putstatic 指令。</li> <li>当使用 java.lang.reflect 包中的方法反射类的方法时。</li> <li>当初始化子类时，要求先初始化父类。</li> <li>作为启动虚拟机，含有 main 方法的那个类。</li> </ul> <p>加载类处于类装载的第一个阶段。在加载类时，Java 虚拟机必须完成以下工作:</p> <ul> <li>通过类的全名，获取类的二进制数据流。</li> <li>解析类的二进制数据流为方法区内的数据结构。</li> <li>创建 java.lang.Class 类的实例，表示该类型。</li> </ul> <p style="text-indent:33px;">启动类加载器负责加载最为基础、最为重要的类，比如存放在 JRE 的 lib目录下 jar 包中的类（以及由虚拟机参数 -Xbootclasspath 指定的类）。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器（extension class loader）和应用类加载器（application class loader），均由 Java 核心类库提供。</p> <p style="text-indent:33px;">扩展类加载器的父类加载器是启动类加载器。它负责加载相对次要、但又通用的类，比如存放在 JRE 的 lib/ext 目录下 jar 包中的类（以及由系统变量 java.ext.dirs 指定的类）。</p> <p style="text-indent:33px;">应用类加载器的父类加载器则是扩展类加载器。它负责加载应用程序路径下的类。（这里的应用程序路径，便是指虚拟机参数 -cp/-classpath、系统变量 java.class.path 或环境变量CLASSPATH 所指定的路径。）默认情况下，应用程序中包含的类便是由应用类加载器加载的。</p> <p style="margin-left:0cm;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 加载采用双亲委派模型，每当一个类加载器接收到加载请求时，它会先将请求转发给父类加载器。在父类加载器没有找到所请求的类的情况下，该类加载器才会尝试去加载。</p> <p style="margin-left:0cm;"><strong>链接</strong></p> <p style="text-indent:33px;">链接指将创建成的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p> <ul> <li style="margin-left:0cm;">验证：确保被加载类能够满足 Java 虚拟机的约束条件。一般Java 编译器生成的类文件必然满足 Java 虚拟机的约束条件。字节码注入的例子之后会介绍。</li> <li style="margin-left:0cm;">准备：则是为被加载类的<strong>静态字段</strong>分配内存。构造其他跟类层次相关的数据结构，比如说用来实现虚方法的动态绑定的方法表。</li> <li style="margin-left:0cm;">解析：<strong>解析阶段的工作就是将类、接口、字段和方法的符号引用转为直接引用。</strong>符号引用就是一些字面量的引用，和虚拟机的内部数据结构和内存布局无关。在 class 文件被加载至 Java 虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址，甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java 编译器会生成一个<strong>符号引用</strong>。在运行阶段，这个符号引用一般都能够无歧义地定位到具体目标上。例如，对于一个方法调用，编译器会生成一个包含目标方法所在类的名字、目标方法的名字、接收参数类型以及返回值类型的符号引用，来指代所要调用的方法。解析阶段的目的，正是将这些符号引用解析成为实际引用。如果符号引用指向一个未被加载的类，或者未被加载类的字段或方法，那么解析将触发这个类的加载（但未必触发这个类的链接以及初始化。）</li> </ul> <p style="margin-left:0cm;"><strong>初始化</strong></p> <p style="text-indent:33px;">要初始化一个静态字段，可以在声明时直接赋值，也可以在静态代码块中对其赋值。如果直接赋值的静态字段被 final 所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值（ConstantValue），其初始化直接由 Java 虚拟机完成。除此之外的直接赋值操作，以及所有静态代码块中的代码，则会被 Java 编译器置于同一方法中，并把它命名为 &lt; clinit &gt;。</p> <p style="text-indent:33px;">初始化，便是为标记为常量值的字段赋值，以及执行 &lt; clinit &gt; 方法的过程。Java 虚拟机会通过加锁来确保类的 &lt; clinit &gt; 方法仅被执行一次。初始化触发的条件有：</p> <p style="margin-left:0cm;">1. 当虚拟机启动时，初始化用户指定的主类(main)；</p> <p style="margin-left:0cm;">2. 当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类；</p> <p style="margin-left:0cm;">3. 当遇到调用静态方法的指令时，初始化该静态方法所在的类；</p> <p style="margin-left:0cm;">4. 当遇到访问静态字段的指令时，初始化该静态字段所在的类；</p> <pre><code class="language-java">public class Singleton {      private Singleton() {}      private static class LazyHolder {          static final Singleton INSTANCE = new Singleton();      }      public static Singleton getInstance() {          return LazyHolder.INSTANCE;              }  }</code></pre> <p style="text-indent:33px;">只有当调用Singleton.getInstance 时，程序才会访问 LazyHolder.INSTANCE，才会触发对LazyHolder 的初始化</p> <p style="margin-left:0cm;">5. 子类的初始化会触发父类的初始化；</p> <p style="margin-left:0cm;">6. 如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</p> <p style="margin-left:0cm;">7. 使用反射 API 对某个类进行反射调用时，初始化这个类；</p> <p style="margin-left:0cm;">8. 当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</p> <p style="margin-left:0cm;"> <p style="margin-left:0cm;">例子：</p> <pre><code class="language-java">public class Singleton {      private Singleton() {}      private static class LazyHolder {          static final Singleton INSTANCE = new Singleton();      static {          System.out.println("LazyHolder.&lt;clinit&gt;");          }      }  public static Object getInstance(boolean flag) {      if (flag) return new LazyHolder[2];      return LazyHolder.INSTANCE;  }  public static void main(String[] args) {      getInstance(true);      System.out.println("----");      getInstance(false);  }  }</code></pre> <p style="text-indent:33px;"><span style="color:#4c4c4c;">新建数组new LazyHolder[2]会加载元素类LazyHolder；不会初始化元素类。虚拟机必须知道（加载）有这个类，才能创建这个类的数组（容器），但是这个类并没有被使用到（没有达到初始化的条件），所以不会初始化，也不会链接元素类LazyHolder；</span></p> <p style="text-indent:33px;"><span style="color:#4c4c4c;">调用getInstance(false)的时候约等于告诉虚拟机，我要使用这个类了，你把这个类造好（链接），然后把static修饰的字符赋予变量（初始化）。</span></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2324.htm">采用JSP+Servlet+JavaBean+JDBC方式开发一个web登录程序</a></p>
                                        <p>下一个：<a href="/html/category/article-2326.htm">反射获取Class对象的三种方法</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7872.htm" title="宠物领养的坑（正规领养宠物）">宠物领养的坑（正规领养宠物）</a></li>
                        <li class="py-2"><a href="/html/category/article-7459.htm" title="被猫挠了一直流血（被猫挠伤出血一点点）">被猫挠了一直流血（被猫挠伤出血一点点）</a></li>
                        <li class="py-2"><a href="/html/category/article-7321.htm" title="哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）">哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）</a></li>
                        <li class="py-2"><a href="/html/category/article-8378.htm" title="一片枫叶一片红那首歌里有这个歌词是什么歌（一片枫叶什么意思）">一片枫叶一片红那首歌里有这个歌词是什么歌（一片枫叶什么意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-7735.htm" title="南京有没有领养宠物的地方啊最近（南京哪里可以领养宠物）">南京有没有领养宠物的地方啊最近（南京哪里可以领养宠物）</a></li>
                        <li class="py-2"><a href="/html/category/article-8379.htm" title="动物医院实践心得500字作文怎么写的（动物医院实践个人总结）">动物医院实践心得500字作文怎么写的（动物医院实践个人总结）</a></li>
                        <li class="py-2"><a href="/html/category/article-7045.htm" title="青岛动物医学专科学校（青岛动物学院）">青岛动物医学专科学校（青岛动物学院）</a></li>
                        <li class="py-2"><a href="/html/category/article-7137.htm" title="动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）">动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-8149.htm" title="小猫养多久才会认主人（小猫养多久才认家）">小猫养多久才会认主人（小猫养多久才认家）</a></li>
                        <li class="py-2"><a href="/html/category/article-7780.htm" title="宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）">宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>