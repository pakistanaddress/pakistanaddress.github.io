<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2470.htm" />
<title>设计模式-六大原则之单一职责 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">设计模式-六大原则之单一职责</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <blockquote> <p>在校学生，闲来无事复习设计模式，写此以记录。</p> </blockquote> <h2> <a id="_3" rel="nofollow"></a>定义</h2> <p>对于单一职责的原定义是：There should never be more than one reason for a class to change.很简单的一句英文，有且只有一个原因能引起类的改变。即使对于英语很渣的我来说也能看懂，但要想理解却也是不容易。<br /> 单一职责主要应用于三个方面，接口、类和方法。我下面给出一些示例来详细阐述我的看法。</p> <h3> <a id="_7" rel="nofollow"></a>对于接口</h3> <p>Java本就是面向接口编程，接口的定义基本定下了后面实现类的走向。记得刚接触Java没多久的时候，根本无法体会到接口存在的意义，很多时候都不去写接口，即时写也都是随便糊弄那种。为此写过下面这段很蠢的代码</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 接口方法  * @Date 2019/10/22-17:08  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>在实现类中</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证方法          */</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>各位应该都能看出这段代码写的是有多差劲，我在一个接口中同时将登录和注册都写了进去，而在写登录和注册的实体类的时候又分开写，两个实体类都需要继承UserInfo接口，但这就造成登录实体类根本不需要注册这部分方法但我不得不去实现它。虽然这里也可以将登录和注册的实体类写在一起，这样就可以避免这种情况，但这样就造成了这个类的复杂程度进一步提高，如果项目越做越大，后面的维护就变得相当困难。<br /> 为此不如看看下面的这种写法</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 登录接口  * @Date 2019/10/22-17:31  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 注册接口  * @Date 2019/10/22-17:32  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:38  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegister</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这种方式就是简单的实现了接口的单一职责。我的理解，接口的单一职责就是将一种功能或者某一类基本相似的功能放到一起。</p> <h3> <a id="_123" rel="nofollow"></a>类的单一职责</h3> <p>对于类的单一职责，我感觉没有很严格的规范，需求不同，实现的方式也不同，下面依旧按照登录和注册的例子列举两种不同的写法。<br /> 对于一个用户来说，一个用户就是一个实体，一个实体就应该包括相应的操作。</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:56  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>          <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>但如果用户中每一步操作的话又可以将每步操作分开写</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Register</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Update</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>虽然在这里第二种写法显得有些累赘，但确实严格按照单一职责的原则。没有孰优孰劣，只有适不适合，如果一个大型项目中一个用户的操作有相当大量的代码要进行实现的时候采用第二种方法分开写也没有任何错误。</p> <h2> <a id="_204" rel="nofollow"></a>方法的单一职责</h2> <p>个人感觉，方法的单一职责可以参考接口，尽量避免一个方法中进行多种类型的操作，参考《设计模式之禅》写出下面的示例</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">,</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          <span class="token comment">//更新用户名</span>          <span class="token comment">//更新密码</span>          <span class="token comment">//更新性别</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>在这个示例中，当用户提交修改账户信息的指令后service层调用changeInfo方法，直接对所有需要修改的账户信息进行修改，但这造成一个问题，changeInfo这个方法的职责太过笼统，如果后期需要添加或者修改这部分的代码，可能会造成较大的麻烦。<br /> 下面对代码进行优化</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新用户名</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新用户名操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新密码</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changePassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新密码操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新性别</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新性别操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>改进后每个修改部分都有对应的方法，后期如果需要进行大量的修改会更加清晰，维护也更加方便。</p> <p>单一职责最重要的特点就是提高代码的可维护性，可读性和扩展性。但其中很多部分还要结合实际需求去考虑，采用最合适的方式。</p> <p>参考资料：《设计模式之禅》《一故事一设计模式》</p> <p><strong>如哪里写的有不对的地方，欢迎大家指正。</strong></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2469.htm">Java8 接口新特性</a></p>
                                        <p>下一个：<a href="/html/category/article-2471.htm">1分钟掌握 Python 函数参数</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2522.htm" title="Python 实现走迷宫深度优先回溯算法（优质代码）">Python 实现走迷宫深度优先回溯算法（优质代码）</a></li>
                        <li class="py-2"><a href="/html/category/article-2508.htm" title="idea中配置maven仓库">idea中配置maven仓库</a></li>
                        <li class="py-2"><a href="/html/category/article-2483.htm" title="setTimeout、Promise、Async/Await 的区别">setTimeout、Promise、Async/Await 的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2526.htm" title="【笔记】PyTorch快速入门：基础部分合集_在线工具">【笔记】PyTorch快速入门：基础部分合集_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2496.htm" title=".NET Core(.NET6)中gRPC使用">.NET Core(.NET6)中gRPC使用</a></li>
                        <li class="py-2"><a href="/html/category/article-2491.htm" title="jQuery显示与隐藏动画">jQuery显示与隐藏动画</a></li>
                        <li class="py-2"><a href="/html/category/article-2494.htm" title="flink调优之RocksDB设置">flink调优之RocksDB设置</a></li>
                        <li class="py-2"><a href="/html/category/article-3138.htm" title="vue3 ref获取元素">vue3 ref获取元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2517.htm" title="C#关键字Check简单介绍_C#教程">C#关键字Check简单介绍_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-2502.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>