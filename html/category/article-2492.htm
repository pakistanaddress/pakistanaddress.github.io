<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2492.htm" />
<title>JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈) - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <blockquote> <p>本文笔记参考自小滴课堂和传智播客JVM学习教程整合而来</p> </blockquote> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://xdclass.net"  rel="nofollow">小滴课堂</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://space.bilibili.com/37974444"  rel="nofollow">传智播客哔哩哔哩链接</a></li> </ul> <h2><a id="JVM__7" rel="nofollow"></a>一、JVM 入门介绍</h2> <h3><a id="JVM__9" rel="nofollow"></a>JVM 定义</h3> <p>Java Virtual Machine，JAVA程序的<strong>运行环境</strong>（JAVA二进制字节码的运行环境）</p> <h3><a id="JVM__13" rel="nofollow"></a>JVM 优势</h3> <ul> <li>一次编写，到处运行</li> <li>自动内存管理，垃圾回收机制</li> <li>数组下标越界检查</li> </ul> <h3><a id="JVM_19" rel="nofollow"></a>常见的JVM</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/8b0df0ba2f9f6f40ab4a4d5945726fe4.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p><strong>注</strong>：我们笔记所使用的的是<strong>HotSpot</strong> 版本</p> <h3><a id="JVM_JRE_JDK_25" rel="nofollow"></a>JVM JRE JDK的比较</h3> <p>JVM JRE JDK的区别：</p> <p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150422.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/6959c939c62b5a0cfd72beb68ffd38ae.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></a></p> <h3><a id="_33" rel="nofollow"></a>学习步骤</h3> <p>学习顺序如下图：(由简到难)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/b419b1986f6c7f02ef239b9d1a05e21d.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h2><a id="_41" rel="nofollow"></a>二、内存结构</h2> <h3><a id="_43" rel="nofollow"></a><strong>整体架构</strong></h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/0fb97f53b245f84426d2564eb01a8938.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h3><a id="1_47" rel="nofollow"></a>1、程序计数器(寄存器)</h3> <blockquote> <p>Program Counter Register</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/fe109c849bb36593a71afa7e5b7622d8.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h4><a id="11__53" rel="nofollow"></a>1.1 作用</h4> <p><strong>程序计数器用于保存JVM中下一条所要执行的指令的地址</strong></p> <pre><code class="prism language-java"><span class="token number">0</span><span class="token operator">:</span>getstatic #<span class="token number">20</span><span class="token comment">// PrintStream out = System.out;</span><span class="token number">1</span><span class="token operator">:</span>astore_1<span class="token comment">// --</span><span class="token number">2</span><span class="token operator">:</span>aload_1<span class="token comment">// out.println(1);</span><span class="token number">3</span><span class="token operator">:</span>iconst_1<span class="token comment">// --</span><span class="token number">4</span><span class="token operator">:</span>invokevirtual #<span class="token number">26</span><span class="token comment">// --</span><span class="token number">5</span><span class="token operator">:</span>aload_1<span class="token comment">// out.println(2);</span><span class="token number">6</span><span class="token operator">:</span>iconst_2<span class="token comment">// --</span><span class="token number">7</span><span class="token operator">:</span>invokevirtual #<span class="token number">26</span><span class="token comment">// --</span><span class="token number">8</span><span class="token operator">:</span>aload_1<span class="token comment">// out.println(3);</span><span class="token number">9</span><span class="token operator">:</span>iconst_3<span class="token comment">// --</span><span class="token number">10</span><span class="token operator">:</span>invokevirtual #<span class="token number">26</span><span class="token comment">// --</span><span class="token number">11</span><span class="token operator">:</span>aload_1<span class="token comment">// out.println(4);</span><span class="token number">12</span><span class="token operator">:</span>iconst_4<span class="token comment">// --</span><span class="token number">13</span><span class="token operator">:</span>invokevirtual #<span class="token number">26</span><span class="token comment">// --</span><span class="token number">14</span><span class="token operator">:</span>aload_1<span class="token comment">// out.println(5);</span><span class="token number">15</span><span class="token operator">:</span>iconst_5<span class="token comment">// --</span><span class="token number">16</span><span class="token operator">:</span>invokevirtual #<span class="token number">26</span><span class="token comment">// --</span><span class="token keyword">return</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/400cacde567c931edea9b9244db230a5.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p><strong>Java指令执行流程</strong>：</p> <ul> <li> <p>每一条<strong>二进制字节码(JVM指令)</strong> 通过<strong>解释器</strong> 转换成<strong>机器码</strong> 然后 就可以被<strong>CPU</strong> 执行了！</p> </li> <li> <p>当<strong>解释器</strong> 将一条jvm 指令转换成<strong>机器码</strong>后 其会 向<strong>程序计数器</strong> 递交 下一条 jvm 指令的<strong>执行地址</strong>！</p> </li> <li> <p><strong>程序计数器</strong>在硬件层面 其实是通过<strong>寄存器</strong> 实现的！</p> </li> <li> <p>所以程序计数器的作用就是：用于保存JVM中下一条所要执行的指令的地址！</p> </li> </ul> <h4><a id="12__90" rel="nofollow"></a>1.2 特点</h4> <ul> <li><strong>线程私有</strong> <ul> <li>CPU会为每个线程分配时间片，当当 前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码</li> <li>程序计数器是<strong>每个线程</strong>所<strong>私有</strong>的，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过程序计数器可以知道应该执行哪一句指令</li> </ul> </li> <li><strong>不会存在内存溢出</strong></li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/4b9c04fcacd68d679cd9c5a83d81f038.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h3><a id="2_99" rel="nofollow"></a>2、虚拟机栈</h3> <blockquote> <p>Java Virtual Machine Stacks</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/84895c64a9a9624000fed9c00e8c068f.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h4><a id="21__105" rel="nofollow"></a>2.1 定义</h4> <ul> <li>每个<strong>线程</strong>运行需要的内存空间，这一空间被称为<strong>虚拟机栈(Frames)</strong></li> <li>每个栈由多个<strong>栈帧</strong>(Frame) 组成，对应着<strong>每个方法运行时所占用的内存</strong></li> <li>每个线程只能有<strong>一个活动栈帧</strong>，对应着<strong>当前正在执行的方法</strong>，当方法执行时压入栈，方法执行完毕后 弹出栈</li> </ul> <h4><a id="22__111" rel="nofollow"></a>2.2 演示</h4> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/e991b04847757efd447ddb2bf1257b0a.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p><strong>代码</strong></p> <pre><code class="prism language-java"><span class="token comment">/**  * @Auther: csp1999  * @Date: 2020/11/10/11:36  * @Description: 演示栈帧  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Demo01</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">int</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">int</span> c<span class="token operator">=</span> a<span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>我们打断点来Debug 一下看一下方法执行的流程：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/3197229297c8bc182034c8c5e2d7831d.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p>接这往下走，使方法B执行完毕：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/2629d2f98d35c32c28ef5f31336de471.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p>然后方法A执行完毕，其对应的栈帧出栈，main方法对应的栈帧为活动栈帧；最后main执行完毕 栈帧出栈，虚拟机栈为空，代码运行结束！</p> <h4><a id="23__149" rel="nofollow"></a>2.3 面试问题辨析</h4> <ul> <li> <p>1.垃圾回收是否涉及栈内存？</p> <ul> <li><strong>不需要</strong>。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，对应的栈帧就会被弹出栈。所以无需通过垃圾回收机制去回收内存。</li> </ul> </li> <li> <p>2.栈内存的分配越大越好吗？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/79e1ba1739800ea8cac89eeda97061c7.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <ul> <li><strong>不是</strong>。因为<strong>物理内存是一定的</strong>，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</li> <li>举例：如果物理内存是500M(假设)，如果一个线程所能分配的栈内存为2M的话，那么可以有250个线程。而如果一个线程分配栈内存占5M的话，那么最多只能有100 个线程同时执行！</li> </ul> </li> <li> <p>3.方法内的局部变量是否是线程安全的？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/d7d3b545a9fa5feffc2941adb78f6f74.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/77354cbad1a9a1e750cbc85f92abf48d.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p>从图中得出：局部变量如果是静态的可以被多个线程共享，那么就存在线程安全问题。如果是非静态的只存在于某个方法作用范围内，被线程私有，那么就是线程安全的！</p> </li> </ul> <p><strong>看一个案例</strong>：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 局部变量的线程安全问题  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Demo02</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// main 函数主线程</span>         StringBuilder sb<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// Thread新创建的线程</span><span class="token function">m2</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// sb 作为方法m1()内部的局部变量，是线程私有的 ---&gt; 线程安全</span>         StringBuilder sb<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">m2</span><span class="token punctuation">(</span>StringBuilder sb<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// sb 作为方法m2()外部的传递来的参数，sb 不在方法m2()的作用范围内</span><span class="token comment">// 不是线程私有的 ---&gt; 非线程安全</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">static</span> StringBuilder<span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// sb 作为方法m3()内部的局部变量，是线程私有的</span>         StringBuilder sb<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sb 为引用类型的变量</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token comment">// 然而方法m3()将sb返回，sb逃离了方法m3()的作用范围，且sb是引用类型的变量</span><span class="token comment">// 其他线程也可以拿到该变量的 ---&gt; 非线程安全</span><span class="token comment">// 如果sb是非引用类型，即基本类型(int/char/float...)变量的话，逃离m3()作用范围后，则不会存在线程安全</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>该面试题答案</strong>：</p> <ul> <li>如果方法内<strong>局部变量没有逃离方法的作用范围</strong>，则是<strong>线程安全</strong>的</li> <li>如果<strong>局部变量引用了对象</strong>，并<strong>逃离了方法的作用范围</strong>，则需要考虑线程安全问题</li> </ul> <h4><a id="24__223" rel="nofollow"></a>2.4 内存溢出</h4> <p><strong>Java.lang.stackOverflowError</strong> 栈内存溢出</p> <p><strong>发生原因</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/0a19f3d393833c325de674b1217a84a5.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <ul> <li>1.虚拟机栈中，<strong>栈帧过多</strong>（无限递归），这种情况比较<strong>常见</strong>！</li> <li>2.每个栈帧<strong>所占用内存过大</strong>(某个/某几个栈帧内存直接超过虚拟机栈最大内存)，这种情况比较<strong>少见</strong>！</li> </ul> <p>举2个案例：</p> <p><strong>案例1</strong>：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 演示栈内存溢出 java.lang.StackOverflowError  * -Xss256k 可以通过栈内存参数 设置栈内存大小  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Demo03</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 统计栈帧个数</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法无限递归，不断产生栈帧 到虚拟机栈</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  最后输出结果： java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StackOverflowError 	at com<span class="token punctuation">.</span>haust<span class="token punctuation">.</span>jvm_study<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Demo03<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span>Demo03<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">39317</span><span class="token comment">// 栈帧个数，不同的虚拟机大小能存放的栈帧数量不一样</span></code></pre> <p>我们可以通过修改参数来指定虚拟机栈内存大小</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/ecd4e0fee638e3883ffc3bede5712c61.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p>当我们将虚拟机栈内存缩小到指定的256k的时候再运行<strong>Demo03</strong>后，会得到其栈内最大栈帧数为：<strong>3816</strong> 远小于原来的<strong>39317</strong>！</p> <p><strong>案例2</strong>：</p> <pre><code class="prism language-java"><span class="token comment">/**  * 两个类之间的循环引用问题，导致的栈溢出  *   * 解决方案：打断循环，即在员工emp 中忽略其dept属性，放置递归互相调用  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Demo04</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> JsonProcessingException<span class="token punctuation">{<!-- --></span>         Dept d<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Dept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         d<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Market"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Emp e1<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"csp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e1<span class="token punctuation">.</span><span class="token function">setDept</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>          Emp e2<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hzw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e2<span class="token punctuation">.</span><span class="token function">setDept</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>          d<span class="token punctuation">.</span><span class="token function">setEmps</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果：{"name":"Market","emps":[{"name":"csp"},{"name":"hzw"}]}</span>         ObjectMapper mapper<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 要导入jackson包</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**  * 员工  */</span><span class="token keyword">class</span><span class="token class-name">Emp</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token annotation punctuation">@JsonIgnore</span><span class="token comment">// 忽略该属性:为啥呢？我们来分析一下！</span><span class="token comment">/**      * 如果我们不忽略掉员工对象中的部门属性      * System.out.println(mapper.writeValueAsString(d));      * 会出现下面的结果：      * {      *  "name":"Market","emps":      *  [c      *      {"name":"csp",dept:{name:'xxx',emps:'...'}},      *      ...      *  ]      * }      * 也就是说，输出结果中，部门对象dept的json串中包含员工对象emp，      * 而员工对象emp 中又包含dept，这样互相包含就无线递归下去，json串越来越长...      * 直到栈溢出！      */</span><span class="token keyword">private</span> Dept dept<span class="token punctuation">;</span><span class="token keyword">public</span> String<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Dept<span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> dept<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setDept</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>dept<span class="token operator">=</span> dept<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**  * 部门  */</span><span class="token keyword">class</span><span class="token class-name">Dept</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> List<span class="token generics function"><span class="token punctuation">&lt;</span>Emp<span class="token punctuation">&gt;</span></span> emps<span class="token punctuation">;</span><span class="token keyword">public</span> String<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> List<span class="token generics function"><span class="token punctuation">&lt;</span>Emp<span class="token punctuation">&gt;</span></span><span class="token function">getEmps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> emps<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setEmps</span><span class="token punctuation">(</span>List<span class="token generics function"><span class="token punctuation">&lt;</span>Emp<span class="token punctuation">&gt;</span></span> emps<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>emps<span class="token operator">=</span> emps<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4><a id="25__370" rel="nofollow"></a>2.5 线程运行诊断</h4> <p><strong>案例1：CPU占用过高</strong></p> <ul> <li> <p>Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程</p> <ul> <li> <p><strong>top</strong>命令，查看是哪个<strong>进程</strong>占用CPU过高</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/c7269f4d87fe56596691645aaeb3e0f0.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/b9825ac2b3e75768a9c2dca0bb169807.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> </li> <li> <p><strong>ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过top查到的进程号</strong> 通过ps命令进一步查看具体是哪个线程占用CPU过高！</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/e80dbf995932945ac5086ada7d6fde0e.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> </li> <li> <p><strong>jstack 进程id</strong> 通过查看进程中的线程的nid，刚才通过ps命令看到的tid来<strong>对比定位</strong>，注意jstack查找出的线程id是<strong>16进制的</strong>，<strong>需要转换</strong></p> <ul> <li>可以通过线程id，找到有问题的线程，进一步定位到问题代码的源码行数！</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/52231cd922ee8b353d3298612ea911e6.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/a6e6f94bef0e74e5148d0837466f662f.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> </li> </ul> </li> </ul> <p>我们可以看到上图中的<strong>thread1</strong> 线程一直在运行(runnable)中，说明就是它占用了较高的CPU内存；</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/f5a84332c930132a790071daf7af7372.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/01fe0bf4beec8608e390d6d4ea768a30.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <h3><a id="3_397" rel="nofollow"></a>3、本地方法栈</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/26fbec7c1203e24a595f352978a970b5.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <p>一些带有<strong>native 关键字</strong>的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法！</p> <p>如图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/a61254e12370f4e899eb7d70459e6d43.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220830/1ffd1d93b72a9c76eca47bc97e7c6733.jpg" alt="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)"></p> <ul> <li>本地接口的作用是融合不同的编程语言为Java所用,它的初衷是融合C/C++程序,Java诞生的时候是C/C++横行的时候,要想立足,必须由调用C/C++程序,于是就在内存中专门开辟了一块区域处理标记为native的代码,它的具体做法是Native Method Stack中登记native方法,在Execution Engine执行时加载native libraies</li> <li>目前该方法的使用的越来越少了,除非是与硬件有关的应用,比如通过Java程序驱动打印机或者Java系统管理生产设备,在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达,比如可以使用Socket通信,也可以使用Web Service等等,不多做介绍</li> <li>本地方法栈(Native Method Stack)：(它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库)</li> <li>native方法的举例: Object类中的clone wait notify hashCode 等 Unsafe类都是native方法</li> </ul> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2491.htm">jQuery显示与隐藏动画</a></p>
                                        <p>下一个：<a href="/html/category/article-2493.htm">FreeRTOS实时操作系统信号量基础_操作系统</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2512.htm" title="测试开发该如何在团队中推广新工具和新技术">测试开发该如何在团队中推广新工具和新技术</a></li>
                        <li class="py-2"><a href="/html/category/article-2476.htm" title="Shiro介绍及解析">Shiro介绍及解析</a></li>
                        <li class="py-2"><a href="/html/category/article-2505.htm" title="SpringMvc注解@PathVariable">SpringMvc注解@PathVariable</a></li>
                        <li class="py-2"><a href="/html/category/article-2474.htm" title="vue-cli4.5.13按需引入vant，解决vant样式失效问题">vue-cli4.5.13按需引入vant，解决vant样式失效问题</a></li>
                        <li class="py-2"><a href="/html/category/article-2510.htm" title="记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题">记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题</a></li>
                        <li class="py-2"><a href="/html/category/article-2477.htm" title="spring和springMVC整合父子容器问题：整合Spring时Service层为什么不做全局包扫描详解">spring和springMVC整合父子容器问题：整合Spring时Service层为什么不做全局包扫描详解</a></li>
                        <li class="py-2"><a href="/html/category/article-2516.htm" title="vue中watch监听，ajax异步问题解决">vue中watch监听，ajax异步问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-2494.htm" title="flink调优之RocksDB设置">flink调优之RocksDB设置</a></li>
                        <li class="py-2"><a href="/html/category/article-2498.htm" title="详解如何在Flutter中获取设备标识符_Android_">详解如何在Flutter中获取设备标识符_Android_</a></li>
                        <li class="py-2"><a href="/html/category/article-2483.htm" title="setTimeout、Promise、Async/Await 的区别">setTimeout、Promise、Async/Await 的区别</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>