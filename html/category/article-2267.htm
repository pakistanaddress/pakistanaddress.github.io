<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2267.htm" />
<title>Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex） - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex）</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atelier-sulphurpool-light"> <div class="toc"> <h3>Go 互斥锁（sync.Mutex）和 读写锁（sync.RWMutex） </h3> <ul> <li>什么时候需要用到锁？</li> <li>互斥锁（sync.Mutex）</li> <li>读写锁（sync.RWMutex）</li> <li>互斥锁和读写锁的性能对比</li> <li> <ul> <li>1）使用互斥锁：</li> <li>2）使用读写锁</li> <li>结论</li> </ul> </li> <li>关于互斥锁的补充</li> <li>关于读写锁的补充</li> </ul> </div> <h1> 什么时候需要用到锁？</h1> <p>当程序中就一个线程的时候，是不需要加锁的，但是通常实际的代码不会只是单线程，所以这个时候就需要用到锁了，那么关于锁的使用场景主要涉及到哪些呢？</p> <ul> <li>多个线程在读相同的数据时</li> <li>多个线程在写相同的数据时</li> <li>同一个资源，有读又有写</li> </ul> <h1> 互斥锁（sync.Mutex）</h1> <p>互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个 goroutine 可以访问到共享资源（同一个时刻只有一个线程能够拿到锁）</p> <p>先通过一个并发读写的例子演示一下，当多线程同时访问全局变量时，结果会怎样？</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> count <span class="token builtin">int</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 count <span class="token operator">++</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>       fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>   运行结果： <span class="token number">980117</span> <span class="token number">1011352</span>  <span class="token comment">//最后的结果基本不可能是我们想看到的：200000</span> </code></pre> <p>修改代码，在累加的地方添加互斥锁，就能保证我们每次得到的结果都是想要的值</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>     <span class="token string">"sync"</span> <span class="token punctuation">)</span>  <span class="token keyword">var</span> <span class="token punctuation">(</span>     count <span class="token builtin">int</span>     lock sync<span class="token punctuation">.</span>Mutex <span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 count <span class="token operator">++</span>                 lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>      fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>  运行结果： <span class="token number">1952533</span> <span class="token number">2000000</span>  <span class="token comment">//最后的线程打印输出</span> </code></pre> <h1> 读写锁（sync.RWMutex）</h1> <p>在读多写少的环境中，可以优先使用读写互斥锁（sync.RWMutex），它比互斥锁更加高效。sync 包中的 RWMutex 提供了读写互斥锁的封装</p> <p>读写锁分为：读锁和写锁</p> <ul> <li>如果设置了一个写锁，那么其它读的线程以及写的线程都拿不到锁，这个时候，与互斥锁的功能相同</li> <li>如果设置了一个读锁，那么其它写的线程是拿不到锁的，但是其它读的线程是可以拿到锁</li> </ul> <p>通过设置写锁，同样可以实现数据的一致性：</p> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>     <span class="token string">"sync"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count <span class="token builtin">int</span>     rwLock sync<span class="token punctuation">.</span>RWMutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{<!-- --></span>                 rwLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 count <span class="token operator">++</span>                 rwLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>             fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>       fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment">//等待子线程全部结束</span> <span class="token punctuation">}</span>   运行结果： <span class="token number">1968637</span> <span class="token number">2000000</span>  </code></pre> <h1> 互斥锁和读写锁的性能对比</h1> <p>demo：制作一个读多写少的例子，分别开启 3 个 goroutine 进行读和写，输出最终的读写次数</p> <h2> 1）使用互斥锁：</h2> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"fmt"</span>     <span class="token string">"sync"</span>     <span class="token string">"time"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count  <span class="token builtin">int</span>     <span class="token comment">//互斥锁</span>     countGuard sync<span class="token punctuation">.</span>Mutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token builtin">string</span> <span class="token operator">=</span> mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">func</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"johny"</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>       <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>     <span class="token keyword">var</span> mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{<!-- --></span><span class="token string">"nema"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"最终读写次数：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">}</span>   运行结果： 最终读写次数：<span class="token number">3766</span>  </code></pre> <h2> 2）使用读写锁</h2> <pre><code class="prism language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"fmt"</span>     <span class="token string">"sync"</span>     <span class="token string">"time"</span> <span class="token punctuation">)</span>   <span class="token keyword">var</span> <span class="token punctuation">(</span>     count  <span class="token builtin">int</span>     <span class="token comment">//读写锁</span>     countGuard sync<span class="token punctuation">.</span>RWMutex <span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//这里定义了一个读锁</span>         <span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token builtin">string</span> <span class="token operator">=</span> mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         countGuard<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token keyword">func</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">for</span> <span class="token punctuation">{<!-- --></span>         countGuard<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//这里定义了一个写锁</span>         mapA<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"johny"</span>         count <span class="token operator">+=</span> <span class="token number">1</span>         time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>         countGuard<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>       <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>     <span class="token keyword">var</span> mapA <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{<!-- --></span><span class="token string">"nema"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">go</span> <span class="token function">write</span><span class="token punctuation">(</span>mapA<span class="token punctuation">)</span>     <span class="token punctuation">}</span>       time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"最终读写次数：%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">}</span>   运行结果： 最终读写次数：<span class="token number">8165</span>  </code></pre> <h2> 结论</h2> <p>结果差距大概在 2 倍左右，读锁的效率要快很多！</p> <h1> 关于互斥锁的补充</h1> <p>互斥锁需要注意的问题：</p> <ol> <li>不要重复锁定互斥锁</li> <li>不要忘记解锁互斥锁，必要时使用 defer 语句</li> <li>不要在多个函数之间直接传递互斥锁</li> </ol> <p>死锁： 当前程序中的主 goroutine 以及我们启用的那些 goroutine 都已经被阻塞，这些 goroutine 可以被称为用户级的 goroutine 这就相当于整个程序已经停滞不前了，并且这个时候 go 程序会抛出如下的 panic：</p> <pre><code class="prism language-go">fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span> </code></pre> <p>并且go语言运行时系统抛出自行抛出的panic都属于致命性错误，都是无法被恢复的，调用recover函数对他们起不到任何作用</p> <p>Go语言中的互斥锁是开箱即用的，也就是我们声明一个sync.Mutex 类型的变量，就可以直接使用它了，<strong>需要注意：该类型是一个结构体类型，属于值类型的一种，将它当做参数传给一个函数，将它从函数中返回，把它赋值给其他变量，让它进入某个管道，都会导致他的副本的产生。并且原值和副本以及多个副本之间是完全独立的，他们都是不同的互斥锁</strong>，所以不应该将锁通过函数的参数进行传递。</p> <h1> 关于读写锁的补充</h1> <ol> <li>在写锁已被锁定的情况下再次试图锁定写锁，会阻塞当前的goroutine</li> <li>在写锁已被锁定的情况下再次试图锁定读锁，也会阻塞当前的goroutine</li> <li>在读锁已被锁定的情况下试图锁定写锁，同样会阻塞当前的goroutine</li> <li>在读锁已被锁定的情况下再试图锁定读锁，并不会阻塞当前的goroutine</li> </ol> <p>对于某个受到读写锁保护的共享资源，多个写操作不能同时进行，写操作和读操作也不能同时进行，但多个读操作却可以同时进行</p> <p>对写锁进行解锁，会唤醒“所有因试图锁定读锁，而被阻塞的goroutine”, 并且这个通常会使他们都成功完成对读锁的锁定（这个还不理解）</p> <p>对读锁进行解锁，只会在没有其他读锁锁定的前提下，唤醒“因试图锁定写锁，而被阻塞的 goroutine” 并且只会有一个被唤醒的 goroutine 能够成功完成对写锁的锁定，其他的 goroutine 还要在原处继续等待，至于哪一个goroutine，那么就要看谁等待的事件最长</p> <p>解锁读写锁中未被锁定的写锁， 会立即引发panic ，对其中的读锁也是如此，并且同样是不可恢复的。</p> <p>原文链接：<br /> https://www.cnblogs.com/kaichenkai/p/11108303.html<br /> https://www.cnblogs.com/zhaof/p/8636384.html</p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2266.htm">vue项目如何刷新当前页面</a></p>
                                        <p>下一个：<a href="/html/category/article-2268.htm">QT下载安装和Visual Studio环境配置</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6121.htm" title="宠物医院需要什么许可证（开宠物医院需要什么许可证）">宠物医院需要什么许可证（开宠物医院需要什么许可证）</a></li>
                        <li class="py-2"><a href="/html/category/article-6723.htm" title="宠物店猫粮最便宜多少钱一袋 宠物店猫粮最便宜多少钱一袋">宠物店猫粮最便宜多少钱一袋 宠物店猫粮最便宜多少钱一袋</a></li>
                        <li class="py-2"><a href="/html/category/article-6209.htm" title="附近哪里可以领养宠物（附近哪里可以领养宠物狗）">附近哪里可以领养宠物（附近哪里可以领养宠物狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7275.htm" title="动物打防疫针管用吗（动物打预防针的作用）">动物打防疫针管用吗（动物打预防针的作用）</a></li>
                        <li class="py-2"><a href="/html/category/article-6769.htm" title="宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内">宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内</a></li>
                        <li class="py-2"><a href="/html/category/article-7090.htm" title="花鼠明星俱乐部（花鼠能长多大）">花鼠明星俱乐部（花鼠能长多大）</a></li>
                        <li class="py-2"><a href="/html/category/article-7228.htm" title="中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）">中国动物疫苗生产企业排名前十（国内动物疫苗生产企业有多少家）</a></li>
                        <li class="py-2"><a href="/html/category/article-6860.htm" title="济南宠物领养微信群 济南宠物领养微信群号">济南宠物领养微信群 济南宠物领养微信群号</a></li>
                        <li class="py-2"><a href="/html/category/article-7320.htm" title="动物注射疫苗的流程视频（动物疫苗注射方法）">动物注射疫苗的流程视频（动物疫苗注射方法）</a></li>
                        <li class="py-2"><a href="/html/category/article-6998.htm" title="天宠宠物殡葬官网上海（天宠宠物殡葬人均消费）">天宠宠物殡葬官网上海（天宠宠物殡葬人均消费）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>