<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2509.htm" />
<title>python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<p>除了从文件加载数据，另一个数据源是互联网，互联网每天产生各种不同的数据，可以用各种各样的方式从互联网加载数据。</p> <p>一、了解&nbsp;Web API</p> <p>Web 应用编程接口（API）自动请求网站的特定信息，再对这些信息进行可视化。每次运行，都会获取最新的数据来生成可视化，因此即便网络上的数据瞬息万变，它呈现的信息也都是最新的。</p> <p>Web API是网站的一部分，用于与使用非常具体的URL请求特定信息的程序交互。这种请求称为API调用。请求的数据将以易于处理的格式（如JSON或CSV）返回。</p> <p>&nbsp;GitHub（https://github.com/）上的项目都存储在仓库中，后者包含与项目相关联的一切：代码、项目参与者的信息、问题或bug报告等，编写一个自动下载GitHub上的Python项目的相关信息。</p> <p>&nbsp;在浏览器中打开：<span style="color: rgba(255, 0, 0, 1)"> https://api.github.com/search/repositories?q=language:python&amp;sort=stars</span>，可以看到如下内容，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/44671dfb2c04f38f7ab5929f82f89216.jpg" alt="python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具"></p> <p>此调用返回GitHub当前托管了total_count&nbsp; &nbsp;8884066个Python项目，还有最受欢迎的Python仓库的信息。</p> <p>其中第一部分（ https://api.github.com/ ）将请求发送到GitHub网站中响应API调用的部分；</p> <p>第二部分（ search/repositories ）让API搜索GitHub上的所有仓库。</p> <p>repositories 后面的问号指出我们要传递一个实参。 q 表示查询，而等号让我们能够开始指定<br />查询（ q= ）。通过使用 language:python ，我们指出只想获取主要语言为Python的仓库的信息。</p> <p>最后一部分（ &amp;sort=stars ）指定将项目按其获得的星级进行排序。</p> <p>但我们不能每次通过打开网页的形式来获取数据。但可以通过python中相关库</p> <p>二、安装&nbsp;requests</p> <p>requests是一个很实用的Python HTTP客户端库，专门用于发送HTTP请求，方便编程，编写爬虫和测试服务器响应数据时经常会用到，</p> <p>Requests主要相关参数有：</p> <p><span style="color: rgba(255, 0, 0, 1)">r.status_code 响应状态码</span><br /><span style="color: rgba(255, 0, 0, 1)">r.heards 响应头</span><br /><span style="color: rgba(255, 0, 0, 1)">r.cookies 响应cookies</span></p> <p><span style="color: rgba(255, 0, 0, 1)"> r.text 响应文本</span><br /><span style="color: rgba(255, 0, 0, 1)">r. encoding 当前编码</span><br /><span style="color: rgba(255, 0, 0, 1)">r. content 以字节形式（二进制）返回</span></p> <p>鉴于一直都使用的是anaconda3,可直接打开 anaconda prompt，然后输入命令：<span style="color: rgba(255, 0, 0, 1)">pip install --user requests 安装即可。</span></p> <p>下面来编写一个程序，执行API调用并处理结果，找出GitHub上星级最高的Python项目，代码如下：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">import</span> requests<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 导入模块requests</span><span style="color: rgba(0, 0, 0, 1)"> url</span>=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">https://api.github.com/search/repositories?q=language:python&amp;sort=stars</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">存储API调用的URL</span> r = requests.get(url)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 调用get()并将URL传递给它，响应对象存储在变量 r中</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Status code:</span><span style="color: rgba(128, 0, 0, 1)">"</span>,r.status_code)<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">包含一个名为status_code的属性</span> response_dict = r.json()<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 使用方法json()将这些信息转换为一个Python字典</span><span style="color: rgba(0, 0, 255, 1)">print</span>(response_dict.keys())<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">打印出字典的key</span></pre> </div> <p>上述代码有两行打印，运行结果如下：</p> <div class="cnblogs_Highlighter"> <pre class="brush:csharp;gutter:true;">Status code: 200 dict_keys(['total_count', 'incomplete_results', 'items'])</pre> </div> <p>状态码为200，请求成功。响应字典包含三个键： 'total_count'和 'incomplete_results'和&nbsp;'items'</p> <p>将API调用返回的信息存储到字典中，就可以利用前面了解的字典的键-值对来研究自己喜欢的信息了。</p> <p>三、整理字典中的信息</p> <p>上述代码response_dict = r.json()实际上已将请求信息转为字典，那查看一下字典里有些什么内容。</p> <p>从浏览器中打开的内容可以看到，返回的内容中是字典中包含字典</p> <p>（items是作为最上那个大括号中的key，对应的值，是由多个字典组成的字典列表，‘id’，‘node_id’，‘name’等也是items列表中第一子字典的key，见红色方框部分，列表字典等相互嵌套，好好分析一下）。</p> <p>1）先看一下与 'total_count'关联的值</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Total repositories:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, response_dict[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">total_count</span><span style="color: rgba(128, 0, 0, 1)">'</span>])</pre> </div> <p>2）items本身是一个字典，‘id’，‘node_id’，‘name’等均是key，后面对应的都是值，可以查一下有多少个key</p> <div class="cnblogs_code"> <pre>repo_dicts = response_dict[<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">items</span><span style="color: rgba(128, 0, 0, 1)">'</span>]<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">建一个变量字典repo_dicts，将items字典列表存储在 repo_dicts</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Repositories returned:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, len(repo_dicts))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)"> 打 repo_dicts的长度，获得item字典的长度信息</span></pre> </div> <p>3）查看第一个item的详细信息，并打印出所有key</p> <div class="cnblogs_code"> <pre>repo_dict = repo_dicts[0]<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">提取了repo_dicts中的第一个字典</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\nKeys:</span><span style="color: rgba(128, 0, 0, 1)">"</span>, len(repo_dict))<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">打印这个字典包含的键数</span><span style="color: rgba(0, 0, 255, 1)">print</span>(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">for</span> key<span style="color: rgba(0, 0, 255, 1)">in</span> repo_dict.keys():<span style="color: rgba(0, 128, 0, 1)">#</span><span style="color: rgba(0, 128, 0, 1)">打印这个字典的所有键</span><span style="color: rgba(0, 0, 255, 1)">print</span>(key)</pre> </div> <p>整体运行结果（下图白色部分为浏览器打开）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ab21b6371eb38ce0a11604f60cd742ef.jpg" alt="python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具"></p> <p><span style="color: rgba(255, 0, 0, 1)">思考一下，为什么图中的Total repositories一个是9037884，另一个为9145790，两者不一致？</span></p> <p>有了key，就很容易查询到相关的值了（当然这里都是字符串，如果是数字型的就能可视化）</p> <p>&nbsp;四，数字可视化</p> <p>通过浏览器打开页面，会发现"forks": 32471,&nbsp; &nbsp; &nbsp; &nbsp;"open_issues": 305,&nbsp; &nbsp; &nbsp; &nbsp;"watchers": 177777等有相关数据，于是，可以通过对应的key，将相关数据整合成一个数据列表，然后显示出来，比如可视化wathers</p> <div class="cnblogs_code"> <pre>count=<span style="color: rgba(0, 0, 0, 1)">0   watchers, counts</span>=<span style="color: rgba(0, 0, 0, 1)"> [], []</span><span style="color: rgba(0, 0, 255, 1)">for</span> repo_dict<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)"> repo_dicts:     watchers.append(repo_dict[</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">watchers</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">])     count</span>+= 1<span style="color: rgba(0, 0, 0, 1)">     counts.append(count)  plt.bar(counts,watchers, label</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">watchers</span><span style="color: rgba(128, 0, 0, 1)">"</span>, color=<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">#ff2204</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">) plt.legend() plt.show()</span></pre> </div> <p>运行结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c2a9a969cc12f5e6dbcf9ef0443aaa99.jpg" alt="python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具"></p> <p>五、数据可视化的小总结：</p> <p>&nbsp;matplotlib中数据可视化的方法主要就是调用pyplot接口，再直接调用对象的建立方法，在方法中对该对象进行相应的属性设置，所以掌握这种方法的核心就在于掌握每种对象的建立方法和具体参数设置。Python数据可视化的难处在于掌握参数的设置，内置的参数虽然很多，但一般都用不上（可以留着慢慢钻研），将用得上的参数和参数值几何整理下来，做到这样，对于Python的可视化学习暂时足矣。剩下的时间该去学习其他更为有用的！</p> <p>简而化之，</p> <p>曲线图&nbsp; &nbsp;plt.plot(squares, linewidth=5)<span style="color: rgba(255, 0, 0, 1)"> 只需要提供一组数据即可</span><br />散点图&nbsp; &nbsp;plt.scatter(x, y,c='r',edgecolor='none',s=100) ，<span style="color: rgba(255, 0, 0, 1)">x,y分别为x轴，y轴坐标位置，x,y对应</span><br />柱图&nbsp; &nbsp; &nbsp; plt.bar(x,y, label="Test one", color='r')<span style="color: rgba(255, 0, 0, 1)">x为x轴位置，y为值，x如为数列,则y对应相同长度</span><br />柱图&nbsp; &nbsp; &nbsp; plt.hist(list, bins, histtype='bar', rwidth=0.8,color='r')<span style="color: rgba(255, 0, 0, 1)">bins为柱图划分范围，表现在x轴上，list为数列，显示在y 轴</span><br />饼图&nbsp; &nbsp; &nbsp; plt.pie(slices)   slices<span style="color: rgba(255, 0, 0, 1)"> 为一数列</span><br />堆叠图&nbsp; plt.stackplot(days, times,labels=labellist,colors=colorlist)<span style="color: rgba(255, 0, 0, 1)">&nbsp;days为一维数列，times为一维或多维数列，每一维数列元素个数与days一样。</span></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2508.htm">idea中配置maven仓库</a></p>
                                        <p>下一个：<a href="/html/category/article-2510.htm">记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2481.htm" title="检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？">检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2499.htm" title="我们如何解析Java中的嵌套JSON对象？">我们如何解析Java中的嵌套JSON对象？</a></li>
                        <li class="py-2"><a href="/html/category/article-2478.htm" title="Jackson忽略字段不序列化字段的3种方法">Jackson忽略字段不序列化字段的3种方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2508.htm" title="idea中配置maven仓库">idea中配置maven仓库</a></li>
                        <li class="py-2"><a href="/html/category/article-2506.htm" title="JavaScript如何使用过滤器从数组中删除元素">JavaScript如何使用过滤器从数组中删除元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2513.htm" title="hbase的概述和hbase架构及基本组件">hbase的概述和hbase架构及基本组件</a></li>
                        <li class="py-2"><a href="/html/category/article-2526.htm" title="【笔记】PyTorch快速入门：基础部分合集_在线工具">【笔记】PyTorch快速入门：基础部分合集_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2524.htm" title="Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具">Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2487.htm" title="Python Module_subprocess子进程(程序调用)">Python Module_subprocess子进程(程序调用)</a></li>
                        <li class="py-2"><a href="/html/category/article-2486.htm" title="Java实习生面试题汇总">Java实习生面试题汇总</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>