<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2437.htm" />
<title>PostgreSQL执行计划：Bitmap scan VS index only scan - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">PostgreSQL执行计划：Bitmap scan VS index only scan</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<p><span style="font-family: verdana, geneva">之前了解过postgresql的Bitmap scan，只是粗略地了解到是通过标记数据页面来实现数据检索的，执行计划中的的Bitmap scan一些细节并不十分清楚。这里借助一个执行计划来分析bitmap scan以及index only scan，以及两者的一些区别。</span><br /><span style="font-family: verdana, geneva">这里有关于Bitmap scan的一些实现过程，</span>https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan<br /><strong><br />0. 构建测试环境</strong></p> <p>PG版本为11，如下测试脚本，构建一个简单的测试表</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">create</span><span style="color: rgba(0, 0, 255, 1)">table</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01 (     c1     serial</span><span style="color: rgba(128, 128, 128, 1)">not</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 255, 1)">primary</span><span style="color: rgba(0, 0, 255, 1)">key</span><span style="color: rgba(0, 0, 0, 1)">,     c2</span><span style="color: rgba(0, 0, 255, 1)">varchar</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">100</span><span style="color: rgba(0, 0, 0, 1)">),     c3</span><span style="color: rgba(0, 0, 255, 1)">timestamp</span><span style="color: rgba(0, 0, 0, 1)">  )</span><span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)">c3字段上建索引</span><span style="color: rgba(0, 0, 255, 1)">create</span><span style="color: rgba(0, 0, 255, 1)">index</span> ix_c3<span style="color: rgba(0, 0, 255, 1)">on</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01(c3);</span><span style="color: rgba(0, 0, 255, 1)">truncate</span><span style="color: rgba(0, 0, 255, 1)">table</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01;</span><span style="color: rgba(0, 128, 128, 1)">--</span><span style="color: rgba(0, 128, 128, 1)">写入300W行测试数据，c3列生成随机时间</span><span style="color: rgba(0, 0, 255, 1)">insert</span><span style="color: rgba(0, 0, 255, 1)">into</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01 (c2,c3)</span><span style="color: rgba(0, 0, 255, 1)">select</span>  uuid_generate_v1(),NOW()<span style="color: rgba(128, 128, 128, 1)">-</span> (random()<span style="color: rgba(128, 128, 128, 1)">*</span> (NOW()<span style="color: rgba(128, 128, 128, 1)">+</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">1000 days</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(128, 128, 128, 1)">-</span> NOW()))<span style="color: rgba(0, 0, 255, 1)">from</span> generate_series(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>,<span style="color: rgba(128, 0, 0, 1); font-weight: bold">3000000</span>);</pre> </div> <p><strong>1. Bitmap Scan的剖析</strong></p> <p>用最最容易理解的场景来测试Bitmap Index Scan，执行如下sql，来分析bitma scan这个执行计划的含义。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">explain (analyze, buffers,verbose,timing)</span><span style="color: rgba(0, 0, 255, 1)">select</span><span style="color: rgba(255, 0, 255, 1)">count</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>)<span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01 a</span><span style="color: rgba(0, 0, 255, 1)">where</span> a.c3<span style="color: rgba(128, 128, 128, 1)">></span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">20220328</span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(128, 128, 128, 1)">or</span> a.c1<span style="color: rgba(128, 128, 128, 1)"><</span><span style="color: rgba(128, 0, 0, 1); font-weight: bold">100</span>;</pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b15fb360f43f7b4d9f5337b8ca4d9faf.jpg" alt="PostgreSQL执行计划：Bitmap scan VS index only scan"></p> <p>对以上的执行计划，有几个问题先弄清楚：<br />1，Bitmap Index Scan做了什么？<br />2，Bitmap Heap Scan做了什么？<br />3，Recheck Cond的目的是什么？</p> <p>第一个问题：Bitmap Index Scan做了什么？<br /><span class="Y2IQFc" lang="zh-CN">Bitmap scan的目标是一个bit数组，bit数组中的每一位映射到表中的一个数据页Id<strong><span class="Y2IQFc" lang="zh-CN">（<code>One bit per heap page, in the same order as the heap</code><span class="Y2IQFc" lang="zh-CN">）。</span></span></strong><br /><span class="Y2IQFc" lang="zh-CN">Bitmap Index Scan对于所有的查询条件，<span class="Y2IQFc">从扫描索引的所有页面，如果数据页面中有符合条件的数据，那么就将bit为标记为1，否则标记为0。</span></span><br />其他的查询条件依次创建一个一样的bit数组，同样扫描索引的所有页面，将符合条件的page的bit位标记为1。<br />最后多个条件生成的多个bit数组进行与（或）操作（取决于where多个条件是and组合或者or组合，上面截图中的BitmapOr），合并成一个最终的bit数组。<br />此时最终的bit数组标记的符合条件的数据页，而不是最终的数据行，所以最终还要去数据页中进行筛选。<br />https://dba.stackexchange.com/questions/119386/understanding-bitmap-heap-scan-and-bitmap-index-scan</p> <p>第二个问题：Bitmap Heap Scan做了什么<br />而BitMap Index Scan一次性将满足条件的索引项全部取出，并在内存中进行排序, 然后根据排序后的索引项访问表数据，也就是执行计划中的Bitmap Heap Scan。<br />bitmap index scan 内部优化机制：https://www.postgresql.org/message-id/12553.1135634231@sss.pgh.pa.us</p> <p>第三个问题：Recheck Cond的目的是什么<br />BitMap Heap Scan指示找到符合条件的数据页面，而不是具体的记录，此时找到数据页后再用where条件进行筛选其中的数据行，也就是执行计划中的Recheck Cond。<br />https://stackoverflow.com/questions/50959814/what-does-recheck-cond-in-explain-result-mean<br />If the bitmap gets too large we convert it to "lossy" style, in which we only remember which pages contain matching tuples instead of remembering each tuple individually. When that happens, the table-visiting phase has to examine each tuple on the page and recheck the scan condition to see which tuples to return.</span></p> <p><span class="Y2IQFc" lang="zh-CN"><br />bitmap scan示例图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5f8ac5fefd22fc558b017b21df8c94ff.jpg" alt="PostgreSQL执行计划：Bitmap scan VS index only scan" sizes="(max-width: 960px) 100vw, 960px" srcset="http://img.555519.xyz/uploads3/20220510/5f8ac5fefd22fc558b017b21df8c94ff.jpg 960w, https://www.cybertec-postgresql.com/wp-content/uploads/2018/01/03_PostgreSQL-Bitmap-scan-300x175.jpg 300w, https://www.cybertec-postgresql.com/wp-content/uploads/2018/01/03_PostgreSQL-Bitmap-scan-768x448.jpg 768w"><br />图片来源:https://www.cybertec-postgresql.com/en/postgresql-indexing-index-scan-vs-bitmap-scan-vs-sequential-scan-basics/<br />bitmap index scan不仅仅发生在where条件中有多个筛选条件的场景（比如where c1 = m and c2 =n），其实对于一个条件的范围查询，也同样适用bitmap index scan，见下例。</span></p> <p><strong>2. 为什么执行计划走Bitmap Index Scan，而不是Index only Scan？</strong></p> <p>对于如下这个查询，表中有300W测试数据符合条件的数据比例很少，很明显，ix_c3上的索引扫描才是更优化的执行计划，为什么在默认情况下是Bitmap Index Scan？</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">select</span><span style="color: rgba(255, 0, 255, 1)">count</span>(<span style="color: rgba(128, 0, 0, 1); font-weight: bold">1</span>)<span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)"> my_test_table01 a</span><span style="color: rgba(0, 0, 255, 1)">where</span> a.c3<span style="color: rgba(128, 128, 128, 1)">></span><span style="color: rgba(255, 0, 0, 1)">'</span><span style="color: rgba(255, 0, 0, 1)">20220328</span><span style="color: rgba(255, 0, 0, 1)">'</span> ;</pre> </div> <p>从如下截图可以看到，vacuum是打开的，在造完测试数据后，默认情况下上述sql查询走了bitmap Index scan，因为c3上有索引，预期是走ix_c3上的索引。<br />原本以为vacuum是异步的，或者说有滞后性，但是这个case在测试数据构造完之后几个小时甚至几天，该查询都依旧走bitmap Index scan的方式。<br />当关闭enable_bitmapscan和enable_seqscan，强制优化器走ix_c3上的index only scan，代价明显更大，这就有点说不通了，原因下文会具体分析。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4fce59131bc0a59db8344e32c02742f7.jpg" alt="PostgreSQL执行计划：Bitmap scan VS index only scan"></p> <p>本人对该现象一开始也是百思不得其解，难道是bitmap scan有什么魔法？</p> <p>看到这里有一个提到这个问题：https://www.datadoghq.com/blog/postgresql-vacuum-monitoring/，里面相关的内容的是这么说的：<br />1.<span style="background-color: rgba(255, 255, 0, 1)">Large insert-only tables.&nbsp; Large insert-only tables are not automatically vacuumed (except for transaction-ID wraparound), because autovacuum is triggered by updates and deletes</span>.&nbsp; This is generally a good thing, because it saves a great deal of not-very-useful work.&nbsp; However, it's problematic for index-only scans, because it also means the visibility map bits won't get set.&nbsp; I don't have a very clear idea what to do about this, but it's likely to need thought and work.&nbsp; For a first version of this feature, we'll likely have to rely on users to do a manual VACUUM in this case.</p> <p>既然这种场景无法主从出发vacuum，那么这里就手动vacuum测试表，然后打开bitmap scan选项，继续观察此时的默认情况下，该查询是不是可以走index only scan，这一次终于是预期的ix_c3上的index only scan了。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e0271ec3d151ee200c0d55245ff22645.jpg" alt="PostgreSQL执行计划：Bitmap scan VS index only scan"></p> <p><span class="Y2IQFc" lang="zh-CN">同时还有一个疑问：对表执行vacuum前后，index only scan的shared hit差别这么大？<br />上述得知在large-insert的情况下，不会触发表上的vacuum，此时如果强制使用index only scan，因为索引上的没有数据行的可见性信息（Index Only Scan operation must visit the heap to check if the row is visible.）所以在vacuum之前，强制使用index only scan的过程中，对于任何一行数据都要回表进行可见性判断，因此会产生大量的shared hit。一旦vacuum之后，由于索引上更新了数据行的可见性，不需要回表判断，因此shared hit会大幅度地降低。</span></p> <p><strong>3. 主动触发vacuum.</strong><br />&nbsp;Large insert-only tables are not automatically vacuumed，也就是大批量的插入无法主动发出vacuum，vacuum由update和delete产生，那么尝试对表执行一些update或者delete操作，会不会主动触发vacuum？<br />基于第一步的脚本，重新初始化测试表，在插入300W行数据后，删除其中一部分数据，目前是让delete操作触发vacuum，然后再通过执行计划，观察是否会想手动vacuum一样，走index only scan。<br />经过三次删除，完美触发vacuum，执行计划有一开始bitmap scan更新为index only scan。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/94627a5d0cc3a1da2ef87f74500b7092.jpg" alt="PostgreSQL执行计划：Bitmap scan VS index only scan"></p> <p><span class="Y2IQFc" lang="zh-CN"><strong>4. bitmp index scan VS&nbsp;index-only scan</strong><br />参考这里https://www.cybertec-postgresql.com/en/killed-index-tuples/&nbsp;对 bitmap&nbsp; index scan 和 index-only scan的解释<br /></span></p> <div class="cnblogs_code"> <pre>PostgreSQL<span style="color: rgba(128, 0, 128, 1)">8.1</span> introduced the “bitmp index scan”. This scan method first creates a list of heap blocks to visit<span style="color: rgba(0, 0, 255, 1)">and</span> then scans them sequentially.<br/>This<span style="color: rgba(0, 0, 255, 1)">not</span> only reduces the random I/O, but also avoids that the same block<span style="color: rgba(0, 0, 255, 1)">is</span><span style="color: rgba(0, 0, 0, 1)"> visited several times during an index scan.  PostgreSQL</span><span style="color: rgba(128, 0, 128, 1)">9.2</span> introduced the “index-only scan”, which avoids fetching the heap tuple.<br/>This requires that all the required columns are in the index<span style="color: rgba(0, 0, 255, 1)">and</span> the “visibility map” shows that all tuples in the table block are visible to everybody.</pre> </div> <p>bitmp index scan不仅可以避免随机的IO操作，而且可以避免同一个页面（在一个查询执行过程中）被重复读取（一个页面中可能存在多条满足查询条件的元组，其他方式可能会多次读取同一个页面）。<br />index-only scan避免了从堆中读取数据，但是他要求所有请求的字段都在索引中，并且“visibility map” 中显示表块中的所有元组对所有事物都是可见的，但是索引中并不包含元组的可见性。</p> <p>本文通过一个看似不起眼的问题sql执行计划的分析，尝试分析bitmap scan 和index only scan的差异以及选择二者的原因，同时会涉index索引元组的可见性及vacuum没有触发的一些特殊场景。一个问题往往不是一个点，是一系列问题的合集，此事要躬行。</p> <p>参考链接：</p> <p><span class="Y2IQFc" lang="zh-CN">https://stackoverflow.com/questions/55651068/why-is-bitmap-scan-faster-than-index-scan-when-fetching-a-moderately-large-perce<br />https://ask.use-the-index-luke.com/questions/148/why-is-this-postgres-query-doing-a-bitmap-heap-scan-after-the-index-scan<br />http://rhaas.blogspot.com/2010/11/index-only-scans.html</span><br />https://smartkeyerror.com/PostgreSQL-MVCC-01<br />https://www.cnblogs.com/haylee/p/12206170.html<br />https://stackoverflow.com/questions/20386719/postgres-not-using-index-on-select-count-for-a-large-table<br /></p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2436.htm">用CSS实现超长的字符变成省略号</a></p>
                                        <p>下一个：<a href="/html/category/article-2438.htm">关于feign调用传递header的解决方法</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2839.htm" title="springboot之依赖版本管理">springboot之依赖版本管理</a></li>
                        <li class="py-2"><a href="/html/category/article-4084.htm" title="@Scheduled 动态配置cron">@Scheduled 动态配置cron</a></li>
                        <li class="py-2"><a href="/html/category/article-5586.htm" title="4月11日（星期二）CCTV8节目预告(4月11日星期二早安的视频)">4月11日（星期二）CCTV8节目预告(4月11日星期二早安的视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-2527.htm" title="Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库">Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库</a></li>
                        <li class="py-2"><a href="/html/category/article-2518.htm" title="vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)">vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)</a></li>
                        <li class="py-2"><a href="/html/category/article-4418.htm" title="动物医院运营管理工作内容怎么写（动物医院管理流程）">动物医院运营管理工作内容怎么写（动物医院管理流程）</a></li>
                        <li class="py-2"><a href="/html/category/article-4339.htm" title="怀孕了让猫挠了轻微出血有事吗要打针吗有事吗（怀孕让猫抓了一下有红印）">怀孕了让猫挠了轻微出血有事吗要打针吗有事吗（怀孕让猫抓了一下有红印）</a></li>
                        <li class="py-2"><a href="/html/category/article-4338.htm" title="济南美联教育 济南美联教育培训学校">济南美联教育 济南美联教育培训学校</a></li>
                        <li class="py-2"><a href="/html/category/article-2513.htm" title="hbase的概述和hbase架构及基本组件">hbase的概述和hbase架构及基本组件</a></li>
                        <li class="py-2"><a href="/html/category/article-4083.htm" title="正则表达式 \b \B，单词边界的匹配">正则表达式 \b \B，单词边界的匹配</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>