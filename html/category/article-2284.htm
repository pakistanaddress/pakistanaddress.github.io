<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2284.htm" />
<title>Spark Streaming 实战 日志分析数据清洗+统计访问量 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Spark Streaming 实战 日志分析数据清洗+统计访问量</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> <h3 id="1-项目需求">1 项目需求</h3> <p>1）需求</p> <ul> <li>统计今天到目前为止的访问量</li> <li>统计今天到目前为止从搜索引擎过来的课程的访问量</li> </ul> <p>2）开发环境与技术选型</p> <ul> <li>IDEA+maven</li> <li>flume+kafka+HBase</li> </ul> <p>3）安装配置 HBase</p> <ol> <li>下载、解压、配置环境变量</li> <li>配置文件</li> </ol> <p><strong>conf/hbase-env.sh</strong></p> <pre class="prettyprint"><code class="hljs bash">修改JAVA_HOME<span class="hljs-keyword">export</span> HBASE_MANAGES_ZK=<span class="hljs-literal">false</span></code></pre> <p><strong>conf/hbase-site.xml</strong></p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag"><<span class="hljs-title">configuration</span>></span><span class="hljs-tag"><<span class="hljs-title">property</span>></span><span class="hljs-tag"><<span class="hljs-title">name</span>></span>hbase.rootdir<span class="hljs-tag"></<span class="hljs-title">name</span>></span><span class="hljs-tag"><<span class="hljs-title">value</span>></span>hdfs://localhost:8020/hbase<span class="hljs-tag"></<span class="hljs-title">value</span>></span><span class="hljs-tag"></<span class="hljs-title">property</span>></span><span class="hljs-tag"><<span class="hljs-title">property</span>></span><span class="hljs-tag"><<span class="hljs-title">name</span>></span>hbase.cluster.distributed<span class="hljs-tag"></<span class="hljs-title">name</span>></span><span class="hljs-tag"><<span class="hljs-title">value</span>></span>true<span class="hljs-tag"></<span class="hljs-title">value</span>></span><span class="hljs-tag"></<span class="hljs-title">property</span>></span><span class="hljs-tag"><<span class="hljs-title">property</span>></span><span class="hljs-tag"><<span class="hljs-title">name</span>></span>hbase.zookeeper.quorum<span class="hljs-tag"></<span class="hljs-title">name</span>></span><span class="hljs-tag"><<span class="hljs-title">value</span>></span>localhost:2181<span class="hljs-tag"></<span class="hljs-title">value</span>></span><span class="hljs-tag"></<span class="hljs-title">property</span>></span><span class="hljs-tag"></<span class="hljs-title">configuration</span>></span></code></pre> <p><strong>conf/regionservers</strong></p> <pre class="prettyprint"><code class="hljs">localhost</code></pre> <p>4）HBase 建表</p> <pre class="prettyprint"><code class="hljs livecodeserver">//<span class="hljs-number">1</span> 启动hbase start-hbase.sh<span class="hljs-comment"> // 2 启动shell</span> hbase<span class="hljs-built_in">shell</span><span class="hljs-comment"> // 3 建表</span><span class="hljs-built_in">create</span><span class="hljs-string">'course_clickcount'</span>,<span class="hljs-string">'info'</span><span class="hljs-built_in">create</span><span class="hljs-string">'course_search_clickcount'</span>,<span class="hljs-string">'info'</span><span class="hljs-comment"> // 4 查看数据表</span> list<span class="hljs-comment"> // 5 查看数据表信息</span> describe<span class="hljs-string">'course_clickcount'</span><span class="hljs-comment"> // 6 查看表数据</span> scan<span class="hljs-string">'course_clickcount'</span></code></pre> <p>5）<strong>代码地址</strong></p> <h3 id="2-模拟日志生成">2 模拟日志生成</h3> <p>1）使用python开发日志生成器模拟产生日志，每分钟产生一次日志信息</p> <p><strong>generate_log.py</strong></p> <pre class="prettyprint"><code class="hljs python"><span class="hljs-comment">#coding=UTF-8</span><span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> time  url_paths=[<span class="hljs-string">"class/112.html"</span>,<span class="hljs-string">"class/128.html"</span>,<span class="hljs-string">"class/145.html"</span>,<span class="hljs-string">"class/130.html"</span>,<span class="hljs-string">"class/146.html"</span>,<span class="hljs-string">"class/131.html"</span>,<span class="hljs-string">"learn/821"</span>,<span class="hljs-string">"course/list"</span> ]  ip_slices=[<span class="hljs-number">132</span>,<span class="hljs-number">156</span>,<span class="hljs-number">124</span>,<span class="hljs-number">10</span>,<span class="hljs-number">29</span>,<span class="hljs-number">167</span>,<span class="hljs-number">143</span>,<span class="hljs-number">187</span>,<span class="hljs-number">30</span>,<span class="hljs-number">46</span>,<span class="hljs-number">55</span>,<span class="hljs-number">63</span>,<span class="hljs-number">72</span>,<span class="hljs-number">87</span>,<span class="hljs-number">98</span>,<span class="hljs-number">168</span>]  http_referers=[<span class="hljs-string">"https://www.baidu.com/s?wd={query}"</span>,<span class="hljs-string">"https://www.sogou.com/web?query={query}"</span>,<span class="hljs-string">"https://cn.bing.com/search?q={query}"</span>,<span class="hljs-string">"https://www.so.com/s?q={query}"</span> ]  search_keyword=[<span class="hljs-string">"spark sql实战"</span>,<span class="hljs-string">"hadoop 基础"</span>,<span class="hljs-string">"storm实战"</span>,<span class="hljs-string">"spark streaming实战"</span> ]  status_code=[<span class="hljs-string">"200"</span>,<span class="hljs-string">"404"</span>,<span class="hljs-string">"500"</span>]<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">sample_status_code</span><span class="hljs-params">()</span>:</span><span class="hljs-keyword">return</span> random.sample(status_code,<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">sample_referer</span><span class="hljs-params">()</span>:</span><span class="hljs-keyword">if</span> random.uniform(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)><span class="hljs-number">0.2</span>:<span class="hljs-keyword">return</span><span class="hljs-string">"-"</span>     refer_str=random.sample(http_referers,<span class="hljs-number">1</span>)     query_str=random.sample(search_keyword,<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> refer_str[<span class="hljs-number">0</span>].format(query=query_str[<span class="hljs-number">0</span>])<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">sample_url</span><span class="hljs-params">()</span>:</span><span class="hljs-keyword">return</span> random.sample(url_paths,<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">sample_ip</span><span class="hljs-params">()</span>:</span>     slice=random.sample(ip_slices,<span class="hljs-number">4</span>)<span class="hljs-keyword">return</span><span class="hljs-string">"."</span>.join([str(item)<span class="hljs-keyword">for</span> item<span class="hljs-keyword">in</span> slice])<span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">generate_log</span><span class="hljs-params">(count=<span class="hljs-number">10</span>)</span>:</span>     time_str=time.strftime(<span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>,time.localtime())      f=open(<span class="hljs-string">"/Users/Mac/testdata/streaming_access.log"</span>,<span class="hljs-string">"w+"</span>)<span class="hljs-keyword">while</span> count >=<span class="hljs-number">1</span>:         query_log=<span class="hljs-string">"{ip}\t{local_time}\t\"GET /{url} HTTP/1.1\"\t{status_code}\t{refer}"</span>.format(url=sample_url(),ip=sample_ip(),refer=sample_referer(),status_code=sample_status_code(),local_time=time_str)         print(query_log)         f.write(query_log+<span class="hljs-string">"\n"</span>)         count=count-<span class="hljs-number">1</span><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">'__main__'</span>:<span class="hljs-comment"># 每一分钟生成一次日志信息</span><span class="hljs-keyword">while</span><span class="hljs-keyword">True</span>:         generate_log()         time.sleep(<span class="hljs-number">60</span>)</code></pre> <h3 id="3-flume收集日志并对接kafka">3 flume收集日志并对接kafka</h3> <p>1）编写flume配置文件，streaming_project2.conf</p> <pre class="prettyprint"><code class="hljs lasso">exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sources<span class="hljs-subst">=</span> exec<span class="hljs-attribute">-source</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-subst">=</span>kafka<span class="hljs-attribute">-sink</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>channels<span class="hljs-subst">=</span> memory<span class="hljs-attribute">-channel</span>  exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sources<span class="hljs-built_in">.</span>exec<span class="hljs-attribute">-source</span><span class="hljs-built_in">.</span><span class="hljs-keyword">type</span><span class="hljs-subst">=</span>exec exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sources<span class="hljs-built_in">.</span>exec<span class="hljs-attribute">-source</span><span class="hljs-built_in">.</span>command<span class="hljs-subst">=</span>tail<span class="hljs-attribute">-F</span> /Users/Mac/testdata/streaming_access<span class="hljs-built_in">.</span><span class="hljs-keyword">log</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sources<span class="hljs-built_in">.</span>exec<span class="hljs-attribute">-source</span><span class="hljs-built_in">.</span>shell<span class="hljs-subst">=</span> /bin/sh<span class="hljs-attribute">-c</span>  exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>memory<span class="hljs-attribute">-channel</span><span class="hljs-built_in">.</span><span class="hljs-keyword">type</span><span class="hljs-subst">=</span>memory  exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span><span class="hljs-keyword">type</span><span class="hljs-subst">=</span> org<span class="hljs-built_in">.</span>apache<span class="hljs-built_in">.</span>flume<span class="hljs-built_in">.</span>sink<span class="hljs-built_in">.</span>kafka<span class="hljs-built_in">.</span>KafkaSink exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>brokerList<span class="hljs-subst">=</span>localhost:<span class="hljs-number">9092</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>topic<span class="hljs-subst">=</span>test_topic exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>batchSize<span class="hljs-subst">=</span><span class="hljs-number">5</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>requireedAcks<span class="hljs-subst">=</span><span class="hljs-number">1</span>  exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sources<span class="hljs-built_in">.</span>exec<span class="hljs-attribute">-source</span><span class="hljs-built_in">.</span>channels<span class="hljs-subst">=</span>memory<span class="hljs-attribute">-channel</span> exec<span class="hljs-attribute">-memory</span><span class="hljs-attribute">-kafka</span><span class="hljs-built_in">.</span>sinks<span class="hljs-built_in">.</span>kafka<span class="hljs-attribute">-sink</span><span class="hljs-built_in">.</span>channel<span class="hljs-subst">=</span> memory<span class="hljs-attribute">-channel</span></code></pre> <h3 id="4-业务开发">4 业务开发</h3> <h5 id="41-消费kafka数据数据清洗与统计">4.1 消费kafka数据、数据清洗与统计</h5> <p>1）实体类</p> <p><strong>ClickLog.scala</strong></p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.domain<span class="hljs-javadoc">/**   * 清洗后的日志格式   *   *<span class="hljs-javadoctag">@param</span> ip   *<span class="hljs-javadoctag">@param</span> time   *<span class="hljs-javadoctag">@param</span> courseId   *<span class="hljs-javadoctag">@param</span> statusCode 日志访问状态码   *<span class="hljs-javadoctag">@param</span> referer   */</span><span class="hljs-class"><span class="hljs-keyword">case</span><span class="hljs-keyword">class</span><span class="hljs-title">ClickLog</span><span class="hljs-params">(ip: String, time: String, courseId: Int, statusCode: Int, referer: String)</span></span></code></pre> <p><strong>CourseClickCount.scala</strong></p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.domain<span class="hljs-javadoc">/**   * 课程点击次数实体类   *   *<span class="hljs-javadoctag">@param</span> day_course  对应HBase中的rowkey   *<span class="hljs-javadoctag">@param</span> click_count 访问次数   */</span><span class="hljs-class"><span class="hljs-keyword">case</span><span class="hljs-keyword">class</span><span class="hljs-title">CourseClickCount</span><span class="hljs-params">(day_course: String, click_count: Long)</span></span></code></pre> <p><strong>CourseSearchClickCount.scala</strong></p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.domain<span class="hljs-javadoc">/**   * 从搜索引擎过来的课程点击数实体类   *<span class="hljs-javadoctag">@param</span> day_search_course   *<span class="hljs-javadoctag">@param</span> click_count   */</span><span class="hljs-class"><span class="hljs-keyword">case</span><span class="hljs-keyword">class</span><span class="hljs-title">CourseSearchClickCount</span><span class="hljs-params">(day_search_course: String, click_count: Long)</span></span></code></pre> <p>2）工具类</p> <p><strong>DateUtils.scala</strong></p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.utils<span class="hljs-keyword">import</span> java.util.Date<span class="hljs-keyword">import</span> org.apache.commons.lang3.time.FastDateFormat<span class="hljs-javadoc">/**   * 日期时间工具类   */</span><span class="hljs-class"><span class="hljs-keyword">object</span><span class="hljs-title">DateUtils</span> {<!-- --></span><span class="hljs-keyword">val</span> OLD_FORMAT = FastDateFormat.getInstance(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)<span class="hljs-keyword">val</span> TARGET_FORMAT = FastDateFormat.getInstance(<span class="hljs-string">"yyyyMMddHHmmss"</span>)<span class="hljs-keyword">def</span> getTime(time: String) = {     OLD_FORMAT.parse(time).getTime   }<span class="hljs-keyword">def</span> parseToMinute(time: String) = {     TARGET_FORMAT.format(<span class="hljs-keyword">new</span> Date(getTime(time)))   }<span class="hljs-keyword">def</span> main(args: Array[String]): Unit = {     println(parseToMinute(<span class="hljs-string">"2018-9-6 13:58:01"</span>))   } }</code></pre> <p>添加依赖</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-comment"><!-- cloudera repo--></span><span class="hljs-tag"><<span class="hljs-title">repositories</span>></span><span class="hljs-tag"><<span class="hljs-title">repository</span>></span><span class="hljs-tag"><<span class="hljs-title">id</span>></span>cloudera<span class="hljs-tag"></<span class="hljs-title">id</span>></span><span class="hljs-tag"><<span class="hljs-title">url</span>></span>https://repository.cloudera.com/artifactory/cloudera-repos<span class="hljs-tag"></<span class="hljs-title">url</span>></span><span class="hljs-tag"></<span class="hljs-title">repository</span>></span><span class="hljs-tag"></<span class="hljs-title">repositories</span>></span><span class="hljs-tag"><<span class="hljs-title">dependency</span>></span><span class="hljs-tag"><<span class="hljs-title">groupId</span>></span>org.apache.hbase<span class="hljs-tag"></<span class="hljs-title">groupId</span>></span><span class="hljs-tag"><<span class="hljs-title">artifactId</span>></span>hbase-client<span class="hljs-tag"></<span class="hljs-title">artifactId</span>></span><span class="hljs-tag"><<span class="hljs-title">version</span>></span>${hbase.version}<span class="hljs-tag"></<span class="hljs-title">version</span>></span><span class="hljs-tag"></<span class="hljs-title">dependency</span>></span><span class="hljs-tag"><<span class="hljs-title">dependency</span>></span><span class="hljs-tag"><<span class="hljs-title">groupId</span>></span>org.apache.hbase<span class="hljs-tag"></<span class="hljs-title">groupId</span>></span><span class="hljs-tag"><<span class="hljs-title">artifactId</span>></span>hbase-server<span class="hljs-tag"></<span class="hljs-title">artifactId</span>></span><span class="hljs-tag"><<span class="hljs-title">version</span>></span>${hbase.version}<span class="hljs-tag"></<span class="hljs-title">version</span>></span><span class="hljs-tag"></<span class="hljs-title">dependency</span>></span><span class="hljs-comment"><!-- hadoop --></span><span class="hljs-tag"><<span class="hljs-title">dependency</span>></span><span class="hljs-tag"><<span class="hljs-title">groupId</span>></span>org.apache.hadoop<span class="hljs-tag"></<span class="hljs-title">groupId</span>></span><span class="hljs-tag"><<span class="hljs-title">artifactId</span>></span>hadoop-client<span class="hljs-tag"></<span class="hljs-title">artifactId</span>></span><span class="hljs-tag"><<span class="hljs-title">version</span>></span>${hadoop.version}<span class="hljs-tag"></<span class="hljs-title">version</span>></span><span class="hljs-tag"></<span class="hljs-title">dependency</span>></span></code></pre> <p><strong>HBaseUtils.java</strong></p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">package</span> com.lihaogn.spark.project.utils;<span class="hljs-keyword">import</span> org.apache.hadoop.conf.Configuration;<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.HBaseAdmin;<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.HTable;<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Put;<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.util.Bytes;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-javadoc">/**  * HBase操作工具类，Java工具类建议采用单例模式封装  */</span><span class="hljs-keyword">public</span><span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">HBaseUtils</span> {<!-- --></span>      HBaseAdmin admin =<span class="hljs-keyword">null</span>;     Configuration configuration =<span class="hljs-keyword">null</span>;<span class="hljs-javadoc">/**      * 私有构造方法      */</span><span class="hljs-keyword">private</span><span class="hljs-title">HBaseUtils</span>() {          configuration =<span class="hljs-keyword">new</span> Configuration();         configuration.set(<span class="hljs-string">"hbase.zookeeper.quorum"</span>,<span class="hljs-string">"localhost:2181"</span>);         configuration.set(<span class="hljs-string">"hbase.rootdir"</span>,<span class="hljs-string">"hdfs://localhost:8020/hbase"</span>);<span class="hljs-keyword">try</span> {             admin =<span class="hljs-keyword">new</span> HBaseAdmin(configuration);         }<span class="hljs-keyword">catch</span> (IOException e) {             e.printStackTrace();         }     }<span class="hljs-keyword">private</span><span class="hljs-keyword">static</span> HBaseUtils instance =<span class="hljs-keyword">null</span>;<span class="hljs-keyword">public</span><span class="hljs-keyword">static</span><span class="hljs-keyword">synchronized</span> HBaseUtils<span class="hljs-title">getInstance</span>() {<span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == instance) {             instance =<span class="hljs-keyword">new</span> HBaseUtils();         }<span class="hljs-keyword">return</span> instance;     }<span class="hljs-javadoc">/**      * 根据表名获取到HTable实例      *      *<span class="hljs-javadoctag"> @param</span> tableName      *<span class="hljs-javadoctag"> @return</span>      */</span><span class="hljs-keyword">public</span> HTable<span class="hljs-title">getTable</span>(String tableName) {         HTable table =<span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> {             table =<span class="hljs-keyword">new</span> HTable(configuration, tableName);         }<span class="hljs-keyword">catch</span> (IOException e) {             e.printStackTrace();         }<span class="hljs-keyword">return</span> table;     }<span class="hljs-javadoc">/**      * 添加一条记录到表中      *      *<span class="hljs-javadoctag"> @param</span> tableName      *<span class="hljs-javadoctag"> @param</span> rowkey      *<span class="hljs-javadoctag"> @param</span> cf      *<span class="hljs-javadoctag"> @param</span> column      *<span class="hljs-javadoctag"> @param</span> value      */</span><span class="hljs-keyword">public</span><span class="hljs-keyword">void</span><span class="hljs-title">put</span>(String tableName, String rowkey, String cf, String column, String value) {         HTable table = getTable(tableName);          Put put =<span class="hljs-keyword">new</span> Put(Bytes.toBytes(rowkey));         put.add(Bytes.toBytes(cf), Bytes.toBytes(column), Bytes.toBytes(value));<span class="hljs-keyword">try</span> {             table.put(put);         }<span class="hljs-keyword">catch</span> (IOException e) {             e.printStackTrace();         }     }<span class="hljs-keyword">public</span><span class="hljs-keyword">static</span><span class="hljs-keyword">void</span><span class="hljs-title">main</span>(String[] args) {<span class="hljs-comment">//        HTable table = HBaseUtils.getInstance().getTable("course_clickcount");</span><span class="hljs-comment">//        System.out.println(table.getName().getNameAsString());</span>          String tableName =<span class="hljs-string">"course_clickcount"</span>;         String rowkey =<span class="hljs-string">"20180906_1"</span>;         String cf =<span class="hljs-string">"info"</span>;         String column =<span class="hljs-string">"click_count"</span>;         String value =<span class="hljs-string">"2"</span>;          HBaseUtils.getInstance().put(tableName, rowkey, cf, column, value);     } }</code></pre> <p>3）数据库操作</p> <p>CourseClickCountDAO.scala</p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.dao<span class="hljs-keyword">import</span> com.lihaogn.spark.project.utils.HBaseUtils<span class="hljs-keyword">import</span> com.lihaogn.sparkProject.domain.CourseClickCount<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Get<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.util.Bytes<span class="hljs-keyword">import</span> scala.collection.mutable.ListBuffer<span class="hljs-javadoc">/**   * 数据访问层，课程点击数   */</span><span class="hljs-class"><span class="hljs-keyword">object</span><span class="hljs-title">CourseClickCountDAO</span> {<!-- --></span><span class="hljs-keyword">val</span> tableName =<span class="hljs-string">"course_clickcount"</span><span class="hljs-keyword">val</span> cf =<span class="hljs-string">"info"</span><span class="hljs-keyword">val</span> qualifer =<span class="hljs-string">"click_count"</span><span class="hljs-javadoc">/**     * 保存数据到HBase     *     *<span class="hljs-javadoctag">@param</span> list     */</span><span class="hljs-keyword">def</span> save(list: ListBuffer[CourseClickCount]): Unit = {<span class="hljs-keyword">val</span> table = HBaseUtils.getInstance().getTable(tableName)<span class="hljs-keyword">for</span> (ele <- list) {       table.incrementColumnValue(Bytes.toBytes(ele.day_course),         Bytes.toBytes(cf),         Bytes.toBytes(qualifer),         ele.click_count)     }   }<span class="hljs-javadoc">/**     * 根据rowkey查询值     *<span class="hljs-javadoctag">@param</span> day_course     *<span class="hljs-javadoctag">@return</span>     */</span><span class="hljs-keyword">def</span> count(day_course:String):Long= {<span class="hljs-keyword">val</span> table = HBaseUtils.getInstance().getTable(tableName)<span class="hljs-keyword">val</span> get =<span class="hljs-keyword">new</span> Get(Bytes.toBytes(day_course))<span class="hljs-keyword">val</span> value = table.get(get).getValue(cf.getBytes, qualifer.getBytes)<span class="hljs-keyword">if</span> (value ==<span class="hljs-keyword">null</span>) {<span class="hljs-number">0</span>L     }<span class="hljs-keyword">else</span>       Bytes.toLong(value)   }<span class="hljs-keyword">def</span> main(args: Array[String]): Unit = {<span class="hljs-keyword">val</span> list=<span class="hljs-keyword">new</span> ListBuffer[CourseClickCount]     list.append(CourseClickCount(<span class="hljs-string">"20180906_8"</span>,<span class="hljs-number">8</span>))     list.append(CourseClickCount(<span class="hljs-string">"20180906_4"</span>,<span class="hljs-number">3</span>))     list.append(CourseClickCount(<span class="hljs-string">"20180906_2"</span>,<span class="hljs-number">2</span>))      save(list)      println(count(<span class="hljs-string">"20180906_8"</span>)+<span class="hljs-string">":"</span>+count(<span class="hljs-string">"20180906_4"</span>)+<span class="hljs-string">":"</span>+count(<span class="hljs-string">"20180906_2"</span>))   }  }</code></pre> <p>CourseSearchClickCountDAO.scala</p> <pre class="prettyprint"><code class="hljs scala"><span class="hljs-keyword">package</span> com.lihaogn.sparkProject.dao<span class="hljs-keyword">import</span> com.lihaogn.spark.project.utils.HBaseUtils<span class="hljs-keyword">import</span> com.lihaogn.sparkProject.domain.{CourseClickCount, CourseSearchClickCount}<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.client.Get<span class="hljs-keyword">import</span> org.apache.hadoop.hbase.util.Bytes<span class="hljs-keyword">import</span> scala.collection.mutable.ListBuffer<span class="hljs-javadoc">/**   * 数据访问层，从搜索引擎过来的课程点击数   */</span><span class="hljs-class"><span class="hljs-keyword">object</span><span class="hljs-title">CourseSearchClickCountDAO</span> {<!-- --></span><span class="hljs-keyword">val</span> tableName =<span class="hljs-string">"course_search_clickcount"</span><span class="hljs-keyword">val</span> cf =<span class="hljs-string">"info"</span><span class="hljs-keyword">val</span> qualifer =<span class="hljs-string">"click_count"</span><span class="hljs-javadoc">/**     * 保存数据到HBase     *     *<span class="hljs-javadoctag">@param</span> list     */</span><span class="hljs-keyword">def</span> save(list: ListBuffer[CourseSearchClickCount]): Unit = {<span class="hljs-keyword">val</span> table = HBaseUtils.getInstance().getTable(tableName)<span class="hljs-keyword">for</span> (ele <- list) {       table.incrementColumnValue(Bytes.toBytes(ele.day_search_course),         Bytes.toBytes(cf),         Bytes.toBytes(qualifer),         ele.click_count)     }   }<span class="hljs-javadoc">/**     * 根据rowkey查询值     *     *<span class="hljs-javadoctag">@param</span> day_search_course     *<span class="hljs-javadoctag">@return</span>     */</span><span class="hljs-keyword">def</span> count(day_search_course: String): Long = {<span class="hljs-keyword">val</span> table = HBaseUtils.getInstance().getTable(tableName)<span class="hljs-keyword">val</span> get =<span class="hljs-keyword">new</span> Get(Bytes.toBytes(day_search_course))<span class="hljs-keyword">val</span> value = table.get(get).getValue(cf.getBytes, qualifer.getBytes)<span class="hljs-keyword">if</span> (value ==<span class="hljs-keyword">null</span>) {<span class="hljs-number">0</span>L     }<span class="hljs-keyword">else</span>       Bytes.toLong(value)   }<span class="hljs-keyword">def</span> main(args: Array[String]): Unit = {<span class="hljs-keyword">val</span> list =<span class="hljs-keyword">new</span> ListBuffer[CourseSearchClickCount]     list.append(CourseSearchClickCount(<span class="hljs-string">"20180906_www.baidu.com_8"</span>,<span class="hljs-number">8</span>))     list.append(CourseSearchClickCount(<span class="hljs-string">"20180906_www.baidu.com_4"</span>,<span class="hljs-number">3</span>))      save(list)      println(count(<span class="hljs-string">"20180906_www.baidu.com_8"</span>) +<span class="hljs-string">":"</span> + count(<span class="hljs-string">"20180906_www.baidu.com_4"</span>))   }  }</code></pre> <p>4）主类</p> <p>SparkStreamingApp.scala</p> <pre class="prettyprint"><code class="hljs avrasm">package<span class="hljs-keyword">com</span><span class="hljs-preprocessor">.lihaogn</span><span class="hljs-preprocessor">.sparkProject</span><span class="hljs-preprocessor">.main</span>  import<span class="hljs-keyword">com</span><span class="hljs-preprocessor">.lihaogn</span><span class="hljs-preprocessor">.sparkProject</span><span class="hljs-preprocessor">.dao</span>.{CourseClickCountDAO, CourseSearchClickCountDAO} import<span class="hljs-keyword">com</span><span class="hljs-preprocessor">.lihaogn</span><span class="hljs-preprocessor">.sparkProject</span><span class="hljs-preprocessor">.domain</span>.{ClickLog, CourseClickCount, CourseSearchClickCount} import<span class="hljs-keyword">com</span><span class="hljs-preprocessor">.lihaogn</span><span class="hljs-preprocessor">.sparkProject</span><span class="hljs-preprocessor">.utils</span><span class="hljs-preprocessor">.DateUtils</span> import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.SparkConf</span> import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.streaming</span>.{Seconds, StreamingContext} import org<span class="hljs-preprocessor">.apache</span><span class="hljs-preprocessor">.spark</span><span class="hljs-preprocessor">.streaming</span><span class="hljs-preprocessor">.kafka</span><span class="hljs-preprocessor">.KafkaUtils</span>  import scala<span class="hljs-preprocessor">.collection</span><span class="hljs-preprocessor">.mutable</span><span class="hljs-preprocessor">.ListBuffer</span><span class="hljs-comment">/**   * 使用spark streaming分析日志   */</span> object SparkStreamingApp {    def main(args: Array[String]): Unit = {      if (args<span class="hljs-preprocessor">.length</span> !=<span class="hljs-number">4</span>) {       System<span class="hljs-preprocessor">.err</span><span class="hljs-preprocessor">.println</span>(<span class="hljs-string">"usage: KafKaReceiverWC <zkQuorum> <group> <topics> <numThreads>"</span>)     }      val Array(zkQuorum, group, topics, numThreads) = args      val sparkConf = new SparkConf()<span class="hljs-preprocessor">.setAppName</span>(<span class="hljs-string">"SparkStreamingApp"</span>)<span class="hljs-preprocessor">.setMaster</span>(<span class="hljs-string">"local[5]"</span>)      val ssc = new StreamingContext(sparkConf, Seconds(<span class="hljs-number">5</span>))      val topicMap = topics<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">","</span>)<span class="hljs-preprocessor">.map</span>((_, numThreads<span class="hljs-preprocessor">.toInt</span>))<span class="hljs-preprocessor">.toMap</span>      // spark streaming 对接 kafka     val messages = KafkaUtils<span class="hljs-preprocessor">.createStream</span>(ssc, zkQuorum, group, topicMap)      // 步骤一：测试数据接收     messages<span class="hljs-preprocessor">.map</span>(_._2)<span class="hljs-preprocessor">.count</span>()<span class="hljs-preprocessor">.print</span>()      // 步骤二：数据清洗     val logs = messages<span class="hljs-preprocessor">.map</span>(_._2)     val cleanData = logs<span class="hljs-preprocessor">.map</span>(line => {       val infos = line<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">"\t"</span>)        val url = infos(<span class="hljs-number">2</span>)<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">" "</span>)(<span class="hljs-number">1</span>)       var courseId =<span class="hljs-number">0</span>        // 获取课程标号       if (url<span class="hljs-preprocessor">.startsWith</span>(<span class="hljs-string">"/class"</span>)) {         val courseHtml = url<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">"/"</span>)(<span class="hljs-number">2</span>)         courseId = courseHtml<span class="hljs-preprocessor">.substring</span>(<span class="hljs-number">0</span>, courseHtml<span class="hljs-preprocessor">.lastIndexOf</span>(<span class="hljs-string">"."</span>))<span class="hljs-preprocessor">.toInt</span>       }        ClickLog(infos(<span class="hljs-number">0</span>), DateUtils<span class="hljs-preprocessor">.parseToMinute</span>(infos(<span class="hljs-number">1</span>)), courseId, infos(<span class="hljs-number">3</span>)<span class="hljs-preprocessor">.toInt</span>, infos(<span class="hljs-number">4</span>))     })<span class="hljs-preprocessor">.filter</span>(clicklog => clicklog<span class="hljs-preprocessor">.courseId</span> !=<span class="hljs-number">0</span>)      cleanData<span class="hljs-preprocessor">.print</span>()      // 步骤三：统计今天到现在为止的课程访问量     cleanData<span class="hljs-preprocessor">.map</span>(<span class="hljs-built_in">x</span>=>{       (<span class="hljs-built_in">x</span><span class="hljs-preprocessor">.time</span><span class="hljs-preprocessor">.substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)+<span class="hljs-string">"_"</span>+<span class="hljs-built_in">x</span><span class="hljs-preprocessor">.courseId</span>,<span class="hljs-number">1</span>)     })<span class="hljs-preprocessor">.reduceByKey</span>(_+_)<span class="hljs-preprocessor">.foreachRDD</span>(rdd=>{       rdd<span class="hljs-preprocessor">.foreachPartition</span>(partitionRecords=>{         val list=new ListBuffer[CourseClickCount]          partitionRecords<span class="hljs-preprocessor">.foreach</span>(pair=>{           list<span class="hljs-preprocessor">.append</span>(CourseClickCount(pair._1,pair._2))         })         // 写入数据库         CourseClickCountDAO<span class="hljs-preprocessor">.save</span>(list)        })     })      // 步骤四：统计从搜索引擎过来的从今天开始到现在的课程的访问量     cleanData<span class="hljs-preprocessor">.map</span>(<span class="hljs-built_in">x</span>=>{       val referer=<span class="hljs-built_in">x</span><span class="hljs-preprocessor">.referer</span><span class="hljs-preprocessor">.replaceAll</span>(<span class="hljs-string">"//"</span>,<span class="hljs-string">"/"</span>)       val splits=referer<span class="hljs-preprocessor">.split</span>(<span class="hljs-string">"/"</span>)       var host=<span class="hljs-string">""</span>       if(splits<span class="hljs-preprocessor">.length</span>><span class="hljs-number">2</span>) {         host=splits(<span class="hljs-number">1</span>)       }        (host,<span class="hljs-built_in">x</span><span class="hljs-preprocessor">.courseId</span>,<span class="hljs-built_in">x</span><span class="hljs-preprocessor">.time</span>)     })<span class="hljs-preprocessor">.filter</span>(_._1!=<span class="hljs-string">""</span>)<span class="hljs-preprocessor">.map</span>(<span class="hljs-built_in">x</span>=>{       (<span class="hljs-built_in">x</span>._3<span class="hljs-preprocessor">.substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)+<span class="hljs-string">"_"</span>+<span class="hljs-built_in">x</span>._1+<span class="hljs-string">"_"</span>+<span class="hljs-built_in">x</span>._2,<span class="hljs-number">1</span>)     })<span class="hljs-preprocessor">.reduceByKey</span>(_+_)<span class="hljs-preprocessor">.foreachRDD</span>(rdd=>{       rdd<span class="hljs-preprocessor">.foreachPartition</span>(partitionRecords=>{         val list =new ListBuffer[CourseSearchClickCount]          partitionRecords<span class="hljs-preprocessor">.foreach</span>(pair=>{           list<span class="hljs-preprocessor">.append</span>(CourseSearchClickCount(pair._1,pair._2))         })         // 写入数据库         CourseSearchClickCountDAO<span class="hljs-preprocessor">.save</span>(list)        })     })      ssc<span class="hljs-preprocessor">.start</span>()      ssc<span class="hljs-preprocessor">.awaitTermination</span>()   } }</code></pre> <h3 id="5-运行测试">5 运行测试</h3> <p>1）启动 zookeeper</p> <pre class="prettyprint"><code class="hljs sql">zkServer.sh<span class="hljs-operator"><span class="hljs-keyword">start</span></span></code></pre> <p>2）启动 HDFS</p> <pre class="prettyprint"><code class="hljs sql"><span class="hljs-operator"><span class="hljs-keyword">start</span>-dfs.sh<span class="hljs-keyword">start</span>-yarn.sh</span></code></pre> <p>3）启动 kafka</p> <pre class="prettyprint"><code class="hljs lasso">kafka<span class="hljs-attribute">-server</span><span class="hljs-attribute">-start</span><span class="hljs-built_in">.</span>sh<span class="hljs-attribute">-daemon</span><span class="hljs-variable">$KAFKA_HOME</span>/config/server<span class="hljs-built_in">.</span>properties $</code></pre> <p>4）启动 flume</p> <pre class="prettyprint"><code class="hljs haml">flume-ng agent \ -<span class="ruby">-conf<span class="hljs-variable">$FLUME_HOME</span>/conf \</span>-<span class="ruby">-conf-file<span class="hljs-variable">$FLUME_HOME</span>/conf/streaming_project2.conf \</span>-<span class="ruby">-name exec-memory-kafka \</span>-<span class="ruby"><span class="hljs-constant">Dflume</span>.root.logger=<span class="hljs-constant">INFO</span>,console</span></code></pre> <p>5）运行日志生成器</p> <pre class="prettyprint"><code class="hljs avrasm">python3 generate_log<span class="hljs-preprocessor">.py</span></code></pre> <p>6）运行spark程序</p> <pre class="prettyprint"><code class="hljs haml">spark-submit \ -<span class="ruby">-<span class="hljs-class"><span class="hljs-keyword">class</span><span class="hljs-title">com</span>.<span class="hljs-title">lihaogn</span>.<span class="hljs-title">sparkProject</span>.<span class="hljs-title">main</span>.<span class="hljs-title">SparkStreamingApp</span> \</span></span>-<span class="ruby">-master local[<span class="hljs-number">5</span>] \</span>-<span class="ruby">-name<span class="hljs-constant">SparkStreamingApp</span> \</span>-<span class="ruby">-jars /<span class="hljs-constant">Users</span>/<span class="hljs-constant">Mac</span>/software/spark-streaming-kafka-<span class="hljs-number">0</span>-<span class="hljs-number">8</span>-assembly_2.<span class="hljs-number">11</span>-<span class="hljs-number">2.2</span>.<span class="hljs-number">0</span>.jar,<span class="hljs-variable">$(</span>echo /<span class="hljs-constant">Users</span>/<span class="hljs-constant">Mac</span>/app/hbase-<span class="hljs-number">1.2</span>.<span class="hljs-number">0</span>-cdh5.<span class="hljs-number">7.0</span>/lib/*.jar | tr<span class="hljs-string">' '</span><span class="hljs-string">','</span>) \</span><span class="hljs-comment">/Users/Mac/my-lib/Kafka-train-1.0.jar \</span> localhost:2181 test test_topic 1</code></pre> <p>7）结果<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220608/d4b82012e5eaff0fbe270c746f93a124.jpg" alt="Spark Streaming 实战 日志分析数据清洗+统计访问量"></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2283.htm">Java实现带缓冲的输入输出流_java</a></p>
                                        <p>下一个：<a href="/html/category/article-2285.htm">Neo4j数据和Cypher查询语法笔记 &#8211; Milton _在线工具</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7413.htm" title="延吉宠物店电话 延吉宠物店电话号码">延吉宠物店电话 延吉宠物店电话号码</a></li>
                        <li class="py-2"><a href="/html/category/article-7412.htm" title="狗狗有寄生虫的10个迹象（狗寄生虫怎么清除）">狗狗有寄生虫的10个迹象（狗寄生虫怎么清除）</a></li>
                        <li class="py-2"><a href="/html/category/article-7458.htm" title="开宠物店靠什么赚钱（开宠物店挣钱么）">开宠物店靠什么赚钱（开宠物店挣钱么）</a></li>
                        <li class="py-2"><a href="/html/category/article-6815.htm" title="靳东个人资料简介简历（山楂树之恋演员）速看，">靳东个人资料简介简历（山楂树之恋演员）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-7918.htm" title="车载功放机什么牌子好(车载功放性价比高)">车载功放机什么牌子好(车载功放性价比高)</a></li>
                        <li class="py-2"><a href="/html/category/article-7137.htm" title="动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）">动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-7459.htm" title="被猫挠了一直流血（被猫挠伤出血一点点）">被猫挠了一直流血（被猫挠伤出血一点点）</a></li>
                        <li class="py-2"><a href="/html/category/article-7550.htm" title="大兴24小时宠物医院（大兴宠物医院电话号码）">大兴24小时宠物医院（大兴宠物医院电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-7091.htm" title="动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）">动物医院临床技术的英语翻译（动物医院临床技术的英语翻译是什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-6952.htm" title="猫掉毛最好的解决办法（猫掉毛最好的解决办法是什么）">猫掉毛最好的解决办法（猫掉毛最好的解决办法是什么）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>