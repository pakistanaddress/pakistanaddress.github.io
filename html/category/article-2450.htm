<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2450.htm" />
<title>Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<h3 id="回顾总结">回顾总结</h3> <p>到目前为止，<code>Spring</code>源码中<code>AbstractApplicationContext#refresh</code>方法的已经解读到第11个方法<code>finishBeanFactoryInitialization</code>,前10个方法介绍了：</p> <ul> <li> <code>BeanFactory</code>的准备，创建，刷新，个性化<code>BeanFactory</code>的扩展点，自定义属性解析；</li> <li>环境信息<code>Environment</code>的加载（包括环境变量、系统变量等）；</li> <li> <code>BeanDefinition</code>的加载，解析，自定义<code>xml</code>的方式；</li> <li> <code>BeanFactoryPostProcessor</code>的注册与执行流程，<code>BeanDefinitionRegistryPostProcessor</code>的解析，<code>ConfigurationClassPostProcessor</code>对<code>Spring</code>注解的解析过程（<code>@Component、@PropertySources、@PropertySource、@ComponentScans、@ComponentScan、@Import</code>等注解的解析），<code>Spring Boot</code> 是如何通过<code>@Configuration+@Import + ImportSelector</code>进行自动装配的等；</li> <li> <code>BeanPostProcessor</code>的注册流程；</li> <li>国际化，<code>Spring</code>事件驱动的加载执行过程；</li> </ul> <h3 id="finishbeanfactoryinitialization-解析过程">finishBeanFactoryInitialization 解析过程</h3> <p>接下来开始解析<code>Spring</code>对<code>Bean</code>的创建过程，上源码：</p> <pre><code class="language-java">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {   // Initialize conversion service for this context.   if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&       beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {     // 设置转换服务，转换服务用来对属性值进行解析的     beanFactory.setConversionService(       beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));   }    // Register a default embedded value resolver if no BeanFactoryPostProcessor   // (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:   // at this point, primarily for resolution in annotation attribute values.   // 如果之前没有注册过任何 BeanFactoryPostProcessor（例如 PropertySourcesPlaceholderConfigurer bean），   // 则注册一个默认的嵌入值解析器：此时，主要用于解析注释属性值。   if (!beanFactory.hasEmbeddedValueResolver()) {     beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));   }    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);   for (String weaverAwareName : weaverAwareNames) {     getBean(weaverAwareName);   }    // Stop using the temporary ClassLoader for type matching.   beanFactory.setTempClassLoader(null);    // Allow for caching all bean definition metadata, not expecting further changes.   // 允许缓存所有 bean 定义元数据，而不是期望进一步的更改   beanFactory.freezeConfiguration();    // Instantiate all remaining (non-lazy-init) singletons.   // 实例化所有剩余的（非惰性初始化）单例   beanFactory.preInstantiateSingletons(); } </code></pre> <ul> <li>判断是否存在转换服务，有就设置</li> <li>判断是否有内置的值解析器，没有就创建一个处理占位符的解析器</li> <li>实例化LoadTimeWeaverAware，进行早期的Bean的创建</li> <li>停止使用临时的类加载器</li> <li>冻结BeanDefinition的元数据信息，防止被修改</li> <li>开始实例化所有的单例bean对象</li> </ul> <p>除了<code>beanFactory.preInstantiateSingletons()</code> 方法，其他都是<code>Bean</code>创建的准备，接下来一个一个分析，首先是转换服务的设置。</p> <h3 id="转换服务conversionservice的初始化">转换服务ConversionService的初始化</h3> <p>方法一开始设置了一个转换服务，这个转换服务在<code>Spring</code>中还是非常的重要的，比如我们<code>xml</code>中配置一个<code>String</code> 类型的属性值，但是在<code>Bean</code>的定义中是一个<code>Integer</code>类型的，这时<code>Spring</code>就会自动帮我们转出来，他是怎么做的呢？</p> <p>在<code>Spring</code>中有几个比较重要的接口:</p> <ul> <li> <code>Converer</code> 用于将对象<code>S</code>转换为对象<code>T</code> </li> <li> <code>ConverterFactory</code> 一个转换工厂，能够将对象<code>S</code>转成一类对象<code>R</code>的子集<code>T</code>，比如可以将字符串<code>S</code>转换为<code>T</code>（<code>Integer、Long</code>等）<code>Number</code>类型<code>R</code>的子集</li> <li> <code>GenericConverter</code>支持多种类型之间互相转换。</li> </ul> <p><code>Spring</code>转换器接口<code>ConversionService</code> 的默认实现是<code>DefaultConversionService</code>,这个默认的转换器实现中，内置了很多的转换器，比如：</p> <pre><code class="language-java">public static void addDefaultConverters(ConverterRegistry converterRegistry) {   addScalarConverters(converterRegistry);   addCollectionConverters(converterRegistry);    converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));   converterRegistry.addConverter(new StringToTimeZoneConverter());   converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());   converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());    converterRegistry.addConverter(new ObjectToObjectConverter());   converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));   converterRegistry.addConverter(new FallbackObjectToStringConverter());   converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry)); }  public static void addCollectionConverters(ConverterRegistry converterRegistry) {   ConversionService conversionService = (ConversionService) converterRegistry;   // 数组转集合   converterRegistry.addConverter(new ArrayToCollectionConverter(conversionService));   // 集合转数组   converterRegistry.addConverter(new CollectionToArrayConverter(conversionService));    converterRegistry.addConverter(new ArrayToArrayConverter(conversionService));   converterRegistry.addConverter(new CollectionToCollectionConverter(conversionService));   converterRegistry.addConverter(new MapToMapConverter(conversionService));   // 数组转字符串   converterRegistry.addConverter(new ArrayToStringConverter(conversionService));   converterRegistry.addConverter(new StringToArrayConverter(conversionService));    converterRegistry.addConverter(new ArrayToObjectConverter(conversionService));   converterRegistry.addConverter(new ObjectToArrayConverter(conversionService));    converterRegistry.addConverter(new CollectionToStringConverter(conversionService));   converterRegistry.addConverter(new StringToCollectionConverter(conversionService));    converterRegistry.addConverter(new CollectionToObjectConverter(conversionService));   converterRegistry.addConverter(new ObjectToCollectionConverter(conversionService));    converterRegistry.addConverter(new StreamConverter(conversionService)); }  private static void addScalarConverters(ConverterRegistry converterRegistry) {   converterRegistry.addConverterFactory(new NumberToNumberConverterFactory());    converterRegistry.addConverterFactory(new StringToNumberConverterFactory());   converterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCharacterConverter());   converterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new NumberToCharacterConverter());   converterRegistry.addConverterFactory(new CharacterToNumberFactory());    converterRegistry.addConverter(new StringToBooleanConverter());   converterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverterFactory(new StringToEnumConverterFactory());   converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry));    converterRegistry.addConverterFactory(new IntegerToEnumConverterFactory());   converterRegistry.addConverter(new EnumToIntegerConverter((ConversionService) converterRegistry));    converterRegistry.addConverter(new StringToLocaleConverter());   converterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCharsetConverter());   converterRegistry.addConverter(Charset.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToCurrencyConverter());   converterRegistry.addConverter(Currency.class, String.class, new ObjectToStringConverter());    converterRegistry.addConverter(new StringToPropertiesConverter());   converterRegistry.addConverter(new PropertiesToStringConverter());    converterRegistry.addConverter(new StringToUUIDConverter());   converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter()); } </code></pre> <p>可以说是非常的丰富的，基本上常见都是Spring提供了，非常贴心。</p> <p>那么怎么使用呢？</p> <p>不懂当然是上官网：https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#core-convert ，这里可以看到我们只需要将<code>ConversionServiceFactoryBean</code> 配置到Spring容器中就可以了，<code>Spring</code>内置的转换器就可以工作了，非常方便。</p> <p><code>ConversionServiceFactoryBean</code>实现了<code>FactoryBean</code>接口和<code>InitializingBean</code> 接口，而<code>InitializingBean#afterPropertiesSet</code>是初始化<code>Bean</code>过程中需要执行的。<code>ConversionServiceFactoryBean</code>源码中：</p> <pre><code class="language-java">@Override public void afterPropertiesSet() {   this.conversionService = createConversionService();   ConversionServiceFactory.registerConverters(this.converters, this.conversionService); }  protected GenericConversionService createConversionService() {   return new DefaultConversionService(); }  // 构造函数 public DefaultConversionService() {   // 添加默认的转换器   addDefaultConverters(this); } </code></pre> <p>可以看到这个<code>ConversionServiceFactroyBean</code>就是用来初始化转换器的，并且这个类还提供了扩展，可以自定义转换器加入到转换器集合中。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/142a03309c504ae1f5194c482d30cc20.jpg" alt="Spring 源码（9）Spring Bean的创建过程的前期准备_在线工具"></p> <h3 id="自定义转换器">自定义转换器</h3> <p>自定义String转Integer类型的转换器：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ public class StringToIntegerConverter implements Converter<String,Integer> , ConditionalConverter { 	@Override 	public Integer convert(String source) { 		return NumberUtils.parseNumber(source,Integer.class); 	}  	@Override 	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) { 		System.out.println(sourceType.getType()); 		System.out.println(targetType.getType()); 		return true; 	} } </code></pre> <p>逻辑非常简单，直接调用<code>Spring</code>提供的工具类进行转换。</p> <p>配置xml：</p> <pre><code class="language-xml"><?xml version="1.0" encoding="UTF-8"?> <beans xmlns="http://www.springframework.org/schema/beans" 	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	   xmlns:context="http://www.springframework.org/schema/context" 	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">  	<context:component-scan base-package="com.redwinter.selfconverter"/> 	<!--配置转化器--> 	<bean class="org.springframework.context.support.ConversionServiceFactoryBean"> 		<property name="converters"> 			<set> 				<bean class="com.redwinter.selfconverter.StringToIntegerConverter"/> 			</set> 		</property> 	</bean>  </beans> </code></pre> <p>创建转换器客户端：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ @Service public class MyConverter {  	private final ConversionService conversionService;  	public MyConverter(ConversionService conversionService) { 		this.conversionService = conversionService; 	}  	public void test(String source){ 		System.out.println(conversionService.convert(source, Integer.class)); 	} } </code></pre> <p>创建测试：</p> <pre><code class="language-java">/**  * @author redwinter  * @since 1.0  **/ public class FactoryBeanTest {  	@Test 	public void test(){ 		MyClassPathXmlApplicationContext context = new MyClassPathXmlApplicationContext("spring-factory.xml"); 		MyConverter myConverter = context.getBean(MyConverter.class); 		myConverter.test("12345"); 	} } </code></pre> <p>输出：</p> <pre><code class="language-tex">class java.lang.String class java.lang.Integer 12345 </code></pre> <p>分析完转换服务，接下来分析 值解析器的添加。</p> <h3 id="默认的值解析器">默认的值解析器</h3> <pre><code class="language-java">// 省略代码..... // Register a default embedded value resolver if no BeanFactoryPostProcessor // (such as a PropertySourcesPlaceholderConfigurer bean) registered any before: // at this point, primarily for resolution in annotation attribute values. // 如果之前没有注册过任何 BeanFactoryPostProcessor（例如 PropertySourcesPlaceholderConfigurer bean）， // 则注册一个默认的嵌入值解析器：此时，主要用于解析注释属性值。 if (!beanFactory.hasEmbeddedValueResolver()) {   beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal)); } // 省略代码.....   </code></pre> <p>首先判断了容器中是否存在嵌入的值解析器，如果没有就添加一个进去，这里添加进去的是<code>StringValueResolver</code>，点击<code>resolvePlaceHolders</code>方法进去，最终会在<code>AbstractPropertyResolver#resolvePlaceholders</code>中创建一个<code>PropertyPlaceholderHelper</code>类</p> <pre><code class="language-java">private PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {   // 前缀为 ${ ，后缀为 }，值的分隔符为 : ,比如 ${username:zhansan} username没有的话，后面的为默认的值   return new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,                                        this.valueSeparator, ignoreUnresolvablePlaceholders); } </code></pre> <p>如果已经注册过一个<code>BFPP</code>的占位符解析器的话，就不需要在注册了，<code>BFPP</code>的占位符解析器就是<code>PropertySourcesPlaceholderConfigurer</code> ，专门用于解析占位符的，比如在<code>xml</code>中或者<code>yaml</code>中，配置类似于<code>${jdbc.username}</code> 这种格式的，就会被解析器解析。<code>PropertySourcesPlaceholderConfigurer</code>  这个解析器实现了<code>BeanFactoryPostProcessor</code>接口，能够对<code>BeanDefinition</code>进行处理，当然也可以对属性值进行处理。</p> <p>分析完值解析器，继续往下分析。</p> <h3 id="bean创建前的其他准备">Bean创建前的其他准备</h3> <pre><code class="language-java">// 省略代码..... // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early. // 在prepareBeanFactory 准备BeanFactory时设置进去的，如果存在，则开始早期Bean的创建 String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false); for (String weaverAwareName : weaverAwareNames) {   getBean(weaverAwareName); }  // Stop using the temporary ClassLoader for type matching. // 停止使用临时的类加载器，这里也是在准备BeanFactory时设置进去的 beanFactory.setTempClassLoader(null);  // Allow for caching all bean definition metadata, not expecting further changes. // 允许缓存所有 bean 定义元数据，而不是期望进一步的更改 beanFactory.freezeConfiguration(); // 省略代码..... </code></pre> <p>这里从容器中获取了<code>AOP</code>的织入，如果有的话就开始进行早期的<code>Bean</code>的创建；然后停止了临时的类加载器；然后就是冻结<code>BeanDefinition</code>的元数据信息。</p> <pre><code class="language-java">public void freezeConfiguration() {   this.configurationFrozen = true;   this.frozenBeanDefinitionNames = StringUtils.toStringArray(this.beanDefinitionNames); } </code></pre> <p>点击进来，其实就是设置了标识，防止后期对<code>BeanDefinition</code>的修改。</p> <p>这前面的几个判断和方法实际上都是<code>Bean</code>创建的准备工作，接下来开始分析<code>preInstantiateSingletons</code> 预实例化所有的单例<code>Bean</code>。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2449.htm">数据库事务四大特性、四大隔离级别以及解决的三种问题</a></p>
                                        <p>下一个：<a href="/html/category/article-2451.htm">python实现模拟身份验证服务器综合系统设计</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6769.htm" title="宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内">宠物疫苗可以带上飞机吗 宠物疫苗可以带上飞机吗国内</a></li>
                        <li class="py-2"><a href="/html/category/article-6952.htm" title="猫掉毛最好的解决办法（猫掉毛最好的解决办法是什么）">猫掉毛最好的解决办法（猫掉毛最好的解决办法是什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-7367.htm" title="自动挡不踩油门车速会降低吗（油门踩下去提不起车速）">自动挡不踩油门车速会降低吗（油门踩下去提不起车速）</a></li>
                        <li class="py-2"><a href="/html/category/article-7366.htm" title="北京宠物店投资多少钱啊（在北京开一家宠物店能赚钱吗）">北京宠物店投资多少钱啊（在北京开一家宠物店能赚钱吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6584.htm" title="动物疫苗价格排行前十的有哪些品种呢 动物疫苗价格排行前十的有哪些品种呢图片">动物疫苗价格排行前十的有哪些品种呢 动物疫苗价格排行前十的有哪些品种呢图片</a></li>
                        <li class="py-2"><a href="/html/category/article-6768.htm" title="动物疫苗价格查询官网入口网址是什么（动物疫苗的正确使用方法）">动物疫苗价格查询官网入口网址是什么（动物疫苗的正确使用方法）</a></li>
                        <li class="py-2"><a href="/html/category/article-7321.htm" title="哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）">哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）</a></li>
                        <li class="py-2"><a href="/html/category/article-7642.htm" title="动物疫苗生产企业排行（动物疫苗生产企业排行榜最新）">动物疫苗生产企业排行（动物疫苗生产企业排行榜最新）</a></li>
                        <li class="py-2"><a href="/html/category/article-6999.htm" title="宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）">宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）</a></li>
                        <li class="py-2"><a href="/html/category/article-7412.htm" title="狗狗有寄生虫的10个迹象（狗寄生虫怎么清除）">狗狗有寄生虫的10个迹象（狗寄生虫怎么清除）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>