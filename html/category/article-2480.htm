<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2480.htm" />
<title>Docker常见问题详解 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Docker常见问题详解</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li>一、Docker新增端口映射</li> <li> <ul> <li>1、简介</li> <li>2、修改容器两种方式</li> <li> <ul> <li>2.1 新建容器</li> <li>2.2 修改容器配置文件</li> </ul> </li> </ul> </li> <li>二、Linux Dockerfile构建后不能正常启动</li> <li> <ul> <li>1、问题描述</li> <li>2、原因介绍</li> <li>3、解决法法</li> </ul> </li> <li>三、Docker容器设置时区</li> <li> <ul> <li>1、问题描述</li> <li>2、配置过程</li> </ul> </li> </ul> </div> <h1>一、Docker新增端口映射</h1> <h2>1、简介</h2> <p>在<code>docker run</code>创建并运行容器的时候，可以通过<code>-p</code>指定端口映射规则。但是容器一旦生成，就没有一个命令可以直接修改。一般情况下，有两种方式进行映射端口新增或者修改，这里环境是Ubuntu20.04</p> <ul> <li>新建容器</li> <li>修改容器配置文件</li> </ul> <h2>2、修改容器两种方式</h2> <h3>2.1 新建容器</h3> <p>这种方式最简单，将原有的容器删掉，重新新建一个，新建的时候确定好端口映射；</p> <p><strong>优缺点</strong></p> <ul> <li>优点是简单快捷，在测试环境使用较多</li> <li>缺点是每次都要重新配置，操作会比较麻烦</li> </ul> <h3>2.2 修改容器配置文件</h3> <ul> <li><strong>查看容器</strong></li> </ul> <p>其中的hashofthecontainer是docker镜像的hash值，<code>CONTAINER ID</code>就是取了前几位数的值</p> <pre><code class="prism language-bash"><span class="token comment">#查看docker正在运行的容器</span> docker<span class="token function">ps</span><span class="token comment">#查看某个容器详细信息</span> docker inspect containername</code></pre> <ul> <li><strong>关闭docker服务</strong></li> </ul> <p>若不关闭，可能会导致修改完的配置信息，重启后又变回原来的配置文件</p> <pre><code class="prism language-bash">systemctl stop docker.service</code></pre> <p>这里可能会报警报，原因是除了docker.service单元文件，还有一个docker.socket单元文件…docker.socket这是用于套接字激活。 该警告意味着：如果你试图连接到docker socket，而docker服务没有运行，系统将自动启动docker。一般不做理会</p> <blockquote> <p>Warning: Stopping docker.service, but it can still be activated by: docker.socket</p> </blockquote> <ul> <li><strong>修改文件</strong></li> </ul> <p>容器的配置文件路径<code>/var/lib/docker/containers/[hash_of_the_container]/hostconfig.json</code>，打开配置文件，找到<strong>PortBindings</strong>值，在这个json集合里边追加新端口。当然这两个配置文件还有很多其他信息可以修改，原理相同</p> <pre><code class="prism language-json"><span class="token string">"PortBindings"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"8081/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8081"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"8085/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8085"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre> <p>假如在<code>config.v2.json</code>文件里也记录了端口，也需要同时修改，修改值：<code>Config->ExposedPorts</code>和<code>NetworkSettings->Ports</code></p> <pre><code class="prism language-json"><span class="token string">"Config"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"Hostname"</span><span class="token operator">:</span><span class="token string">"acf6f980b9d3"</span><span class="token punctuation">,</span><span class="token string">"Domainname"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"User"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"AttachStdin"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"AttachStdout"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"AttachStderr"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"ExposedPorts"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"8081/tcp"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"8085/tcp"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"8088/tcp"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"NetworkSettings"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"Ports"</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token string">"8081/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8081"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8081"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"8085/tcp"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8085"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token string">"HostIp"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span><span class="token string">"HostPort"</span><span class="token operator">:</span><span class="token string">"8085"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <ul> <li>重启docker服务和容器</li> </ul> <pre><code class="prism language-bash">systemctl restart docker.service</code></pre> <p><strong>优缺点</strong></p> <ul> <li>优点是没有副作用，操作简单</li> <li>缺点是需要重启整个docker服务，如果在同一个宿主机上运行着多个容器服务的话，就会影响其他容器服务</li> </ul> <h1>二、Linux Dockerfile构建后不能正常启动</h1> <h2>1、问题描述</h2> <p>下面是我自己构建的一个基于Centos8的JDK8docker环境</p> <pre><code class="prism language-bash">FROM centos:8 MAINTAINER shawn<span class="token comment">#把java与tomcat添加到容器中，会自动解压</span> ADD jdk-8u161-linux-x64.tar.gz /usr/local/<span class="token comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span> WORKDIR /<span class="token comment">#安装vim编辑器</span> RUN yum -y<span class="token function">install</span><span class="token function">vim</span><span class="token comment">#配置java与tomcat环境变量</span> ENV JAVA_HOME /usr/local/jdk1.8.0_161 ENV CLASSPATH<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar ENV<span class="token environment constant">PATH</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin  RUN<span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN<span class="token builtin class-name">echo</span><span class="token string">'Asia/Shanghai'</span><span class="token operator">></span>/etc/timezone EXPOSE<span class="token number">8081</span><span class="token number">8088</span> CMD ehco<span class="token string">"构建成功"</span> ENTRYPOINT /bin/bash</code></pre> <p>将所需<code>jdk-8u161-linux-x64.tar.gz</code>和<code>Dockerfile</code>文件上传到linux目录，进行构建<code>docker -t lamp:1.0 .</code>，构建完成后，运行容器<code>docker run -d -p 8081:8081 -p 8088:8088 -v /home/shawn/ZHD/dockerdata:/data --name lamp lamp:1.0</code> ，然后发现容器不能正常启动，centos 启动一个容器添加了-d 参数，但是docker ps 或者docker ps -a查看却已经退出了</p> <h2>2、原因介绍</h2> <ul> <li>docker容器运行必须有一个前台进程， 如果没有前台进程执行，容器认为空闲，就会自行退出</li> <li>容器运行的命令如果不是那些一直挂起的命令（ 运行top，tail、循环、tomcat等），就是会自动退出</li> <li>这个是 docker 的机制问题</li> </ul> <h2>3、解决法法</h2> <pre><code class="prism language-bash"><span class="token comment">#为docker run添加-it命令</span> docker run -itd -p<span class="token number">8081</span>:8081 -p<span class="token number">8088</span>:8088 -v /home/shawn/dockerdata:/data --name lamp lamp:1.0</code></pre> <h1>三、Docker容器设置时区</h1> <h2>1、问题描述</h2> <p>Docker Hub 中的官方镜像，一般都默认设置为 UTC 时间。而我们位于东八区，在启动容器或构建自己的镜像时，往往需要对时区进行设置</p> <h2>2、配置过程</h2> <p>这里我的docker环境是Ubuntu，有两种方式进行更改</p> <pre><code class="prism language-bash"><span class="token comment">#进入运行的容器</span> docker<span class="token builtin class-name">exec</span> -it lamp /bin/bash<span class="token comment">#查看当前日期</span><span class="token function">date</span><span class="token comment">#显示结果</span> Tue Jan<span class="token number">11</span> 08:42:26 CST<span class="token number">2022</span></code></pre> <p><strong>第一种</strong>方式在宿主机运行，完成后重启docker容器</p> <ul> <li>将本地的localtime文件复制到容器中</li> </ul> <pre><code class="prism language-bash">docker<span class="token function">cp</span> /etc/localtime<span class="token punctuation">{<!-- --></span>容器id<span class="token punctuation">}</span>:/etc/localtime</code></pre> <ul> <li>将本地的<code>/usr/share/zoneinfo/Asia/Shanghai</code>文件复制到容器中</li> </ul> <pre><code class="prism language-bash">docker<span class="token function">cp</span>  /usr/share/zoneinfo/Asia/Shanghai<span class="token punctuation">{<!-- --></span>容器id<span class="token punctuation">}</span>:/etc/localtime</code></pre> <p><strong>第二种</strong>进入容器运行，无需重启容器，若容器内部文件不存在，则还需要使用第一种</p> <ul> <li>链接宿主机localtime</li> </ul> <pre><code class="prism language-bash"><span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre> <p><strong>第三种</strong>在构建dockerfile的时候运行命令</p> <hr/> <p>参考</p> <p>https://blog.csdn.net/weixin_43885975/article/details/117809901</p> <p>https://blog.csdn.net/jameskaron/article/details/105540549</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2479.htm">pythonmysql查询转list_python 解决mysql where in 对列表(list,,array)问题</a></p>
                                        <p>下一个：<a href="/html/category/article-2481.htm">检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8011.htm" title="中国的四大佛教名山是哪四大名山(中国佛教四大名山一般指的是)">中国的四大佛教名山是哪四大名山(中国佛教四大名山一般指的是)</a></li>
                        <li class="py-2"><a href="/html/category/article-8379.htm" title="动物医院实践心得500字作文怎么写的（动物医院实践个人总结）">动物医院实践心得500字作文怎么写的（动物医院实践个人总结）</a></li>
                        <li class="py-2"><a href="/html/category/article-7137.htm" title="动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）">动物疫苗的正确使用方法图片（动物疫苗接种方法有哪些）</a></li>
                        <li class="py-2"><a href="/html/category/article-8103.htm" title="宠物粮批发代理（宠物粮批发网）">宠物粮批发代理（宠物粮批发网）</a></li>
                        <li class="py-2"><a href="/html/category/article-7873.htm" title="广州宠物领养中心在哪 广州宠物领养中心在哪里">广州宠物领养中心在哪 广州宠物领养中心在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-7780.htm" title="宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）">宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）</a></li>
                        <li class="py-2"><a href="/html/category/article-7965.htm" title="动物疫苗打几次最好呢（动物疫苗打一次管多长时间）">动物疫苗打几次最好呢（动物疫苗打一次管多长时间）</a></li>
                        <li class="py-2"><a href="/html/category/article-7183.htm" title="2020年开宠物店怎么样（2020年开宠物店怎么样了）">2020年开宠物店怎么样（2020年开宠物店怎么样了）</a></li>
                        <li class="py-2"><a href="/html/category/article-8102.htm" title="冰糖雪梨怎样做治咳嗽(冰糖雪梨怎么做治咳嗽的)">冰糖雪梨怎样做治咳嗽(冰糖雪梨怎么做治咳嗽的)</a></li>
                        <li class="py-2"><a href="/html/category/article-7550.htm" title="大兴24小时宠物医院（大兴宠物医院电话号码）">大兴24小时宠物医院（大兴宠物医院电话号码）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>