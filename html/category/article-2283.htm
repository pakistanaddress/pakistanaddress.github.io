<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2283.htm" />
<title>Java实现带缓冲的输入输出流_java - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Java实现带缓冲的输入输出流_java</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<p>缓冲是 I/O 的一种性能优化。缓冲流为 I/O 流增加了内存缓冲区。</p> <h2>BufferedInputStream类 与 BufferedOutputStream类</h2> <p>BufferedInputStream类 可以对所有InputStream的子类进行缓冲区的包装，以达到性能的优化。</p> <p>BufferedOutputStream类 中的 flush()方法 被用来把缓冲区的字节写入到文件中，并清空缓存。</p> <h3>BufferedInputStream类的构造方法：</h3> <table> <tbody> <tr> <th>构造方法</th> <th>介绍</th> </tr> <tr> <td>BufferedInputStream(FileInputStream fileInputStream);</td> <td>创建一个带有32个字节的缓冲输入流。</td> </tr> <tr> <td>BufferedInputStream(FileInputStream fileInputStream , int size);</td> <td>按指定的大小来创建缓冲输入流。</td> </tr> </tbody> </table> <h3>BufferedOutputStream类的构造方法：</h3> <table> <tbody> <tr> <th>构造方法</th> <th>介绍</th> </tr> <tr> <td>BufferedOutputStream(FileOutputStream fileOutputStream);</td> <td>创建一个带有32个字节的缓冲输出流。</td> </tr> <tr> <td>BufferedOutputStream(FileOutputStream fileOutputStream , int size);</td> <td>按指定的大小来创建缓冲输出流。</td> </tr> </tbody> </table> <h3>BufferedInputStream类 与 BufferedOutputStream类 实例：</h3> <div class="ay1code"> <pre class="brush:java;">import java.io.*;     public class Demo4 {      public static void main(String[] args) {          /**           * 缓冲字节输入流（BufferedInputStream）           * 特点：提高效率           */          File file = new File("C:\\JAVA_API_1.7中文.chm");          BufferedInputStream bufferedInputStream = null;//创建缓冲字节流          FileInputStream fileInputStream = null;          long stare = System.currentTimeMillis();//获得当前流开始时的毫秒值          try {              fileInputStream=new FileInputStream(file);              bufferedInputStream = new BufferedInputStream(fileInputStream);//将文件字节流包装成缓冲字节流              byte by[] = new byte[1024];//缓冲区字节数组（这个缓冲区与Buffered不同）              while ((bufferedInputStream.read(by))!=-1){//使用缓冲字节流读取数据                 }              long end = System.currentTimeMillis();//获得当前流结束时的毫秒值              System.out.println("运行经历的毫秒数："+(end - stare));             } catch (FileNotFoundException e) {              e.printStackTrace();          } catch (IOException e) {              e.printStackTrace();          } finally {              if (fileInputStream!=null){                  try {                      fileInputStream.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }              if (bufferedInputStream!=null){                  try {                      bufferedInputStream.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }          }                              /**           * 缓冲字节输出流（BufferedOutputStream）           * 特点：提高效率           */          File file1 = new File("C:\\Word.txt");          BufferedOutputStream bufferedOutputStream = null;//创建缓冲字节输出流          FileOutputStream fileOutputStream = null;          try {              fileOutputStream=new FileOutputStream(file1);              bufferedOutputStream=new BufferedOutputStream(fileOutputStream);//将文件输出流包装到缓冲字节输出流                 String str = "深山踏红叶，耳畔闻鹭鸣。";              byte by[] = str.getBytes();              bufferedOutputStream.write(by);              //&lt;*&gt; 使用缓冲字节输出流时，要多进行刷新操作，避免等待，有数据时就将数据写入文件当中 &lt;*&gt;              bufferedOutputStream.flush();//刷新（强制将缓冲区数据写入文件中，即使缓冲区没有写满）             } catch (FileNotFoundException e) {              e.printStackTrace();          } catch (IOException e) {              e.printStackTrace();          } finally {              if (fileOutputStream!=null){                  try {                      fileOutputStream.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }              if (bufferedOutputStream!=null){                  try {                      bufferedOutputStream.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }          }      }  }</pre> </div> <h2>BufferedReader类 与 BufferedWriter类</h2> <p>BufferedReader类 与 BufferedWriter类 分别继承了 Reader类 与 Writer类，这两个类同样具有内部缓冲机制，并以行为单位输入/输出。</p> <h3>BufferedReader类常用方法：</h3> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220419/ef29b2728ecc7f0d3a972b06667d7322.jpg"></p> <h3>BufferedWriter类常用方法：</h3> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220419/288963d53b2dba39980fe2a9cdfb316e.jpg"></p> <h3>BufferedReader类 与 BufferedWriter类 实例：</h3> <div class="ay1code"> <pre class="brush:java;">import java.io.*;     public class Demo6 {      public static void main(String[] args) {          File file = new File("C:\\Word.txt");             /**           * 文件缓冲字符输出流（BufferedWriter）           */          FileWriter fileWriter = null;//创建文件字符输出流          BufferedWriter bufferedWriter = null;//创建文件缓冲字符输出流             try {              fileWriter = new FileWriter(file);              bufferedWriter = new BufferedWriter(fileWriter);//将文件字符输出流包装成文件缓冲字符输出流                 String str1 = "神里";              String str2 = "绫华";                 bufferedWriter.write(str1);//第一行数据              bufferedWriter.newLine();//创建一个新行              bufferedWriter.write(str2);//第二行数据             } catch (IOException e) {              e.printStackTrace();          }finally {//&lt;*&gt; 注意：流的关闭顺序，先创建的后关闭。 &lt;*&gt;              if (bufferedWriter!=null){                  try {                      bufferedWriter.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }              if (fileWriter!=null){                  try {                      fileWriter.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }          }                /**           * 文件缓冲字符输入流（BufferedReader）           */          FileReader fileReader = null;          BufferedReader bufferedReader = null;          try {              fileReader = new FileReader(file);              bufferedReader = new BufferedReader(fileReader);//将文件字符输入流包装成文件缓冲字符输入流              String tmp = null;//临时变量              int i = 1;//计数器              while ((tmp = bufferedReader.readLine())!=null){//循环读取文件中的内容                  System.out.println("第"+i+"行："+tmp);                  i++;              }          } catch (FileNotFoundException e) {              e.printStackTrace();          } catch (IOException e) {              e.printStackTrace();          } finally {              if (bufferedReader!=null){                  try {                      bufferedReader.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }              if (fileReader!=null){                  try {                      fileReader.close();                  } catch (IOException e) {                      e.printStackTrace();                  }              }          }      }  }</pre> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2282.htm">文本垂直居中的两种解决办法</a></p>
                                        <p>下一个：<a href="/html/category/article-2284.htm">Spark Streaming 实战 日志分析数据清洗+统计访问量</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2496.htm" title=".NET Core(.NET6)中gRPC使用">.NET Core(.NET6)中gRPC使用</a></li>
                        <li class="py-2"><a href="/html/category/article-2518.htm" title="vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)">vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)</a></li>
                        <li class="py-2"><a href="/html/category/article-2487.htm" title="Python Module_subprocess子进程(程序调用)">Python Module_subprocess子进程(程序调用)</a></li>
                        <li class="py-2"><a href="/html/category/article-3138.htm" title="vue3 ref获取元素">vue3 ref获取元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2500.htm" title="JavaScript 进阶第二章（循环结构 ）">JavaScript 进阶第二章（循环结构 ）</a></li>
                        <li class="py-2"><a href="/html/category/article-2510.htm" title="记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题">记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题</a></li>
                        <li class="py-2"><a href="/html/category/article-2506.htm" title="JavaScript如何使用过滤器从数组中删除元素">JavaScript如何使用过滤器从数组中删除元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2512.htm" title="测试开发该如何在团队中推广新工具和新技术">测试开发该如何在团队中推广新工具和新技术</a></li>
                        <li class="py-2"><a href="/html/category/article-2515.htm" title="Java中Stack.peek()与Stack.pop()与Queue.poll的区别">Java中Stack.peek()与Stack.pop()与Queue.poll的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2546.htm" title="SpringBoot整合 &#8211; 依赖以及配置文件">SpringBoot整合 &#8211; 依赖以及配置文件</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>