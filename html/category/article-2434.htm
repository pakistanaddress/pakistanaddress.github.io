<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2434.htm" />
<title>自动类型安全的REST.NET标准库refit_实用技巧 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">自动类型安全的REST.NET标准库refit_实用技巧</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.简介</a></li> <li><a href="#_label1" rel="nofollow">2.API属性</a></li> <li><a href="#_label2" rel="nofollow">3.动态查询字符串参数(Dynamic Querystring Parameters)</a></li> <li><a href="#_label3" rel="nofollow">4.集合作为查询字符串参数(Collections as Querystring Parameters)</a></li> <li><a href="#_label4" rel="nofollow">5.转义符查询字符串参数(Unescape Querystring Parameters)</a></li> <li><a href="#_label5" rel="nofollow">6.Body内容</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_5_0" rel="nofollow">6.1.JSON内容</a></li> <li><a href="#_lab2_5_1" rel="nofollow">6.2XML内容</a></li> <li><a href="#_lab2_5_2" rel="nofollow">6.3.表单发布(Form posts)</a></li> </ul> <li><a href="#_label6" rel="nofollow">7.设置请求头</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_6_3" rel="nofollow">7.1静态头(Static headers)</a></li> <li><a href="#_lab2_6_4" rel="nofollow">7.2动态头(Dynamic headers)</a></li> <li><a href="#_lab2_6_5" rel="nofollow">7.3授权(动态头redux)</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.简介</h2> <p>Refit是一个受到Square的Retrofit库（Java）启发的自动类型安全REST库。通过HttpClient网络请求(POST，GET,PUT，DELETE等封装)把REST API返回的数据转化为POCO(Plain Ordinary C# Object,简单C#对象) to JSON。我们的应用程序通过Refit请求网络，实际上是使用Refit接口层封装请求参数、Header、Url等信息，之后由HttpClient完成后续的请求操作，在服务端返回数据之后，HttpClient将原始的结果交给Refit，后者根据用户的需求对结果进行解析的过程。安装组件命令行：</p> <div class="ay1code"> <pre class="brush:ps;">Install-Package refit</pre> </div> <p>代码例子：</p> <div class="ay1code"> <pre class="brush:csharp;">[Headers("User-Agent: Refit Integration Tests")]//这里因为目标源是GitHubApi，所以一定要加入这个静态请求标头信息，让其这是一个测试请求，不然会返回数据异常。  public interface IGitHubApi  {      [Get("/users/{user}")]      Task&lt;User&gt; GetUser(string user);  }  public class GitHubApi  {      public async Task&lt;User&gt; GetUser()      {          var gitHubApi = RestService.For&lt;IGitHubApi&gt;("https://api.github.com");          var octocat = await gitHubApi.GetUser("octocat");          return octocat;      }  }  public class User  {      public string login { get; set; }      public int? id { get; set; }      public string url { get; set; }  }  [HttpGet]  public async Task&lt;ActionResult&lt;IEnumerable&lt;string&gt;&gt;&gt; Get()  {      var result = await new GitHubApi().GetUser();      return new string[] { result.id.Value.ToString(), result.login };  }</pre> </div> <p>注：接口中Headers、Get这些属性叫做Refit的特性。<br />定义上面的一个IGitHubApi的REST API接口，该接口定义了一个函数GetUser，该函数会通过HTTP GET请求去访问服务器的/users/{user}路径把返回的结果封装为User POCO对象并返回。其中URL路径中的{user}的值为GetUser函数中的参数user的取值，这里赋值为octocat。然后通过RestService类来生成一个IGitHubApi接口的实现并供HttpClient调用。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220424/99db6a6059160d1d39dc44668c8711ae.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.API属性</h2> <p>每个方法必须具有提供请求URL和HTTP属性。HTTP属性有六个内置注释：Get, Post, Put, Delete, Patch and Head，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/users/list")]</pre> </div> <p>您还可以在请求URL中指定查询参数：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/users/list?sort=desc")]</pre> </div> <p>还可以使用相对URL上的替换块和参数来动态请求资源。替换块是由{and，即&amp;}包围的字母数字字符串。如果参数名称与URL路径中的名称不匹配，请使用AliasAs属性，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/group/{id}/users")]  Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs("id")] int groupId);</pre> </div> <p>请求URL还可以将替换块绑定到自定义对象，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/group/{request.groupId}/users/{request.userId}")]  Task&lt;List&lt;User&gt;&gt; GroupList(UserGroupRequest request);  class UserGroupRequest{      int groupId { get;set; }      int userId { get;set; }  }</pre> </div> <p>未指定为URL替换的参数将自动用作查询参数。这与Retrofit不同，在Retrofit中，必须明确指定所有参数，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/group/{id}/users")]  Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs("id")] int groupId, [AliasAs("sort")] string sortOrder);  GroupList(4, "desc");</pre> </div> <p>输出结果："/group/4/users?sort=desc"</p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.动态查询字符串参数(Dynamic Querystring Parameters)</h2> <p>方法还可以传递自定义对象，把对象属性追加到查询字符串参数当中，例如：</p> <div class="ay1code"> <pre class="brush:csharp;">public class MyQueryParams  {      [AliasAs("order")]      public string SortOrder { get; set; }      public int Limit { get; set; }  }  [Get("/group/{id}/users")]  Task&lt;List&lt;User&gt;&gt; GroupList([AliasAs("id")] int groupId, MyQueryParams params);  [Get("/group/{id}/users")]  Task&lt;List&lt;User&gt;&gt; GroupListWithAttribute([AliasAs("id")] int groupId, [Query(".","search")]MyQueryParams params);  params.SortOrder = "desc";  params.Limit = 10;  GroupList(4, params)</pre> </div> <p>输出结果："/group/4/users?order=desc&amp;Limit=10"</p> <div class="ay1code"> <pre class="brush:csharp;">GroupListWithAttribute(4, params)</pre> </div> <p>输出结果："/group/4/users?search.order=desc&amp;search.Limit=10"<br />您还可以使用[Query]指定querystring参数，并将其在非GET请求中扁平化，类似于：</p> <div class="ay1code"> <pre class="brush:csharp;">[Post("/statuses/update.json")]  Task&lt;Tweet&gt; PostTweet([Query]TweetParams params);</pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.集合作为查询字符串参数(Collections as Querystring Parameters)</h2> <p>方法除了支持传递自定义对象查询，还支持集合查询的，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/users/list")]  Task Search([Query(CollectionFormat.Multi)]int[] ages);  Search(new [] {10, 20, 30})</pre> </div> <p>输出结果："/users/list?ages=10&amp;ages=20&amp;ages=30"</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/users/list")]  Task Search([Query(CollectionFormat.Csv)]int[] ages);  Search(new [] {10, 20, 30})</pre> </div> <p>输出结果："/users/list?ages=10%2C20%2C30"</p> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.转义符查询字符串参数(Unescape Querystring Parameters)</h2> <p>使用QueryUriFormat属性指定查询参数是否应转义网址，例：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/query")]  [QueryUriFormat(UriFormat.Unescaped)]  Task Query(string q);  Query("Select+Id,Name+From+Account")</pre> </div> <p>输出结果："/query?q=Select+Id,Name+From+Account"</p> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>6.Body内容</h2> <p>通过使用Body属性，可以把自定义对象参数追加到HTTP请求Body当中。</p> <div class="ay1code"> <pre class="brush:csharp;">[Post("/users/new")]  Task CreateUser([Body] User user)</pre> </div> <p>根据参数的类型，提供Body数据有四种可能性：</p> <ul> <li>如果类型为Stream，则内容将通过StreamContent流形式传输。</li> <li>如果类型为string，则字符串将直接用作内容，除非[Body(BodySerializationMethod.Json)]设置了字符串，否则将其作为StringContent。</li> <li>如果参数具有属性[Body(BodySerializationMethod.UrlEncoded)]，则内容将被URL编码。</li> <li>对于所有其他类型，将使用RefitSettings中指定的内容序列化程序将对象序列化（默认为JSON）。</li> <li>缓冲和Content-Length头</li> </ul> <p>默认情况下，Refit重新调整流式传输正文内容而不缓冲它。例如，这意味着您可以从磁盘流式传输文件，而不会产生将整个文件加载到内存中的开销。这样做的缺点是没有在请求上设置内容长度头（Content-Length）。如果您的API需要您随请求发送一个内容长度头，您可以通过将[Body]属性的缓冲参数设置为true来禁用此流行为：</p> <div class="ay1code"> <pre class="brush:csharp;">Task CreateUser([Body(buffered: true)] User user);</pre> </div> <p class="maodian"><a name="_lab2_5_0" rel="nofollow"></a></p> <h3>6.1.JSON内容</h3> <p>使用Json.NET对JSON请求和响应进行序列化/反序列化。默认情况下，Refit将使用可以通过设置Newtonsoft.Json.JsonConvert.DefaultSettings进行配置的序列化器设置：</p> <div class="ay1code"> <pre class="brush:csharp;">JsonConvert.DefaultSettings =      () =&gt; new JsonSerializerSettings() {          ContractResolver = new CamelCasePropertyNamesContractResolver(),          Converters = {new StringEnumConverter()}      };  //Serialized as: {"day":"Saturday"}  await PostSomeStuff(new { Day = DayOfWeek.Saturday });</pre> </div> <p>由于默认静态配置是全局设置，它们将影响您的整个应用程序。有时候我们只想要对某些特定API进行设置，您可以选择使用RefitSettings属性，以允许您指定所需的序列化程序进行设置，这使您可以为单独的API设置不同的序列化程序设置：</p> <div class="ay1code"> <pre class="brush:csharp;">var gitHubApi = RestService.For&lt;IGitHubApi&gt;("https://api.github.com",      new RefitSettings {          ContentSerializer = new JsonContentSerializer(              new JsonSerializerSettings {                  ContractResolver = new SnakeCasePropertyNamesContractResolver()          }      )});  var otherApi = RestService.For&lt;IOtherApi&gt;("https://api.example.com",      new RefitSettings {          ContentSerializer = new JsonContentSerializer(              new JsonSerializerSettings {                  ContractResolver = new CamelCasePropertyNamesContractResolver()          }      )});</pre> </div> <p>还可以使用Json.NET的JsonProperty属性来自定义属性序列化/反序列化：</p> <div class="ay1code"> <pre class="brush:csharp;">public class Foo  {      //像[AliasAs(“ b”)]一样会在表单中发布      [JsonProperty(PropertyName="b")]      public string Bar { get; set; }  }</pre> </div> <p class="maodian"><a name="_lab2_5_1" rel="nofollow"></a></p> <h3>6.2XML内容</h3> <p>XML请求和响应使用System.XML.Serialization.XmlSerializer进行序列化/反序列化。默认情况下，Refit只会使用JSON将内容序列化，若要使用XML内容，请将ContentSerializer配置为使用XmlContentSerializer：</p> <div class="ay1code"> <pre class="brush:csharp;">var gitHubApi = RestService.For&lt;IXmlApi&gt;("https://www.w3.org/XML",      new RefitSettings {          ContentSerializer = new XmlContentSerializer()  });</pre> </div> <p>属性序列化/反序列化可以使用System.Xml.serialization命名空间中的属性进行自定义：</p> <div class="ay1code"> <pre class="brush:csharp;">public class Foo  {     [XmlElement(Namespace = "https://www.w3.org/XML")]     public string Bar { get; set; }  }</pre> </div> <p>System.Xml.Serialization.XmlSerializer提供了许多序列化选项，可以通过向XmlContentSerializer构造函数提供XmlContentSerializer设置来设置这些选项：</p> <div class="ay1code"> <pre class="brush:csharp;">var gitHubApi = RestService.For&lt;IXmlApi&gt;("https://www.w3.org/XML",      new RefitSettings {          ContentSerializer = new XmlContentSerializer(              new XmlContentSerializerSettings              {                  XmlReaderWriterSettings = new XmlReaderWriterSettings()                  {                      ReaderSettings = new XmlReaderSettings                      {                          IgnoreWhitespace = true                      }                  }              }          )  });</pre> </div> <p class="maodian"><a name="_lab2_5_2" rel="nofollow"></a></p> <h3>6.3.表单发布(Form posts)</h3> <p>对于以表单形式发布（即序列化为application/x-www-form-urlencoded）的API，请使用初始化Body属性BodySerializationMethod.UrlEncoded属性，参数可以是IDictionary字典，例：</p> <div class="ay1code"> <pre class="brush:csharp;">public interface IMeasurementProtocolApi  {      [Post("/collect")]      Task Collect([Body(BodySerializationMethod.UrlEncoded)] Dictionary&lt;string, object&gt; data);  }  var data = new Dictionary&lt;string, object&gt; {      {"v", 1},      {"tid", "UA-1234-5"},      {"cid", new Guid("d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c")},      {"t", "event"},  };  // Serialized as: v=1&amp;tid=UA-1234-5&amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;t=event  await api.Collect(data);</pre> </div> <p>如果我们传递对象跟请求表单中字段名称不一致时，可在对象属性名称上加入[AliasAs("你定义字段名称")] 属性，那么加入属性的对象字段都将会被序列化为请求中的表单字段：</p> <div class="ay1code"> <pre class="brush:csharp;">public interface IMeasurementProtocolApi  {      [Post("/collect")]      Task Collect([Body(BodySerializationMethod.UrlEncoded)] Measurement measurement);  }  public class Measurement  {      // Properties can be read-only and [AliasAs] isn't required      public int v { get { return 1; } }      [AliasAs("tid")]      public string WebPropertyId { get; set; }      [AliasAs("cid")]      public Guid ClientId { get; set; }      [AliasAs("t")]      public string Type { get; set; }      public object IgnoreMe { private get; set; }  }  var measurement = new Measurement {      WebPropertyId = "UA-1234-5",      ClientId = new Guid("d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c"),      Type = "event"  };  // Serialized as: v=1&amp;tid=UA-1234-5&amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;t=event  await api.Collect(measurement);</pre> </div> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>7.设置请求头</h2> <p class="maodian"><a name="_lab2_6_3" rel="nofollow"></a></p> <h3>7.1静态头(Static headers)</h3> <p>您可以为将headers属性应用于方法的请求设置一个或多个静态请求头：</p> <div class="ay1code"> <pre class="brush:csharp;">[Headers("User-Agent: Awesome Octocat App")]  [Get("/users/{user}")]  Task&lt;User&gt; GetUser(string user);</pre> </div> <p>通过将headers属性应用于接口，还可以将静态头添加到API中的每个请求：</p> <div class="ay1code"> <pre class="brush:csharp;">[Headers("User-Agent: Awesome Octocat App")]  public interface IGitHubApi  {      [Get("/users/{user}")]      Task&lt;User&gt; GetUser(string user);      [Post("/users/new")]      Task CreateUser([Body] User user);  }</pre> </div> <p class="maodian"><a name="_lab2_6_4" rel="nofollow"></a></p> <h3>7.2动态头(Dynamic headers)</h3> <p>如果需要在运行时设置头的内容，则可以通过将头属性应用于参数来向请求添加具有动态值的头：</p> <div class="ay1code"> <pre class="brush:csharp;">[Get("/users/{user}")]  Task&lt;User&gt; GetUser(string user, [Header("Authorization")] string authorization);  // Will add the header "Authorization: token OAUTH-TOKEN" to the request  var user = await GetUser("octocat", "token OAUTH-TOKEN");</pre> </div> <p class="maodian"><a name="_lab2_6_5" rel="nofollow"></a></p> <h3>7.3授权(动态头redux)</h3> <p>使用头的最常见原因是为了授权。而现在大多数API使用一些oAuth风格的访问令牌，这些访问令牌会过期，刷新寿命更长的令牌。封装这些类型的令牌使用的一种方法是，可以插入自定义的HttpClientHandler。这样做有两个类：一个是AuthenticatedHttpClientHandler，它接受一个Func&lt;Task&lt;string&gt;&gt;参数，在这个参数中可以生成签名，而不必知道请求。另一个是authenticatedparameteredhttpclienthandler，它接受一个Func&lt;HttpRequestMessage，Task&lt;string&gt;&gt;参数，其中签名需要有关请求的信息（参见前面关于Twitter的API的注释），<br />例如：</p> <div class="ay1code"> <pre class="brush:csharp;">class AuthenticatedHttpClientHandler : HttpClientHandler  {      private readonly Func&lt;Task&lt;string&gt;&gt; getToken;      public AuthenticatedHttpClientHandler(Func&lt;Task&lt;string&gt;&gt; getToken)      {          if (getToken == null) throw new ArgumentNullException(nameof(getToken));          this.getToken = getToken;      }      protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)      {          // See if the request has an authorize header          var auth = request.Headers.Authorization;          if (auth != null)          {              var token = await getToken().ConfigureAwait(false);              request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token);          }          return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);      }  }</pre> </div> <p>或者：</p> <div class="ay1code"> <pre class="brush:csharp;">class AuthenticatedParameterizedHttpClientHandler : DelegatingHandler      {          readonly Func&lt;HttpRequestMessage, Task&lt;string&gt;&gt; getToken;          public AuthenticatedParameterizedHttpClientHandler(Func&lt;HttpRequestMessage, Task&lt;string&gt;&gt; getToken, HttpMessageHandler innerHandler = null)              : base(innerHandler ?? new HttpClientHandler())          {              this.getToken = getToken ?? throw new ArgumentNullException(nameof(getToken));          }            protected override async Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)          {              // See if the request has an authorize header              var auth = request.Headers.Authorization;              if (auth != null)              {                  var token = await getToken(request).ConfigureAwait(false);                  request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token);              }              return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);          }      }</pre> </div> <p>虽然HttpClient包含一个几乎相同的方法签名，但使用方式不同。重新安装未调用HttpClient.SendAsync。必须改为修改HttpClientHandler。此类的用法与此类似（示例使用ADAL库来管理自动令牌刷新，但主体用于Xamarin.Auth或任何其他库：</p> <div class="ay1code"> <pre class="brush:csharp;">class LoginViewModel  {      AuthenticationContext context = new AuthenticationContext(...);      private async Task&lt;string&gt; GetToken()      {          // The AcquireTokenAsync call will prompt with a UI if necessary          // Or otherwise silently use a refresh token to return          // a valid access token              var token = await context.AcquireTokenAsync("http://my.service.uri/app", "clientId", new Uri("callback://complete"));          return token;      }      public async Task LoginAndCallApi()      {          var api = RestService.For&lt;IMyRestService&gt;(new HttpClient(new AuthenticatedHttpClientHandler(GetToken)) { BaseAddress = new Uri("https://the.end.point/") });          var location = await api.GetLocationOfRebelBase();      }  }  interface IMyRestService  {      [Get("/getPublicInfo")]      Task&lt;Foobar&gt; SomePublicMethod();      [Get("/secretStuff")]      [Headers("Authorization: Bearer")]      Task&lt;Location&gt; GetLocationOfRebelBase();  }</pre> </div> <p>在上面的示例中，每当调用需要身份验证的方法时，AuthenticatedHttpClientHandler将尝试获取新的访问令牌。由应用程序提供，检查现有访问令牌的过期时间，并在需要时获取新的访问令牌。</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2433.htm">在K8s上部署Redis 集群</a></p>
                                        <p>下一个：<a href="/html/category/article-2435.htm">Java 选择排序法</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2500.htm" title="JavaScript 进阶第二章（循环结构 ）">JavaScript 进阶第二章（循环结构 ）</a></li>
                        <li class="py-2"><a href="/html/category/article-2502.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                        <li class="py-2"><a href="/html/category/article-2510.htm" title="记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题">记一次jenkins发送邮件报错 一直报错 Could not send email as a part of the post-build publishers问题</a></li>
                        <li class="py-2"><a href="/html/category/article-2506.htm" title="JavaScript如何使用过滤器从数组中删除元素">JavaScript如何使用过滤器从数组中删除元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2475.htm" title="VUEJS实现网页进度条加载效果">VUEJS实现网页进度条加载效果</a></li>
                        <li class="py-2"><a href="/html/category/article-2546.htm" title="SpringBoot整合 &#8211; 依赖以及配置文件">SpringBoot整合 &#8211; 依赖以及配置文件</a></li>
                        <li class="py-2"><a href="/html/category/article-2481.htm" title="检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？">检索存储在INT列中作为MySQL TIMESTAMP的值的正确方法是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-2483.htm" title="setTimeout、Promise、Async/Await 的区别">setTimeout、Promise、Async/Await 的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2501.htm" title="Android Studio之菜单栏制作">Android Studio之菜单栏制作</a></li>
                        <li class="py-2"><a href="/html/category/article-2509.htm" title="python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具">python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">50</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>