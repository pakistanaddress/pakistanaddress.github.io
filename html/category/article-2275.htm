<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2275.htm" />
<title>Spring Boot Admin 的使用 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Spring Boot Admin 的使用</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1 id="一前言">一、前言</h1> <p>Spring Boot Admin 用于监控基于 Spring Boot 的应用。官方文档在这里（v1.3.4）：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://codecentric.github.io/spring-boot-admin/1.3.4/"  rel="nofollow">《Spring Boot Admin Reference Guide》</a></p> <p>实践的过程中，感觉这个 User Guide 结构上还是说的不太明白。所以我就大概写一遍我的实践过程与理解。</p> <p>阅读此文前提条件是：</p> <ul> <li>使用过 Maven。</li> <li>你跑过基于 Spring Boot 的 hello world 程序。</li> <li>第三节需要你会点 Spring Cloud 的 Eureka Server 配置。</li> </ul> <h1 id="二在-spring-boot-项目中配置">二、在 Spring Boot 项目中配置</h1> <p>这种配置中，Spring Boot Admin 作为 Server，其他 Spring Boot 应用作为 Client，Client 把自身的信息“注册”到 Server，我们就能在 Server 上看到“注册”的 Spring Boot 应用的状态信息了。</p> <h2 id="21server-端">2.1、Server 端</h2> <p>新建一个项目</p> <h3 id="211添加依赖">2.1.1、添加依赖</h3> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-admin-server<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <h3 id="212开启监控">2.1.2、开启监控</h3> <p>添加 <code>@EnableAdminServer</code> 注解开启监控</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Configuration</span> <span class="hljs-annotation">@EnableAutoConfiguration</span> <span class="hljs-annotation">@EnableAdminServer</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootAdminApplication</span> {<!-- --></span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {         SpringApplication.run(SpringBootAdminApplication.class, args);     } }</code></pre> <p>这里未指定 Server 运行的端口，默认是 8080，如果要指定，则需要在 application.properties 文件中设置： <br /> application.properties</p> <pre class="prettyprint"><code class="hljs fix"><span class="hljs-attribute">server.port</span>=<span class="hljs-string">8080</span></code></pre> <h2 id="22client-端">2.2、Client 端</h2> <h3 id="221添加依赖">2.2.1、添加依赖</h3> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p>这里的 <code>spring-boot-admin-starter-client</code> 会自动依赖 <code>jolokia-core</code>，jolokia是用于 JMX-bean 管理的。</p> <h3 id="222触发自动配置指明-server-注册地址">2.2.2、触发自动配置、指明 Server 注册地址</h3> <p>application.properties</p> <pre class="prettyprint"><code class="hljs avrasm">spring<span class="hljs-preprocessor">.boot</span><span class="hljs-preprocessor">.admin</span><span class="hljs-preprocessor">.url</span>=http://localhost:<span class="hljs-number">8080</span></code></pre> <p>上面 3.1.2 中 Server 端我们使用默认的 8080 端口，所以这里声明 Server 的地址为：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080"  rel="nofollow">http://localhost:8080</a></p> <h2 id="23开始管理">2.3、开始管理</h2> <p>至此，启动 Server 端和 Client 端，在浏览器输入 Server 的地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8080"  rel="nofollow">http://localhost:8080</a> 就能看到“注册”进来的 Spring Boot 应用信息了。</p> <h2 id="24显示应用版本">2.4、显示应用版本</h2> <p>为了在 Spring Boot Admin 的应用管理列表显示被管理应用的版本号，你需要设置 <code>info.version</code>，例如使用 maven filtering： <br /> application.properties</p> <pre class="prettyprint"><code class="hljs d">info.<span class="hljs-keyword">version</span>=<span class="hljs-keyword">@project</span>.<span class="hljs-keyword">version</span>@</code></pre> <p>这里设置显示的版本号为 Maven pom.xml 中的构建版本号。</p> <h2 id="25jmx-bean管理">2.5、JMX-bean管理</h2> <p>JMX-bean 管理需要使用第三方的 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://jolokia.org/"  rel="nofollow">jolokia</a> ，因为 <code>spring-boot-admin-starter-client</code> 会自动依赖 <code>jolokia-core</code>，所以这里不需要显示依赖了，第三节的基于 Eureka 注册发现的配置中，就需要显示地依赖： <br /> pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.jolokia<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jolokia-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <h2 id="26loglevel-管理">2.6、Loglevel 管理</h2> <p>当前日志级别管理仅限 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://logback.qos.ch/"  rel="nofollow">Logback</a>，通过 JMX 实现，所以需要依赖 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://jolokia.org/"  rel="nofollow">jolokia</a> 。同时，还需要配置 Logback 的 <code>JMXConfigurator</code>： <br /> logback.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">include</span> <span class="hljs-attribute">resource</span>=<span class="hljs-value">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">jmxConfigurator</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre> <p>这个 logback.xml 放在与 application.properties 同级的目录就可以了，如果不配置 Logback，那么 Spring Boot Admin 就无法管理应用的日志级别。</p> <h2 id="27server-端监控自己">2.7、Server 端监控自己</h2> <p>以上的配置，基本就可以很好工作了。 <br /> 但是有一个问题，我们没有监控作为 Server 端的 Spring Boot Admin 自身。如果要监控到 Server 自己，把 Server 端也当作是 Client 一样来配置就可以实现了：把 2.2.1、2.2.2、2.4、2.6 的步骤在 Server 端也配置一遍。</p> <h1 id="三在-spring-cloud-项目的-eureka-中配置">三、在 Spring Cloud 项目的 Eureka 中配置</h1> <p>这里示例的 Spring Cloud 项目是使用 Eureka 来做注册/发现的，官方 Github 示例里有基于 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-consul/"  rel="nofollow">Consul</a> 和 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-zookeeper/"  rel="nofollow">Zookeper</a> 的配置。</p> <p>配置好之后，Spring Boot Admin 就可以管理所有注册到 Eureka Server 的应用了，包括 Spring Boot Admin 自己（因为自己也会注册到 Eureka Server）。</p> <h2 id="31一个简单的-eureka-server">3.1、一个简单的 Eureka Server</h2> <p>关于 Eureka Server 这里不做详细介绍，只列一下配置经过： <br /> pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p>Eureka Server 启动类</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@SpringBootApplication</span> <span class="hljs-annotation">@EnableEurekaServer</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> {<!-- --></span>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {         SpringApplication.run(EurekaServerApplication.class, args);     } }</code></pre> <p>application.properties</p> <pre class="prettyprint"><code class="hljs avrasm">spring<span class="hljs-preprocessor">.application</span><span class="hljs-preprocessor">.name</span>=eureka-server server<span class="hljs-preprocessor">.port</span>=<span class="hljs-number">8761</span></code></pre> <p>在 application.properties 同级目录下新建 <code>bootstrap.properties</code> 文件： <br /> bootstrap.properties</p> <pre class="prettyprint"><code class="hljs avrasm">eureka<span class="hljs-preprocessor">.instance</span><span class="hljs-preprocessor">.hostname</span>=localhost eureka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.registerWithEureka</span>=false eureka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.fetchRegistry</span>=false eureka<span class="hljs-preprocessor">.client</span><span class="hljs-preprocessor">.serviceUrl</span><span class="hljs-preprocessor">.defaultZone</span>=http://${eureka<span class="hljs-preprocessor">.instance</span><span class="hljs-preprocessor">.hostname</span>}:${server<span class="hljs-preprocessor">.port</span>}/eureka/</code></pre> <p>此文件作用与 application.properties 几乎样，只是但是作用在 application context 启动时期。原话是：<code>like application.properties but for the bootstrap phase of an application context</code> 。</p> <p>以上配置表明，我们的 Eureka Server 运行在 8761 端口。服务注册地址是：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8761/eureka/"  rel="nofollow">http://localhost:8761/eureka/</a></p> <h2 id="32server-端">3.2、Server 端</h2> <p>官方示例：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-eureka/"  rel="nofollow">spring-boot-admin-sample-eureka</a></p> <h3 id="321添加-spring-cloud-starter-eureka-依赖">3.2.1、添加 spring-cloud-starter-eureka 依赖</h3> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-admin-server<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">version</span>&gt;</span>1.3.4<span class="hljs-tag">&lt;/<span class="hljs-title">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <h3 id="322添加-enablediscoveryclient-开启发现">3.2.2、添加 @EnableDiscoveryClient 开启发现</h3> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Configuration</span> <span class="hljs-annotation">@EnableAutoConfiguration</span> <span class="hljs-annotation">@EnableDiscoveryClient</span> <span class="hljs-annotation">@EnableAdminServer</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootAdminApplication</span> {<!-- --></span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {         SpringApplication.run(SpringBootAdminApplication.class, args);     } }</code></pre> <h3 id="323指明去哪注册">3.2.3、指明去哪注册</h3> <p>application.properties</p> <pre class="prettyprint"><code class="hljs http"><span class="hljs-attribute">eureka.instance.client.serviceUrl.defaultZone</span>: <span class="hljs-string">http://localhost:8761/eureka/</span></code></pre> <p>也就是我们在 3.1 中配置的 Eureka Server 服务地址。</p> <p><em>这个配置我测试时并不成功，改为 eureka.client.serviceUrl.defaultZone: <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8761/eureka/"  rel="nofollow">http://localhost:8761/eureka/</a> 才可以，不知为何。</em></p> <h3 id="324官方未说明的">3.2.4、官方未说明的</h3> <p>3.2.1 ~ 3.2.3 的配置，会把 Server 注册到 Eureka Server，也就是说 Spring Boot Admin 也可以管理自身，但现在的 Server 配置还不全面（比如自身还缺的配置有：版本信息、 JMX 管理和 Loglevel 管理）。加上以下配置： <br /> application.properties</p> <pre class="prettyprint"><code class="hljs d">info.<span class="hljs-keyword">version</span>=<span class="hljs-keyword">@project</span>.<span class="hljs-keyword">version</span>@</code></pre> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.jolokia<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jolokia-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p>logback.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">include</span> <span class="hljs-attribute">resource</span>=<span class="hljs-value">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">jmxConfigurator</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre> <h2 id="33client-端">3.3、Client 端</h2> <p>Client 端的配置主要是把自己注册到 Eureka Server 中就可以被 Spring Boot Admin 管理了，免去了手工配置 Spring Boot Admin 服务地址的操作（即 2.2.2 节操作）。</p> <h3 id="331依赖">3.3.1、依赖</h3> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p>注意要添加 <code>spring-boot-starter-actuator</code> 依赖，因为获取应用信息是通过 actuator 中的相关 endpoints 获取的。</p> <p>之所以 Server 端不需要添加此依赖，是因为 <code>spring-boot-admin-server</code> 依赖于 <code>spring-boot-admin-starter-client</code> ，而 <code>spring-boot-admin-starter-client</code> 依赖于 <code>spring-boot-starter-actuator</code> 。</p> <h3 id="332启动类">3.3.2、启动类</h3> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@SpringBootApplication</span> <span class="hljs-annotation">@EnableEurekaClient</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientEurekaSampleApplication</span> {<!-- --></span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {         SpringApplication.run(ClientEurekaSampleApplication.class, args);     } }</code></pre> <p>添加 <code>@EnableDiscoveryClient</code> 或 <code>@EnableEurekaClient</code> 注解到启动类上，将自己注册到 Erueka Server。</p> <h3 id="333指明去哪注册">3.3.3、指明去哪注册</h3> <p>bootstrap.properties</p> <pre class="prettyprint"><code class="hljs http"><span class="hljs-attribute">eureka.client.serviceUrl.defaultZone</span>: <span class="hljs-string">http://localhost:8761/eureka/</span></code></pre> <h3 id="334其他项配置">3.3.4、其他项配置</h3> <p>application.properties</p> <pre class="prettyprint"><code class="hljs d">info.<span class="hljs-keyword">version</span>=<span class="hljs-keyword">@project</span>.<span class="hljs-keyword">version</span>@</code></pre> <p>logback.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">configuration</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">include</span> <span class="hljs-attribute">resource</span>=<span class="hljs-value">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">jmxConfigurator</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">configuration</span>&gt;</span></code></pre> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.jolokia<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>jolokia-core<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <h1 id="四通知">四、通知</h1> <p>官方提供好几种通知方式，这里贴一下邮件通知的配置，其他 <code>Pagerduty</code>、<code>Hipchat</code> 、<code>Slack</code> 和 <code>Reminder</code> 的通知配置请参见官方文档。</p> <p>使用 <code>spring-boot-starter-mail</code> 依赖配置 <code>JavaMailSender</code> </p> <p>pom.xml</p> <pre class="prettyprint"><code class="language-xml hljs"><span class="hljs-tag">&lt;<span class="hljs-title">dependency</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-title">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-title">artifactId</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dependency</span>&gt;</span></code></pre> <p>application.properties</p> <pre class="prettyprint"><code class="hljs avrasm">spring<span class="hljs-preprocessor">.mail</span><span class="hljs-preprocessor">.host</span>=smtp<span class="hljs-preprocessor">.example</span><span class="hljs-preprocessor">.com</span> spring<span class="hljs-preprocessor">.boot</span><span class="hljs-preprocessor">.admin</span><span class="hljs-preprocessor">.notify</span><span class="hljs-preprocessor">.mail</span><span class="hljs-preprocessor">.to</span>=admin@example<span class="hljs-preprocessor">.com</span></code></pre> <p>表格：邮件配置选项</p> <table> <thead> <tr> <th align="left">Property name</th> <th align="left">Description</th> <th align="left">Default value</th> <th align="left">中文说明</th> </tr> </thead> <tbody> <tr> <td align="left">spring.boot.admin.notify.mail.enabled</td> <td align="left">Enable mail notifications</td> <td align="left">true</td> <td align="left">默认启用</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.ignore-changes</td> <td align="left">Comma-delimited list of status changes to be ignored. Format: “:”. Wildcards allowed.</td> <td align="left">“UNKNOWN:UP”</td> <td align="left">需要忽略的状态改变通知，逗号分隔</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.to</td> <td align="left">Comma-delimited list of mail recipients</td> <td align="left">“root@localhost”</td> <td align="left">接收通知的邮箱地址，逗号分隔</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.cc</td> <td align="left">Comma-delimited list of carbon-copy recipients</td> <td align="left"></td> <td align="left">抄送</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.from</td> <td align="left">Mail sender</td> <td align="left"></td> <td align="left">发送人</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.subject</td> <td align="left">Mail subject. SpEL-expressions are supported</td> <td align="left">“#{application.name} (#{application.id}) is #{to.status}”</td> <td align="left">主题</td> </tr> <tr> <td align="left">spring.boot.admin.notify.mail.text</td> <td align="left">Mail body. SpEL-expressions are supported</td> <td align="left">“#{application.name} (#{application.id})\nstatus changed from #{from.status} to #{to.status}\n\n#{application.healthUrl}”</td> <td align="left">内容</td> </tr> </tbody> </table> <h1 id="五附spring-boot-admin-server-配置说明">五、附：Spring Boot Admin Server 配置说明</h1> <p>表格：Spring Boot Admin Server 配置选项</p> <table> <thead> <tr> <th align="left">Property name</th> <th align="left">Description</th> <th align="left">Default value</th> <th align="left">中文说明</th> </tr> </thead> <tbody> <tr> <td align="left">spring.boot.admin.context-path</td> <td align="left">The context-path prefixes the path where the Admin Server’s statics assets and API should be served. Relative to the Dispatcher-Servlet.</td> <td align="left"></td> <td align="left">Admin Server 保留的静态访问和API的前缀（当你在业务应用中使用而不是单独使用时就很有必要了）</td> </tr> <tr> <td align="left">spring.boot.admin.monitor.period</td> <td align="left">Time interval in ms to update the status of applications with expired status-informations.</td> <td align="left">10.000</td> <td align="left">更新应用信息的频率，单位毫秒</td> </tr> <tr> <td align="left">spring.boot.admin.monitor.status-lifetime</td> <td align="left">Lifetime of application statuses in ms. The applications /health-endpoint will not be queried until the lifetime has expired.</td> <td align="left">10.000</td> <td align="left">被监控的应用信息的过期时间，单位毫秒</td> </tr> </tbody> </table> <h2 id="51spring-cloud-对自动发现的支持">5.1、Spring Cloud 对自动发现的支持</h2> <p>来自被发现的应用的状态信息是经过 <code>ServiceInstanceConverter</code> 转换过的，自动配置时，使用了 Spring Boot Admin 自带的 Eureka 转换实现。你也可以实现相关接口并并添加到上下文以替换默认的。</p> <p>表格：注册发现配置选项</p> <table> <thead> <tr> <th align="left">Property name</th> <th align="left">Description</th> <th align="left">Default value</th> <th align="left">中文说明</th> </tr> </thead> <tbody> <tr> <td align="left">spring.boot.admin.discovery.enabled</td> <td align="left">Enables the DiscoveryClient-support for the admin server.</td> <td align="left">true</td> <td align="left">默认开启</td> </tr> <tr> <td align="left">spring.boot.admin.discovery.converter.management-context-path</td> <td align="left">Will be appended to the service-url of the discovered service when the managment-url is converted by the DefaultServiceInstanceConverter.</td> <td align="left"></td> <td align="left"></td> </tr> <tr> <td align="left">spring.boot.admin.discovery.converter.health-endpoint</td> <td align="left">Will be appended to the management-url of the discovered service when the health-url is converted by the DefaultServiceInstanceConverter.</td> <td align="left">“health”</td> <td align="left"></td> </tr> <tr> <td align="left">spring.boot.admin.discovery.ignored-services</td> <td align="left">This services will be ignored when using discovery and not registered as application.</td> <td align="left"></td> <td align="left"></td> </tr> </tbody> </table> <h1 id="六附spring-boot-admin-client-配置说明">六、附：Spring Boot Admin Client 配置说明</h1> <p>Spring Boot Admin Client 注册到 Spring Boot Admin Server，Client 定期地发送 Http Post 到 admin 提供自己的应用信息。如果需要管理 loglevels 或 JMX-beans ，则要在依赖中添加 Jolokia ，使得 JMX-beans 也可以通过 http 访问。</p> <p>表格：Spring Boot Admin Client配置选项</p> <table> <thead> <tr> <th align="left">Property name</th> <th align="left">Description</th> <th align="left">Default value</th> <th align="left">中文说明</th> </tr> </thead> <tbody> <tr> <td align="left">spring.boot.admin.client.enabled</td> <td align="left">Enables the Spring Boot Admin Client.</td> <td align="left">true</td> <td align="left">默认开启</td> </tr> <tr> <td align="left">spring.boot.admin.url</td> <td align="left">List of URLs of the Spring Boot Admin server to register at. This triggers the AutoConfiguration. <strong>Mandatory</strong>.</td> <td align="left"></td> <td align="left">admin server 的地址列表，此设置会触发自动配置，必须</td> </tr> <tr> <td align="left">spring.boot.admin.api-path</td> <td align="left">Http-path of registration endpoint at your admin server.</td> <td align="left">“api/applications”</td> <td align="left">注册到 admin server 端点的 Http-path</td> </tr> <tr> <td align="left">spring.boot.admin.username spring.boot.admin.password</td> <td align="left">Username and password for http-basic authentication. If set the registration uses http-basic-authentication when registering at the admin server.</td> <td align="left"></td> <td align="left">注册到 admin server 的账号密码</td> </tr> <tr> <td align="left">spring.boot.admin.period</td> <td align="left">Interval for repeating the registration (in ms).</td> <td align="left">10.000</td> <td align="left">重试注册的间隔时间</td> </tr> <tr> <td align="left">spring.boot.admin.auto-registration</td> <td align="left">If set to true the periodic task to register the application is automatically scheduled after the application is ready.</td> <td align="left">true</td> <td align="left">应用启动后自动执行周期性的注册任务</td> </tr> <tr> <td align="left">spring.boot.admin.auto-deregistration</td> <td align="left">Switch to enable auto-deregistration at Spring Boot Admin server when context is closed.</td> <td align="left">false</td> <td align="left">当应用关闭时，自动取消注册</td> </tr> <tr> <td align="left">spring.boot.admin.client.health-url</td> <td align="left">Client-health-url to register with. Can be overridden in case the reachable URL is different (e.g. Docker). Must be unique in registry.</td> <td align="left">Guessed based on management-url and endpoints.health.id.</td> <td align="left"></td> </tr> <tr> <td align="left">spring.boot.admin.client.management-url</td> <td align="left">Client-management-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).</td> <td align="left">Guessed based on service-url, server.servlet-path, management.port and management.context-path.</td> <td align="left"></td> </tr> <tr> <td align="left">spring.boot.admin.client.service-url</td> <td align="left">Client-service-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).</td> <td align="left">Guessed based on hostname, server.port and server.context-path.</td> <td align="left"></td> </tr> <tr> <td align="left">spring.boot.admin.client.name</td> <td align="left">Name to register with.</td> <td align="left">${spring.application.name} if set, “spring-boot-application” otherwise.</td> <td align="left">注册时的名字</td> </tr> <tr> <td align="left">spring.boot.admin.client.prefer-ip</td> <td align="left">Use the ip-address rather then the hostname in the guessed urls. If server.address / management.address is set, it get used. Otherwise the IP address returned from InetAddress.getLocalHost() gets used.</td> <td align="left">false</td> <td align="left"></td> </tr> </tbody> </table> <h1 id="七问答">七、问答</h1> <p>这部分我也啰嗦一下翻译出来。</p> <ul> <li> <p>我可以把 spring-boot-admin 添加到我的业务应用中吗？ <br /> 答：可以，但不应该这么做。你可以设置 <code>spring.boot.admin.context-path</code> 来改变 admin server 保留的 UI 和 REST-API 的访问，取决于你的应用复杂性，你可能会陷入困境。另一方面，当你的应用挂掉后，你的监控也一起挂掉，那么要监控有什么用呢？</p> </li> <li> <p>该怎么自定义 UI ？ <br /> 答：修改 UI 你仅可以复制并修改 <code>spring-boot-admin-ui</code>，并添加你自己的模块到 classpath 中。</p> </li> </ul> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2274.htm">Docker 安装 Confluence</a></p>
                                        <p>下一个：<a href="/html/category/article-2276.htm">分布式缓存&#8211;缓存与数据库一致性方案</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2516.htm" title="vue中watch监听，ajax异步问题解决">vue中watch监听，ajax异步问题解决</a></li>
                        <li class="py-2"><a href="/html/category/article-4140.htm" title="Python 基础系列 11 &#8211; Python 异常处理 Exception Handling">Python 基础系列 11 &#8211; Python 异常处理 Exception Handling</a></li>
                        <li class="py-2"><a href="/html/category/article-2517.htm" title="C#关键字Check简单介绍_C#教程">C#关键字Check简单介绍_C#教程</a></li>
                        <li class="py-2"><a href="/html/category/article-3138.htm" title="vue3 ref获取元素">vue3 ref获取元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2527.htm" title="Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库">Python基础：理解SQL注入问题的起因，掌握pymysql参数化防止黑客使用SQL注入浸入系统和拖库</a></li>
                        <li class="py-2"><a href="/html/category/article-4111.htm" title="通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型">通过实例程序验证与优化谈谈网上很多对于Java DCL的一些误解以及为何要理解Java内存模型</a></li>
                        <li class="py-2"><a href="/html/category/article-2523.htm" title="ElementUI el-upload 断点续传文件">ElementUI el-upload 断点续传文件</a></li>
                        <li class="py-2"><a href="/html/category/article-2513.htm" title="hbase的概述和hbase架构及基本组件">hbase的概述和hbase架构及基本组件</a></li>
                        <li class="py-2"><a href="/html/category/article-2840.htm" title="MySQL 表数据多久刷一次盘">MySQL 表数据多久刷一次盘</a></li>
                        <li class="py-2"><a href="/html/category/article-2839.htm" title="springboot之依赖版本管理">springboot之依赖版本管理</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>