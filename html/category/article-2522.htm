<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2522.htm" />
<title>Python 实现走迷宫深度优先回溯算法（优质代码） - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Python 实现走迷宫深度优先回溯算法（优质代码）</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <h1>题目：迷宫如下</h1> <pre><code class="prism language-python"><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>入口和出口：</p> <pre><code class="prism language-python">    startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span></code></pre> <p>没有传送门</p> <h1>准备：导入Numpy：</h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np</code></pre> <h1>第一步：定义坐标</h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y</code></pre> <h1>第二步：定义工具函数</h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator"><</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator"><</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP</code></pre> <h1>第三步：写深度优先的寻路函数</h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span></code></pre> <h1>第四步：主函数</h1> <pre><code class="prism language-python"><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'<{},{}>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <h1>代码汇总：</h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np<span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y<span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator"><</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator"><</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP<span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'<{},{}>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>输出寻路路径的点坐标：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/1013add8359ad4dc1bd4e0d7e787c1c3.jpg" alt="Python 实现走迷宫深度优先回溯算法（优质代码）"></p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2521.htm">C++入门   面向对象的基础</a></p>
                                        <p>下一个：<a href="/html/category/article-2523.htm">ElementUI el-upload 断点续传文件</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2840.htm" title="MySQL 表数据多久刷一次盘">MySQL 表数据多久刷一次盘</a></li>
                        <li class="py-2"><a href="/html/category/article-3137.htm" title="[转]图解分布式一致性协议Paxos">[转]图解分布式一致性协议Paxos</a></li>
                        <li class="py-2"><a href="/html/category/article-4566.htm" title="儿童女孩足球鞋(儿童女孩足球运动鞋)">儿童女孩足球鞋(儿童女孩足球运动鞋)</a></li>
                        <li class="py-2"><a href="/html/category/article-6015.htm" title="广州猫领养中心地址查询官网（广州去哪领养猫）">广州猫领养中心地址查询官网（广州去哪领养猫）</a></li>
                        <li class="py-2"><a href="/html/category/article-6014.htm" title="国内宠物粮上市公司有哪些公司（宠物主粮上市公司）">国内宠物粮上市公司有哪些公司（宠物主粮上市公司）</a></li>
                        <li class="py-2"><a href="/html/category/article-3439.htm" title="PYQT5(13)-基本窗口控件-拖曳与剪贴板">PYQT5(13)-基本窗口控件-拖曳与剪贴板</a></li>
                        <li class="py-2"><a href="/html/category/article-6076.htm" title="宠物领养中心是免费的吗知乎文章（宠物领养中心需要什么条件）">宠物领养中心是免费的吗知乎文章（宠物领养中心需要什么条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-3138.htm" title="vue3 ref获取元素">vue3 ref获取元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2521.htm" title="C++入门   面向对象的基础">C++入门   面向对象的基础</a></li>
                        <li class="py-2"><a href="/html/category/article-2524.htm" title="Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具">Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>