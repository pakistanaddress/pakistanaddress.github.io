<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2469.htm" />
<title>Java8 接口新特性 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Java8 接口新特性</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night-eighties"> <h1> <a id="1_Java8_0" rel="nofollow"></a>1 Java8接口新特性</h1> <p>接口改动一下就要修改对应的实现类，为了兼容老接口，Java8新增了<strong>默认方法</strong>和<strong>静态方法</strong>；</p> <blockquote> <p>对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现<br /> 1)静态方法可以直接调用，不能被重写<br /> 2)默认方法需要通过实现类，重写后实例化后调用</p> </blockquote> <p>一个例子，演示默认方法、静态方法和实现类中对它们的重写，抽象方法doSomthing()就不赘述：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">//一个有多个默认方法和静态方法的接口CommonInterface</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommonInterface</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//默认方法</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's default method　is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//默认方法可以有多个</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's second default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//静态方法</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">//静态方法也可以有多个</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface's second static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">//　一个跟上边一模一样的接口CommonInterface1</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommonInterface1</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//默认方法</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//默认方法可以有多个</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's second default method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//静态方法</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//静态方法也可以有多个</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterface1's second static method is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <p>实现类在尝试重写静态方法时报错，可见静态方法不允许重写：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonInterfaceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CommonInterface</span><span class="token punctuation">,</span> CommonInterface1 <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.doSomthing(): 我们来学习Java8新特性吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.defaultMehtod()-------------start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface1<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.defaultMehtod()-------------end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.anotherDefaultMehtod()-------------start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CommonInterface1<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommonInterfaceImpl.anotherDefaultMehtod()-------------end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//默认方法　和　抽象方法需实现类实例化后调用</span>         CommonInterface commonInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonInterfaceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//抽象方法重写后调用</span>         commonInterface<span class="token punctuation">.</span><span class="token function">doSomthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//默认方法重写后调用</span>         commonInterface<span class="token punctuation">.</span><span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         commonInterface<span class="token punctuation">.</span><span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ｝       </code></code></pre> <p>结果：</p> <pre class="language-shell"><code class="prism  language-shell">CommonInterface<span class="token string">'s static method is running... CommonInterface'</span>s second static method is running<span class="token punctuation">..</span>. CommonInterface1<span class="token string">'s static method is running... CommonInterface1'</span>s second static method is running<span class="token punctuation">..</span>.  CommonInterfaceImpl.doSomthing<span class="token punctuation">(</span><span class="token punctuation">)</span>: 我们来学习Java8新特性吧！  CommonInterfaceImpl.defaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------start CommonInterface<span class="token string">'s default method　is running... CommonInterface1'</span>s default method is running<span class="token punctuation">..</span>. CommonInterfaceImpl.defaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------end  CommonInterfaceImpl.anotherDefaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------start CommonInterface<span class="token string">'s second default method is running... CommonInterface1'</span>s second default method is running<span class="token punctuation">..</span>. CommonInterfaceImpl.anotherDefaultMehtod<span class="token punctuation">(</span><span class="token punctuation">)</span>-------------end </code></pre> <h1> <a id="2___Functional_Interface_113" rel="nofollow"></a>2 函数式接口 Functional Interface</h1> <p>函数式接口(Functional Interface)是只有一个抽象方法的接口。</p> <ol> <li>函数式接口中的抽象函数就是为了支持 lambda表达式；</li> <li>函数式接口可以被隐式转换为lambda表达式；</li> <li>为确保函数式接口符合语法，可以添加@FunctionalInterface注解；</li> </ol> <pre><code class="language-java"><code class="prism  language-java"><span class="token annotation punctuation">@FunctionalInterface</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FuncInterface</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//只有一个抽象方法</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	 	<span class="token comment">//还可以有其他方法</span>     <span class="token comment">//interface default method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">defaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a default method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//interface second default method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherDefaultMehtod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is the second default method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//interface static method</span>     <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a static method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//interface second static method</span>     <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">anotherStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is the second static method~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></code></pre> <h1> <a id="3_javautilfunction_148" rel="nofollow"></a>3 java.util.function包</h1> <p>Java 8添加一个新的包"java.util.function"，通常用于lambda表达式和方法引用，包下有很多通用接口：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/af6afb676e47e6578665314e720749e3.jpg" alt="Java8 接口新特性"><br /> 大致可以分为这几类：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/dbc3a52e1b8087b4622bd5c204daabd8.jpg" alt="Java8 接口新特性"><br /> 3.1 消费型接口<br /><em>Consumer</em> 有一个accept(T t) 方法接受一个入参没有返回，只要符合这个格式的参数，无需再写函数式接口，可以直接写lambda表达式：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/f823a8d9e5cdadb66e101cd65ba6a372.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * buy方法有个Consumer&lt;Integer&gt;的入参      * @param money      * @param consumer      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span>Integer money<span class="token punctuation">,</span> Consumer<span class="token generics function"><span class="token punctuation">&lt;</span>Integer<span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//消费型：第二个参数为实现了Consumer&lt;T&gt;接口accept(T t)方法的lambda表达式</span>         <span class="token function">buy</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> money <span class="token operator">-</span><span class="token operator">&gt;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费型--&gt;我买面包花了:"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">消费型<span class="token operator">--</span><span class="token operator">&gt;</span>我买面包花了<span class="token operator">:</span><span class="token number">1000</span>元 </code></code></pre> <p>3.2 供给型接口<br /><em>Supplier</em> 有一个get()方法无入参一个返回：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/8e26ac76327c63bac065c103115ec5e6.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * factory方法有个Supplier&lt;Integer&gt;的入参      * @param supplier      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">factory</span><span class="token punctuation">(</span>Supplier<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//供给型：参数为实现了Supplier&lt;Integer&gt;接口get()方法的lambda表达式</span>         String phone <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> <span class="token string">"Apple8"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"供给型--&gt;富士康生产的有名的手机是:"</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">供给型<span class="token operator">--</span><span class="token operator">&gt;</span>富士康生产的有名的手机是<span class="token operator">:</span>Apple8 </code></code></pre> <p>3.3 函数型接口<br /><em>Function接口</em>有一个apply(T t)方法接受入参有一个返回：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/7ff585517d21d7db5da2cd0d7ce40305.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * convert方法有个Function&lt;String, Integer&gt;的入参      * @param str      * @param function      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">convert</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Function<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//函数型：参数为实现了Function&lt;String, Integer&gt;接口apply(T t)方法的lambda表达式</span>         Integer num <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">&gt;</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数型--&gt;字符型666被转换成了数字: "</span><span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">函数型<span class="token operator">--</span><span class="token operator">&gt;</span>字符型<span class="token number">666</span>被转换成了数字<span class="token operator">:</span> <span class="token number">666</span> </code></code></pre> <p>3.4 断言型接口<br /><em>Predicate</em> 有一个test(T t)方法有一个入参并返回一个boolean：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230118/9d657ac954da053e5d06832567339925.jpg" alt="Java8 接口新特性"><br /> 方法：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token comment">/**      * isNoble方法有个Predicate&lt;String&gt;的入参      *      * @param name      * @param predicate      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">isNoble</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Predicate<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token string">"贵族"</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"平民"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> </code></code></pre> <p>客户端调用：</p> <pre><code class="language-java"><code class="prism  language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">//断言型：参数为实现了Predicate&lt;String&gt;接口test(T t)方法的lambda表达式</span>         String na <span class="token operator">=</span> <span class="token string">"尼古拉斯赵四"</span><span class="token punctuation">;</span>         String noble <span class="token operator">=</span> <span class="token function">isNoble</span><span class="token punctuation">(</span>na<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"尼古拉斯"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"断言型--&gt;从你的名字就可以看出你是个："</span> <span class="token operator">+</span> noble<span class="token punctuation">)</span><span class="token punctuation">;</span> ｝             </code></code></pre> <p>结果：</p> <pre><code class="language-java"><code class="prism  language-java">断言型<span class="token operator">--</span><span class="token operator">&gt;</span>从你的名字就可以看出你是个：贵族 </code></code></pre> <p>涉及代码：–&gt;<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Weision/java8-new-features"  rel="nofollow">GitHub</a></p> <hr/> <blockquote> <p>参考文献：<br /> [ 1 ]Java8函数式编程/(英)Richard Warburton著;王群锋译。–北京:人民邮电出版社，2015-03-01.<br /> [ 2 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.importnew.com/26080.html"  rel="nofollow">http://www.importnew.com/26080.html</a><br /> [ 3 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://java8.in/java-8-lambda-expression/"  rel="nofollow">http://java8.in/java-8-lambda-expression/</a><br /> [ 4 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6"  rel="nofollow">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach6</a><br /> [ 5 ] <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://winterbe.com/posts/2014/03/16/java-8-tutorial/"  rel="nofollow">https://winterbe.com/posts/2014/03/16/java-8-tutorial/</a></p> </blockquote></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2468.htm">SpringBoot 转发请求至指定页面</a></p>
                                        <p>下一个：<a href="/html/category/article-2470.htm">设计模式-六大原则之单一职责</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2519.htm" title="微信小程序自定义顶部导航栏防止出现内容显示不全和出现空白">微信小程序自定义顶部导航栏防止出现内容显示不全和出现空白</a></li>
                        <li class="py-2"><a href="/html/category/article-2495.htm" title="js中数组常用遍历，VUE 中数组常用遍历">js中数组常用遍历，VUE 中数组常用遍历</a></li>
                        <li class="py-2"><a href="/html/category/article-2492.htm" title="JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)">JVM_01 内存结构(程序计数器、虚拟机栈、本地方法栈)</a></li>
                        <li class="py-2"><a href="/html/category/article-2501.htm" title="Android Studio之菜单栏制作">Android Studio之菜单栏制作</a></li>
                        <li class="py-2"><a href="/html/category/article-2509.htm" title="python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具">python数据可视化-matplotlib入门(7)-从网络加载数据及数据可视化的小总结_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2482.htm" title="mysql中的时间字段用什么数据类型">mysql中的时间字段用什么数据类型</a></li>
                        <li class="py-2"><a href="/html/category/article-2506.htm" title="JavaScript如何使用过滤器从数组中删除元素">JavaScript如何使用过滤器从数组中删除元素</a></li>
                        <li class="py-2"><a href="/html/category/article-2502.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                        <li class="py-2"><a href="/html/category/article-3771.htm" title="使用Echarts3实现动态折线图">使用Echarts3实现动态折线图</a></li>
                        <li class="py-2"><a href="/html/category/article-2484.htm" title="Gin-使用GORM操作mysql 数据库">Gin-使用GORM操作mysql 数据库</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>