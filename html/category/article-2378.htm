<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2378.htm" />
<title>Python中Pyyaml模块的使用 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Python中Pyyaml模块的使用</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> 一、YAML是什么</h2> <p>YAML是专门用来写配置文件的语言，远比JSON格式方便。</p> <p>YAML语言的设计目标，就是方便人类读写。</p> <p>YAML是一种比XML和JSON更轻的文件格式，也更简单更强大，它可以通过缩进来表示结构，是不是听起来就和Python很搭？</p> <p>顾名思义，用语言编写的文件就可以称之为YAML文件。PyYaml是Python的一个专门针对YAML文件操作的模块，使用起来非常简单</p> <pre><code>安装 pip install pyyaml   # 如果是py2，使用 pip install yaml </code></pre> <h2> 二、PyYaml的简单使用</h2> <p>使用起来非常简单，就像json、pickle一样，load、dump就足够我们使用了。</p> <p>load()示例：返回一个对象</p> <pre><code>import yaml  yaml_str = """ name: 一条大河 age: 1956 job: Singer """  y = yaml.load(yaml_str, Loader=yaml.SafeLoader) print(y) </code></pre> <p><strong>运行结果：</strong></p> <pre><code>{'name': '一条大河', 'age': 1956, 'job': 'Singer'} </code></pre> <p>load_all()示例：生成一个迭代器</p> <p>如果string或文件包含几块yaml文档，可以使用yaml.load_all来解析全部的文档。</p> <p>yaml_test.yaml文件内容：</p> <pre><code>  --- name: qiyu age: 20岁 --- name: qingqing age: 19岁 </code></pre> <p>操作yaml文件的test.py文件如下：</p> <pre><code>import yaml  with open("./yaml_test", 'r', encoding='utf-8') as ymlfile:     cfg = yaml.load_all(ymlfile, Loader=yaml.SafeLoader)     for data in cfg:         print(data) </code></pre> <p><strong>运行结果：</strong></p> <pre><code>{'name': 'qiyu', 'age': '20岁'} {'name': 'qingqing', 'age': '19岁'} </code></pre> <p>dump()示例：将一个python对象生成为yaml文档</p> <pre><code>import yaml  json_data = {'name': '一条大河',              'age': 1956,              'job': ['Singer','Dancer']}  y = yaml.dump(json_data, default_flow_style=False).encode('utf-8').decode('unicode_escape') print(y) </code></pre> <p><strong>运行结果：</strong></p> <pre><code>age: 1956 job: - Singer - Dancer name: "一条大河" </code></pre> <p>使用dump()传入参数，可以直接把内容写入到yaml文件：</p> <pre><code>import yaml  json_data = {'name': '一条大河',              'age': 1956,              'job': ['Singer', 'Dancer']} with open('./yaml_write.yaml', 'w') as f:     y = yaml.dump(json_data, f)     print(y) </code></pre> <p>写入内容后的yaml_write.yaml：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/9d99b1e63a0117ab8ef2af7e994b91d0.jpg" alt="Python中Pyyaml模块的使用"><br /> yaml.dump_all()示例：将多个段输出到一个文件中</p> <pre><code>import yaml  obj1 = {"name": "river", "age": 2019} obj2 = ["Lily", 1956] obj3 = {"gang": "ben", "age": 1963} obj4 = ["Zhuqiyu", 1994]  with open('./yaml_write_all.yaml', 'w', encoding='utf-8') as f:     y = yaml.dump([obj1, obj2, obj3, obj4], f)     print(y)  with open('./yaml_write_all.yaml', 'r') as r:     y1 = yaml.load(r, Loader=yaml.SafeLoader)     print(y1) </code></pre> <p>写入内容后的yaml_write_all.yaml：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/ed572ae869b3cbd2fd30719a675896d0.jpg" alt="Python中Pyyaml模块的使用"><br /> 为什么写入文件后的格式有的带1个“-”，有的带2个“-”？</p> <p>为什么yaml文件读出来的的格式是List？</p> <h2> 三、YAML的语法规则和数据结构</h2> <p>看完了以上4个简单的示例，现在就来总结下YAML语言的基本语法</p> <p>YAML 基本语法规则如下：</p> <pre><code>1、大小写敏感  2、使用缩进表示层级关系  3、缩进时不允许使用Tab键，只允许使用空格。  4、缩进的空格数目不重要，只要相同层级的元素左侧对齐即可  5、# 表示注释，从这个字符一直到行尾，都会被解析器忽略，这个和python的注释一样  6、列表里的项用"-"来代表，字典里的键值对用":"分隔 </code></pre> <p>知道了语法规则，现在来回答下上面的2个问题：</p> <p>1、带1个“-”表示不同的模块（单个数组或者字典），带2个“-”是因为数组中元素以“-”开始，加上表示不同模块的那一个“-”，呈现出来就是2个“-”</p> <p>2、因为yaml文件中包含多个模块（多个数组或者字典），读取出来的是这些模块的一个集合</p> <p>3、有且只有当yaml文件中只有1个字典时，读取出来的数据的类型也是字典</p> <p><strong>YAML 支持的数据结构有3种：</strong></p> <pre><code>1、对象：键值对的集合2、数组：一组按次序排列的值，序列（sequence） 或 列表（list）  3、纯量（scalars）：单个的、不可再分的值，如：字符串、布尔值、整数、浮点数、Null、时间、日期 </code></pre> <p>支持数据示例：</p> <p>yaml_test_data.yaml的内容：</p> <pre><code>str: "Big River"                           #字符串 int: 1548                                 #整数 float: 3.14                               #浮点数 boolean: true                              #布尔值 None: null                                # 也可以用 ~ 号来表示 null time: '2019-11-20T08:47:46.576701+00:00'       # 时间，ISO8601  date: 2019-11-20 16:47:46.576702                # 日期 </code></pre> <p><strong>操作代码：</strong></p> <pre><code>import yaml import datetime import pytz  yaml_data = {     "str": "Big River",     "int": 1548,     "float": 3.14,     'boolean': True,     "None": None,     'time': datetime.datetime.now(tz=pytz.timezone('UTC')).isoformat(),     'date': datetime.datetime.today() }  with open('./yaml_test', 'w') as f:     y = yaml.dump(yaml_data, f)     print(y)  with open('./yaml_test', 'r') as r:     y1 = yaml.load(r, Loader=yaml.SafeLoader)     print(y1) </code></pre> <p><strong>控制台输出：</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/0f1dddd96785cd7ccf8dadc821c6431e.jpg" alt="Python中Pyyaml模块的使用"><br /> 其他语法规则</p> <p><strong>1、如果字符串没有空格或特殊字符，不需要加引号，但如果其中有空格或特殊字符，就需要加引号了</strong><br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/c5ba01a3749414c96ab9fb4efef2ebde.jpg" alt="Python中Pyyaml模块的使用"><br /><strong>2、引用</strong></p> <p>& 和 * 用于引用</p> <pre><code>name: &name SKP tester: *name </code></pre> <p>运行结果：</p> <pre><code>{'name': 'SKP', 'tester': 'SKP'} </code></pre> <p><strong>3、强制转换</strong></p> <p>用 !! 实现</p> <pre><code>str: !!str 3.14 int: !!int "123" </code></pre> <p><strong>运行结果：</strong></p> <pre><code>{'int': 123, 'str': '3.14'} </code></pre> <p><strong>4、分段</strong></p> <p>在同一个yaml文件中，可以用“—”3个“-”来分段，这样可以将多个文档写在一个文件中</p> <p>举例见上述load_all()示例</p> <h2> 四、python对象生成yaml文档</h2> <p><strong>1、yaml.dump()方法</strong></p> <pre><code>import yaml import os  def generate_yaml_doc(yaml_file):     py_object = {'school': 'zhu',                  'students': ['a', 'b']}     file = open(yaml_file, 'w', encoding='utf-8')     yaml.dump(py_object, file)     file.close()  current_path = os.path.abspath(".") yaml_path = os.path.join(current_path, "generate.yaml") generate_yaml_doc(yaml_path) """结果 school: zhu students: - a - b """ </code></pre> <p><strong>2、使用ruamel模块中的yaml方法生成标准的yaml文档</strong></p> <pre><code>import os from ruamel import yaml     # pip3 install ruamel.yaml  def generate_yaml_doc_ruamel(yaml_file):     py_object = {'school': 'zhu',                  'students': ['a', 'b']}     file = open(yaml_file, 'w', encoding='utf-8')     yaml.dump(py_object, file, Dumper=yaml.RoundTripDumper)     file.close()  current_path = os.path.abspath(".") yaml_path = os.path.join(current_path, "generate.yaml") generate_yaml_doc_ruamel(yaml_path) """结果 school: zhu students: - a - b """ </code></pre> <p>使用ruamel模块中的yaml方法读取yaml文档（用法与单独import yaml模块一致）</p> <pre><code>import os from ruamel import yaml  def get_yaml_data_ruamel(yaml_file):     file = open(yaml_file, 'r', encoding='utf-8')     data = yaml.load(file, Loader=yaml.Loader)     file.close()     print(data)  current_path = os.path.abspath(".") yaml_path = os.path.join(current_path, "generate.yaml") get_yaml_data_ruamel(yaml_path) </code></pre> <p><strong>点赞关注~~持续分享。加入我们，642830685，群内免费领取最新软件测试大厂面试资料和Python自动化、接口、框架搭建学习资料！技术大牛解惑答疑，同行一起交流。</strong></p> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2377.htm">远程调用RestTemplate</a></p>
                                        <p>下一个：<a href="/html/category/article-2379.htm">用 docker 部署kafka</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6999.htm" title="宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）">宠物粮食批发进货渠道有哪些呢视频播放（宠物粮市场销售渠道）</a></li>
                        <li class="py-2"><a href="/html/category/article-8149.htm" title="小猫养多久才会认主人（小猫养多久才认家）">小猫养多久才会认主人（小猫养多久才认家）</a></li>
                        <li class="py-2"><a href="/html/category/article-7274.htm" title="养狗容易得什么病如何预防（养狗狗容易得什么病）">养狗容易得什么病如何预防（养狗狗容易得什么病）</a></li>
                        <li class="py-2"><a href="/html/category/article-7919.htm" title="吴尊mv（吴尊）奔走相告，">吴尊mv（吴尊）奔走相告，</a></li>
                        <li class="py-2"><a href="/html/category/article-8056.htm" title="寄卖行如何盈利(寄卖行怎么挣钱)">寄卖行如何盈利(寄卖行怎么挣钱)</a></li>
                        <li class="py-2"><a href="/html/category/article-7780.htm" title="宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）">宠物粮食品牌前十名排行榜有哪些品种的狗（宠物粮种类）</a></li>
                        <li class="py-2"><a href="/html/category/article-8057.htm" title="三国杀角色台词代码大全（三国杀台词代码大全集最新）">三国杀角色台词代码大全（三国杀台词代码大全集最新）</a></li>
                        <li class="py-2"><a href="/html/category/article-7183.htm" title="2020年开宠物店怎么样（2020年开宠物店怎么样了）">2020年开宠物店怎么样（2020年开宠物店怎么样了）</a></li>
                        <li class="py-2"><a href="/html/category/article-7597.htm" title="澜沧县中医院电话(澜沧县中医院有几个科室)">澜沧县中医院电话(澜沧县中医院有几个科室)</a></li>
                        <li class="py-2"><a href="/html/category/article-7688.htm" title="莲藕菜干猪骨汤的做法(菜干猪骨汤的做法大全)">莲藕菜干猪骨汤的做法(菜干猪骨汤的做法大全)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>