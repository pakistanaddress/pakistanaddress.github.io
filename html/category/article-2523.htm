<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2523.htm" />
<title>ElementUI el-upload 断点续传文件 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">ElementUI el-upload 断点续传文件</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <p>官方的<code>Upload</code> 组件从文档和所有demo来看，均是选中文件直接上传，但是业务系统有大文件上传的需求，所以要用这个组件封装一个断点续传的功能。</p> <p>从官方给出的文档看到有个<code>http-request 覆盖默认的上传行为，可以自定义上传的实现</code> 似乎能满足要求，那就开撸。</p> <p>确定需求：最大支持2GB的任意文件上传，小于100M直接上传，大于100M的时候分块上传，并且要支持断点续传。</p> <p>我拿了官方的一个demo</p> <pre><code> &lt;el-upload       drag       multiple       :http-request="checkedFile"       action="/"     &gt;       &lt;i class="el-icon-upload"&gt;&lt;/i&gt;       &lt;div class="el-upload__text"&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;     &lt;/el-upload&gt;</code></pre> <p>可拖动上传，比较高大上一点。</p> <p><code>http-request</code> 方法定义之后，文件上传会先走这个方法，传入一个参数</p> <pre><code>options = { 	headers: this.headers, 	withCredentials: this.withCredentials, 	file: rawFile, 	data: this.data, 	filename: this.name, 	action: this.action, 	onProgress: e =&gt; { 	  this.onProgress(e, rawFile); 	}, 	onSuccess: res =&gt; { 	  this.onSuccess(res, rawFile); 	  delete this.reqs[uid]; 	}, 	onError: err =&gt; { 	  this.onError(err, rawFile); 	  delete this.reqs[uid]; 	} }</code></pre> <p>该参数就是组件的参数集合，同时，如果定义了这个方法，组件的<code>submit</code>方法就会被拦截掉（注意别在这个方法里面调用组件的<code>submit</code> 方法，会造成死循环），在这个方法里面我就可以搞我想搞的事情了。</p> <p>说一下要注意的：<br /> 使用这个断点续传方法一定要先和服务端协调好，看他们怎么处理的，比如我这里就是按照文件分块后按照序号和文件id等信息跟服务端建立联系，服务端从接收到第一块文件的请求开始就会检测该文件是否已经存在已接收的文件块，然后再返回续传的块的序号，最终再调用接口校验文件完不完整。</p> <p>如果使用<code>mock</code>来模拟接口的话，<code>onUploadProgress</code>是无效的，因为<code>mock</code>会重新声明一个<code>XMLHttpRequest</code>，不会继承<code>onUploadProgress</code>。</p> <p>以上，就是<code>el-upload</code>组件的大文件分块上传的改造方案，目前还很粗糙，甚至还没过测试，如有问题会持续更新</p> <p>20180726<br /> 看源码的时候发现<code>http-request</code> 这个传入的回调函数应该返回一个<code>Promise</code></p> <pre><code>  const req = this.httpRequest(options);   this.reqs[uid] = req;   if (req &amp;&amp; req.then) {     req.then(options.onSuccess, options.onError);   }</code></pre> <p>然后组件自己会做成功和错误的处理，但是我同时又注意到了组件是有删除文件的功能的，那我请求自己实现的话，这功能岂不是没法用？果然我一点X，立马报了一个<code>reqs[uid].abort is not a function</code> ，果然如此，我返回了一个最普通的<code>Promise</code>，当然没有<code>abort</code>方法了（是原生<code>XMLHttpRequest</code> 对象的方法）<br /> 我在返回的<code>Promise</code>动了一下手脚</p> <pre><code>const prom = new Promise((resolve, reject) =&gt; {}) prom.abort = () =&gt; {} return prom</code></pre> <p>这三句话的意思就：大爷我给您跪了，别报错……<br /> 接下来就在组件的钩子函数<code>before-remove</code>来处理删除文件的功能。<br /><code>axios</code>截断请求可以传入一个<code>cancelToken</code>的值来返回一个<code>cancel function</code>，这部分就在data里面添加一个请求队列的参数，再把文件id和相关请求的截断方法push进去就可以了，改造后的<code>postFile</code>方法如下</p> <pre><code> postFile (param, onProgress) {       const formData = new FormData()       for (let p in param) {         formData.append(p, param<div class="section-content"></p></div><p>)       }       const { requestCancelQueue } = this       const config = {         cancelToken: new axios.CancelToken(function executor (cancel) {           if (requestCancelQueue[param.uid]) {             requestCancelQueue[param.uid]()             delete requestCancelQueue[param.uid]           }           requestCancelQueue[param.uid] = cancel         }),         onUploadProgress: e =&gt; {           e.percent = Number(((e.loaded / e.total) * (1 / (param.chunks || 1)) * 100).toFixed(2))           onProgress(e)         }       }       return axios.post('/upload', formData, config).then(rs =&gt; rs.data.data)     }</code></pre> <p>然后<code>before-remove</code>钩子的处理就只需要调用就OK了</p> <pre><code>	removeFile (file) {       this.requestCancelQueue[file.uid]()       delete this.requestCancelQueue[file.uid]       return false     }</code></pre> <p>最后贴上完整的组件源码，直接拷贝粘贴可用（依赖element-ui、axios）</p> <pre><code>&lt;template&gt;   &lt;el-upload     drag     multiple     :auto-upload="true"     :http-request="checkedFile"     :before-remove="removeFile"     :limit="10"     action="/"   &gt;     &lt;i class="el-icon-upload"&gt;&lt;/i&gt;     &lt;div class="el-upload__text"&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;   &lt;/el-upload&gt; &lt;/template&gt; &lt;script&gt; import axios from 'axios' export default {   data () {     return {       maxSize: 5 * 1024 * 1024 * 1024, // 上传最大文件限制       multiUploadSize: 500 * 1024 * 1024, // 大于这个大小的文件使用分块上传(后端可以支持断点续传)       eachSize: 500 * 1024 * 1024, // 每块文件大小       requestCancelQueue: [], // 请求方法队列（调用取消上传     }   },   mounted () {   },   methods: {     async checkedFile (options) {       const { maxSize, multiUploadSize, getSize, splitUpload, singleUpload } = this       const { file, onProgress, onSuccess, onError } = options       if (file.size &gt; maxSize) {         return this.$message({           message: `您选择的文件大于${getSize(maxSize)}`,           type: 'error'         })       }       const uploadFunc = file.size &gt; multiUploadSize ? splitUpload : singleUpload       try {         await uploadFunc(file, onProgress)         this.$message({           message: '上传成功',           type: 'success'         })         onSuccess()       } catch (e) {         console.error(e)         this.$message({           message: e.message,           type: 'error'         })         onError()       }       const prom = new Promise((resolve, reject) =&gt; {})       prom.abort = () =&gt; {}       return prom     },     // 格式化文件大小显示文字     getSize (size) {       return size &gt; 1024         ? size / 1024 &gt; 1024           ? size / (1024 * 1024) &gt; 1024             ? (size / (1024 * 1024 * 1024)).toFixed(2) + 'GB'             : (size / (1024 * 1024)).toFixed(2) + 'MB'           : (size / 1024).toFixed(2) + 'KB'         : (size).toFixed(2) + 'B'     },     // 单文件直接上传     singleUpload (file, onProgress) {       return this.postFile({ file, uid: file.uid, fileName: file.fileName }, onProgress)     },     // 大文件分块上传     splitUpload (file, onProgress) {       return new Promise(async (resolve, reject) =&gt; {         try {           const { eachSize } = this           const chunks = Math.ceil(file.size / eachSize)           const fileChunks = await this.splitFile(file, eachSize, chunks)           let currentChunk = 0           for (let i = 0; i &lt; fileChunks.length; i++) {             // 服务端检测已经上传到第currentChunk块了，那就直接跳到第currentChunk块，实现断点续传             console.log(currentChunk, i)             if (Number(currentChunk) === i) {               // 每块上传完后则返回需要提交的下一块的index               currentChunk = await this.postFile({                 chunked: true,                 chunk: i,                 chunks,                 eachSize,                 fileName: file.name,                 fullSize: file.size,                 uid: file.uid,                 file: fileChunks[i]               }, onProgress)             }           }           const isValidate = await this.validateFile({             chunks: fileChunks.length,             fileName: file.name,             fullSize: file.size,             uid: file.uid           })           if (!isValidate) {             throw new Error('文件校验异常')           }           resolve()         } catch (e) {           reject(e)         }       })     },     // 文件分块,利用Array.prototype.slice方法     splitFile (file, eachSize, chunks) {       return new Promise((resolve, reject) =&gt; {         try {           setTimeout(() =&gt; {             const fileChunk = []             for (let chunk = 0; chunks &gt; 0; chunks--) {               fileChunk.push(file.slice(chunk, chunk + eachSize))               chunk += eachSize             }             resolve(fileChunk)           }, 0)         } catch (e) {           console.error(e)           reject(new Error('文件切块发生错误'))         }       })     },     removeFile (file) {       this.requestCancelQueue[file.uid]()       delete this.requestCancelQueue[file.uid]       return true     },     // 提交文件方法,将参数转换为FormData, 然后通过axios发起请求     postFile (param, onProgress) {       const formData = new FormData()       for (let p in param) {         formData.append(p, param<div class="section-content"></p></div><p>)       }       const { requestCancelQueue } = this       const config = {         cancelToken: new axios.CancelToken(function executor (cancel) {           if (requestCancelQueue[param.uid]) {             requestCancelQueue[param.uid]()             delete requestCancelQueue[param.uid]           }           requestCancelQueue[param.uid] = cancel         }),         onUploadProgress: e =&gt; {           if (param.chunked) {             e.percent = Number(((((param.chunk * (param.eachSize - 1)) + (e.loaded)) / param.fullSize) * 100).toFixed(2))           } else {             e.percent = Number(((e.loaded / e.total) * 100).toFixed(2))           }           onProgress(e)         }       }       return axios.post('http://localhost:8888', formData, config).then(rs =&gt; rs.data)     },     // 文件校验方法     validateFile (file) {       return axios.post('http://localhost:8888/validateFile', file).then(rs =&gt; rs.data)     }   } } &lt;/script&gt;</code></pre> <p>转载请注明出处蟹蟹</p> </div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2522.htm">Python 实现走迷宫深度优先回溯算法（优质代码）</a></p>
                                        <p>下一个：<a href="/html/category/article-2524.htm">Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2546.htm" title="SpringBoot整合 &#8211; 依赖以及配置文件">SpringBoot整合 &#8211; 依赖以及配置文件</a></li>
                        <li class="py-2"><a href="/html/category/article-2503.htm" title="Python实现学生管理系统">Python实现学生管理系统</a></li>
                        <li class="py-2"><a href="/html/category/article-2489.htm" title="Hyperledger Fabric无系统通道启动及通道的创建和删除">Hyperledger Fabric无系统通道启动及通道的创建和删除</a></li>
                        <li class="py-2"><a href="/html/category/article-2485.htm" title="PDB调试方法">PDB调试方法</a></li>
                        <li class="py-2"><a href="/html/category/article-2476.htm" title="Shiro介绍及解析">Shiro介绍及解析</a></li>
                        <li class="py-2"><a href="/html/category/article-2487.htm" title="Python Module_subprocess子进程(程序调用)">Python Module_subprocess子进程(程序调用)</a></li>
                        <li class="py-2"><a href="/html/category/article-2495.htm" title="js中数组常用遍历，VUE 中数组常用遍历">js中数组常用遍历，VUE 中数组常用遍历</a></li>
                        <li class="py-2"><a href="/html/category/article-2524.htm" title="Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具">Django学习——图书管理系统图书修改、orm常用和非常用字段（了解）、 orm字段参数（了解）、字段关系（了解）、手动创建第三张表、Meta元信息、原生SQL、Django与ajax(入门)_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-2840.htm" title="MySQL 表数据多久刷一次盘">MySQL 表数据多久刷一次盘</a></li>
                        <li class="py-2"><a href="/html/category/article-2483.htm" title="setTimeout、Promise、Async/Await 的区别">setTimeout、Promise、Async/Await 的区别</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>