<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2333.htm" />
<title>docker-compose部署etcd 集群 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">docker-compose部署etcd 集群</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>docker-compose单机搭建etcd 集群</h3> <ul> <li><a href="#dockercomposeyml_1" rel="nofollow">编写docker-compose.yml</a></li> <li><a href="#dockercompose_86" rel="nofollow">运行docker-compose</a></li> <li><a href="#_102" rel="nofollow">检查搭建状态</a></li> <li> <ul> <li><a href="#_103" rel="nofollow">查看节点启动情况</a></li> <li><a href="#_111" rel="nofollow">查看挂载的数据卷</a></li> </ul> </li> <li><a href="#_139" rel="nofollow">测试节点</a></li> <li> <ul> <li><a href="#etcd1key_140" rel="nofollow">从etcd1写一个key</a></li> <li><a href="#etcd2value_148" rel="nofollow">从etcd2读一个value</a></li> </ul> </li> <li><a href="#Golang__etcd__158" rel="nofollow">Golang 与 etcd 简单交互</a></li> </ul> </div> <h1> <a id="dockercomposeyml_1" rel="nofollow"></a>编写docker-compose.yml</h1> <pre><code class="prism language-bash">version: <span class="token string">"3.0"</span>  networks:   etcd-net:           <span class="token comment"># 网络</span>     driver: bridge    <span class="token comment"># 桥接模式</span>  volumes:   etcd1_data:         <span class="token comment"># 挂载到本地的数据卷名</span>     driver: <span class="token builtin class-name">local</span>   etcd2_data:     driver: <span class="token builtin class-name">local</span>   etcd3_data:     driver: <span class="token builtin class-name">local</span> <span class="token comment">###</span> <span class="token comment">### etcd 其他环境配置见：https://doczhcn.gitbook.io/etcd/index/index-1/configuration</span> <span class="token comment">###</span> services:   etcd1:     image: bitnami/etcd:latest  <span class="token comment"># 镜像</span>     container_name: etcd1       <span class="token comment"># 容器名 --name</span>     restart: always             <span class="token comment"># 总是重启</span>     networks:       - etcd-net                <span class="token comment"># 使用的网络 --network</span>     ports:                      <span class="token comment"># 端口映射 -p</span>       - <span class="token string">"20000:2379"</span>       - <span class="token string">"20001:2380"</span>     environment:                <span class="token comment"># 环境变量 --env</span>       - <span class="token assign-left variable">ALLOW_NONE_AUTHENTICATION</span><span class="token operator">=</span>yes                       <span class="token comment"># 允许不用密码登录</span>       - <span class="token assign-left variable">ETCD_NAME</span><span class="token operator">=</span>etcd1                                     <span class="token comment"># etcd 的名字</span>       - <span class="token assign-left variable">ETCD_INITIAL_ADVERTISE_PEER_URLS</span><span class="token operator">=</span>http://etcd1:2380  <span class="token comment"># 列出这个成员的伙伴 URL 以便通告给集群的其他成员</span>       - <span class="token assign-left variable">ETCD_LISTEN_PEER_URLS</span><span class="token operator">=</span>http://0.0.0.0:2380           <span class="token comment"># 用于监听伙伴通讯的URL列表</span>       - <span class="token assign-left variable">ETCD_LISTEN_CLIENT_URLS</span><span class="token operator">=</span>http://0.0.0.0:2379         <span class="token comment"># 用于监听客户端通讯的URL列表</span>       - <span class="token assign-left variable">ETCD_ADVERTISE_CLIENT_URLS</span><span class="token operator">=</span>http://etcd1:2379        <span class="token comment"># 列出这个成员的客户端URL，通告给集群中的其他成员</span>       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_TOKEN</span><span class="token operator">=</span>etcd-cluster             <span class="token comment"># 在启动期间用于 etcd 集群的初始化集群记号</span>       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER</span><span class="token operator">=</span>etcd1<span class="token operator">=</span>http://etcd1:2380,etcd2<span class="token operator">=</span>http://etcd2:2380,etcd3<span class="token operator">=</span>http://etcd3:2380 <span class="token comment"># 为启动初始化集群配置</span>       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_STATE</span><span class="token operator">=</span>new                      <span class="token comment"># 初始化集群状态</span>     volumes:       - etcd1_data:/bitnami/etcd                            <span class="token comment"># 挂载的数据卷</span>    etcd2:     image: bitnami/etcd:latest     container_name: etcd2     restart: always     networks:       - etcd-net     ports:       - <span class="token string">"20002:2379"</span>       - <span class="token string">"20003:2380"</span>     environment:       - <span class="token assign-left variable">ALLOW_NONE_AUTHENTICATION</span><span class="token operator">=</span>yes       - <span class="token assign-left variable">ETCD_NAME</span><span class="token operator">=</span>etcd2       - <span class="token assign-left variable">ETCD_INITIAL_ADVERTISE_PEER_URLS</span><span class="token operator">=</span>http://etcd2:2380       - <span class="token assign-left variable">ETCD_LISTEN_PEER_URLS</span><span class="token operator">=</span>http://0.0.0.0:2380       - <span class="token assign-left variable">ETCD_LISTEN_CLIENT_URLS</span><span class="token operator">=</span>http://0.0.0.0:2379       - <span class="token assign-left variable">ETCD_ADVERTISE_CLIENT_URLS</span><span class="token operator">=</span>http://etcd2:2379       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_TOKEN</span><span class="token operator">=</span>etcd-cluster       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER</span><span class="token operator">=</span>etcd1<span class="token operator">=</span>http://etcd1:2380,etcd2<span class="token operator">=</span>http://etcd2:2380,etcd3<span class="token operator">=</span>http://etcd3:2380       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_STATE</span><span class="token operator">=</span>new     volumes:       - etcd2_data:/bitnami/etcd    etcd3:     image: bitnami/etcd:latest     container_name: etcd3     restart: always     networks:       - etcd-net     ports:       - <span class="token string">"20004:2379"</span>       - <span class="token string">"20005:2380"</span>     environment:       - <span class="token assign-left variable">ALLOW_NONE_AUTHENTICATION</span><span class="token operator">=</span>yes       - <span class="token assign-left variable">ETCD_NAME</span><span class="token operator">=</span>etcd3       - <span class="token assign-left variable">ETCD_INITIAL_ADVERTISE_PEER_URLS</span><span class="token operator">=</span>http://etcd3:2380       - <span class="token assign-left variable">ETCD_LISTEN_PEER_URLS</span><span class="token operator">=</span>http://0.0.0.0:2380       - <span class="token assign-left variable">ETCD_LISTEN_CLIENT_URLS</span><span class="token operator">=</span>http://0.0.0.0:2379       - <span class="token assign-left variable">ETCD_ADVERTISE_CLIENT_URLS</span><span class="token operator">=</span>http://etcd3:2379       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_TOKEN</span><span class="token operator">=</span>etcd-cluster       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER</span><span class="token operator">=</span>etcd1<span class="token operator">=</span>http://etcd1:2380,etcd2<span class="token operator">=</span>http://etcd2:2380,etcd3<span class="token operator">=</span>http://etcd3:2380       - <span class="token assign-left variable">ETCD_INITIAL_CLUSTER_STATE</span><span class="token operator">=</span>new     volumes:       - etcd3_data:/bitnami/etcd </code></pre> <h1> <a id="dockercompose_86" rel="nofollow"></a>运行docker-compose</h1> <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># tree</span> <span class="token builtin class-name">.</span> └── docker-compose.yml  <span class="token number">0</span> directories, <span class="token number">1</span> <span class="token function">file</span> <span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># docker-compose up -d</span> <span class="token punctuation">[</span>+<span class="token punctuation">]</span> Running <span class="token number">4</span>/4  ⠿ Network etcdtest_etcd-net  Created                                                                                                                                 <span class="token number">0</span>.1s  ⠿ Container etcd3            Started                                                                                                                                 <span class="token number">0</span>.6s  ⠿ Container etcd1            Started                                                                                                                                 <span class="token number">0</span>.7s  ⠿ Container etcd2            Started                                                                                                                                 <span class="token number">0</span>.7s <span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># </span> </code></pre> <h1> <a id="_102" rel="nofollow"></a>检查搭建状态</h1> <h2> <a id="_103" rel="nofollow"></a>查看节点启动情况</h2> <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># docker ps</span> CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                      NAMES 89469f98491f   bitnami/etcd:latest   <span class="token string">"/opt/bitnami/script…"</span>   <span class="token number">54</span> seconds ago   Up <span class="token number">53</span> seconds   <span class="token number">0.0</span>.0.0:20004-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, :::20004-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, <span class="token number">0.0</span>.0.0:20005-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp, :::20005-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp   etcd3 5454f5a719a2   bitnami/etcd:latest   <span class="token string">"/opt/bitnami/script…"</span>   <span class="token number">54</span> seconds ago   Up <span class="token number">53</span> seconds   <span class="token number">0.0</span>.0.0:20000-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, :::20000-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, <span class="token number">0.0</span>.0.0:20001-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp, :::20001-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp   etcd1 bf989f9512b5   bitnami/etcd:latest   <span class="token string">"/opt/bitnami/script…"</span>   <span class="token number">54</span> seconds ago   Up <span class="token number">53</span> seconds   <span class="token number">0.0</span>.0.0:20002-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, :::20002-<span class="token operator">&gt;</span><span class="token number">2379</span>/tcp, <span class="token number">0.0</span>.0.0:20003-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp, :::20003-<span class="token operator">&gt;</span><span class="token number">2380</span>/tcp   etcd2 </code></pre> <h2> <a id="_111" rel="nofollow"></a>查看挂载的数据卷</h2> <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span> DRIVER    VOLUME NAME <span class="token builtin class-name">local</span>     etcdtest_etcd1_data <span class="token builtin class-name">local</span>     etcdtest_etcd2_data <span class="token builtin class-name">local</span>     etcdtest_etcd3_data  </code></pre> <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># docker inspect etcd1 </span>  <span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{<!-- --></span>         <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,         <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"etcdtest_etcd1_data"</span>,         <span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/etcdtest_etcd1_data/_data"</span>,         <span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"/bitnami/etcd"</span>,         <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,         <span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">"z"</span>,         <span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,         <span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span> <span class="token punctuation">]</span>  </code></pre> <h1> <a id="_139" rel="nofollow"></a>测试节点</h1> <h2> <a id="etcd1key_140" rel="nofollow"></a>从etcd1写一个key</h2> <pre><code class="prism language-bash"><span class="token punctuation">[</span>root@centos8 etcdtest<span class="token punctuation">]</span><span class="token comment"># docker exec -it etcd1 bash</span> I have no name<span class="token operator">!</span>@5454f5a719a2:/opt/bitnami/etcd$ etcdctl put name <span class="token string">"i am wxf"</span> OK </code></pre> <h2> <a id="etcd2value_148" rel="nofollow"></a>从etcd2读一个value</h2> <pre><code class="prism language-bash"><span class="token punctuation">[</span>wxf@centos8 ~<span class="token punctuation">]</span>$ docker <span class="token builtin class-name">exec</span> -it etcd2 <span class="token function">bash</span> I have no name<span class="token operator">!</span>@bf989f9512b5:/opt/bitnami/etcd$ etcdctl get name name i am wxf </code></pre> <p>搭建成功！</p> <h1> <a id="Golang__etcd__158" rel="nofollow"></a>Golang 与 etcd 简单交互</h1> <pre><code class="prism language-bash">package main  <span class="token function">import</span> <span class="token punctuation">(</span> 	<span class="token string">"context"</span> 	<span class="token string">"fmt"</span> 	<span class="token string">"go.etcd.io/etcd/client/v3"</span> 	<span class="token string">"time"</span> <span class="token punctuation">)</span>  func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	cli, err :<span class="token operator">=</span> clientv3.New<span class="token punctuation">(</span>clientv3.Config<span class="token punctuation">{<!-- --></span> 		Endpoints:   <span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">{<!-- --></span><span class="token string">"http://192.168.135.10:20000"</span>, <span class="token string">"http://192.168.135.10:20002"</span>, <span class="token string">"http://192.168.135.10:20004"</span><span class="token punctuation">}</span>, 		DialTimeout: <span class="token number">5</span> * time.Second, 	<span class="token punctuation">}</span><span class="token punctuation">)</span> 	<span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"connect to etcd failed, err:%v<span class="token entity" title="\n">\n</span>"</span>, err<span class="token punctuation">)</span> 		<span class="token builtin class-name">return</span> 	<span class="token punctuation">}</span> 	defer cli.Close<span class="token punctuation">(</span><span class="token punctuation">)</span> 	fmt.Println<span class="token punctuation">(</span><span class="token string">"connect to etcd success"</span><span class="token punctuation">)</span> 	defer cli.Close<span class="token punctuation">(</span><span class="token punctuation">)</span>  	go Watch<span class="token punctuation">(</span>cli<span class="token punctuation">)</span>  	Create<span class="token punctuation">(</span>cli<span class="token punctuation">)</span> 	Read<span class="token punctuation">(</span>cli<span class="token punctuation">)</span> 	Delete<span class="token punctuation">(</span>cli<span class="token punctuation">)</span> 	Update<span class="token punctuation">(</span>cli<span class="token punctuation">)</span> 	<span class="token keyword">select</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> <span class="token punctuation">}</span>  func Watch<span class="token punctuation">(</span>cli *clientv3.Client<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	rch :<span class="token operator">=</span> cli.Watch<span class="token punctuation">(</span>context.Background<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">"name"</span><span class="token punctuation">)</span> // <span class="token builtin class-name">type</span> WatchChan <span class="token operator">&lt;</span>-chan WatchResponse 	<span class="token keyword">for</span> wresp :<span class="token operator">=</span> range rch <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">for</span> _, ev :<span class="token operator">=</span> range wresp.Events <span class="token punctuation">{<!-- --></span> 			fmt.Printf<span class="token punctuation">(</span><span class="token string">"Type: %s Key:%s Value:%s<span class="token entity" title="\n">\n</span>"</span>, ev.Type, ev.Kv.Key, ev.Kv.Value<span class="token punctuation">)</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> 	fmt.Println<span class="token punctuation">(</span><span class="token string">"out"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  func Create<span class="token punctuation">(</span>cli *clientv3.Client<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	// put 	ctx, cancel :<span class="token operator">=</span> context.WithTimeout<span class="token punctuation">(</span>context.Background<span class="token punctuation">(</span><span class="token punctuation">)</span>, time.Second*5<span class="token punctuation">)</span> 	_, err :<span class="token operator">=</span> cli.Put<span class="token punctuation">(</span>ctx, <span class="token string">"name"</span>, <span class="token string">"wxf"</span><span class="token punctuation">)</span> 	cancel<span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"put to etcd failed, err:%v<span class="token entity" title="\n">\n</span>"</span>, err<span class="token punctuation">)</span> 		<span class="token builtin class-name">return</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  func Read<span class="token punctuation">(</span>cli *clientv3.Client<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	//get 	ctx, cancel :<span class="token operator">=</span> context.WithTimeout<span class="token punctuation">(</span>context.Background<span class="token punctuation">(</span><span class="token punctuation">)</span>, time.Second*5<span class="token punctuation">)</span> 	resp, err :<span class="token operator">=</span> cli.Get<span class="token punctuation">(</span>ctx, <span class="token string">"name"</span><span class="token punctuation">)</span> 	cancel<span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"get from etcd failed, err:%v<span class="token entity" title="\n">\n</span>"</span>, err<span class="token punctuation">)</span> 		<span class="token builtin class-name">return</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">for</span> _, ev :<span class="token operator">=</span> range resp.Kvs <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"Type: %s Key:%s Value:%s<span class="token entity" title="\n">\n</span>"</span>, <span class="token string">"READ"</span>, ev.Key, ev.Value<span class="token punctuation">)</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  func Update<span class="token punctuation">(</span>cli *clientv3.Client<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	// put 	ctx, cancel :<span class="token operator">=</span> context.WithTimeout<span class="token punctuation">(</span>context.Background<span class="token punctuation">(</span><span class="token punctuation">)</span>, time.Second*5<span class="token punctuation">)</span> 	_, err :<span class="token operator">=</span> cli.Put<span class="token punctuation">(</span>ctx, <span class="token string">"name"</span>, <span class="token string">"xyy"</span><span class="token punctuation">)</span> 	cancel<span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"put to etcd failed, err:%v<span class="token entity" title="\n">\n</span>"</span>, err<span class="token punctuation">)</span> 		<span class="token builtin class-name">return</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  func Delete<span class="token punctuation">(</span>cli *clientv3.Client<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	//del 	ctx, cancel :<span class="token operator">=</span> context.WithTimeout<span class="token punctuation">(</span>context.Background<span class="token punctuation">(</span><span class="token punctuation">)</span>, time.Second*5<span class="token punctuation">)</span> 	_, err :<span class="token operator">=</span> cli.Delete<span class="token punctuation">(</span>ctx, <span class="token string">"name"</span><span class="token punctuation">)</span> 	cancel<span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token keyword">if</span> err <span class="token operator">!=</span> nil <span class="token punctuation">{<!-- --></span> 		fmt.Printf<span class="token punctuation">(</span><span class="token string">"delete from etcd failed, err:%v<span class="token entity" title="\n">\n</span>"</span>, err<span class="token punctuation">)</span> 		<span class="token builtin class-name">return</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <pre><code class="prism language-bash">go run main.go  connect to etcd success Type: PUT Key:name Value:wxf Type: READ Key:name Value:wxf Type: DELETE Key:name Value: Type: PUT Key:name Value:xyy Type: PUT Key:name Value:test <span class="token keyword">for</span> terminal Type: PUT Key:name Value:test <span class="token keyword">for</span> terminal aabbccdd </code></pre> <pre><code class="prism language-bash">I have no name<span class="token operator">!</span>@5454f5a719a2:/opt/bitnami/etcd$ etcdctl put name <span class="token string">"test for terminal"</span> OK I have no name<span class="token operator">!</span>@5454f5a719a2:/opt/bitnami/etcd$ etcdctl put name <span class="token string">"test for terminal aabbccdd"</span> OK </code></pre> </p></div> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2332.htm">vue项目中package.json中的版本号</a></p>
                                        <p>下一个：<a href="/html/category/article-2334.htm">利用JavaScript实现秒表功能</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-2500.htm" title="JavaScript 进阶第二章（循环结构 ）">JavaScript 进阶第二章（循环结构 ）</a></li>
                        <li class="py-2"><a href="/html/category/article-2518.htm" title="vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)">vue项目几个比较好的实践(路由模块化，打包dll优化，vuex)</a></li>
                        <li class="py-2"><a href="/html/category/article-2839.htm" title="springboot之依赖版本管理">springboot之依赖版本管理</a></li>
                        <li class="py-2"><a href="/html/category/article-3439.htm" title="PYQT5(13)-基本窗口控件-拖曳与剪贴板">PYQT5(13)-基本窗口控件-拖曳与剪贴板</a></li>
                        <li class="py-2"><a href="/html/category/article-4139.htm" title="经典汉诺塔（Java实现）">经典汉诺塔（Java实现）</a></li>
                        <li class="py-2"><a href="/html/category/article-3440.htm" title="IDEA工程-数据库连接-mysql连接">IDEA工程-数据库连接-mysql连接</a></li>
                        <li class="py-2"><a href="/html/category/article-2499.htm" title="我们如何解析Java中的嵌套JSON对象？">我们如何解析Java中的嵌套JSON对象？</a></li>
                        <li class="py-2"><a href="/html/category/article-2502.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                        <li class="py-2"><a href="/html/category/article-2515.htm" title="Java中Stack.peek()与Stack.pop()与Queue.poll的区别">Java中Stack.peek()与Stack.pop()与Queue.poll的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-2490.htm" title="Semaphore的工作原理及实例">Semaphore的工作原理及实例</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>