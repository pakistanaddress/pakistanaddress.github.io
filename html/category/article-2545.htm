<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2545.htm" />
<title>Metalama简介2.利用Aspect在编译时进行消除重复代码 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/website/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/website/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/website/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/website/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="/assets/website/css/style.css">
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Metalama简介2.利用Aspect在编译时进行消除重复代码</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<p>上文介绍到<code>Aspect</code>是<code>Metalama</code>的核心概念，它本质上是一个编译时的AOP切片。下面我们就来系统说明一下<code>Metalama</code>中的<code>Aspect</code>。<br />Metalama简介1. 不止是一个.NET跨平台的编译时AOP框架</p> <h1 id="本文讲些什么">本文讲些什么</h1> <ol> <li>关于Metalama中Aspect的基础</li> <li>一些关于Aspect的示例，最终目的是通过本篇的介绍，将在编译时自动为类型添加<code>INotifyPropertyChanged</code>，实现如下效果: <ol> <li>自动添加接口</li> <li>自动添加接口实现</li> <li>改写属性的set和get</li> </ol> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/012322e6bdb1b4a570d0ef9cda531134.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> <h1 id="关于aspect">关于Aspect</h1> <p>在前面的文章中我们已经介绍了使用<code>Metalama</code>编写简单的AOP。但是例子过于简单，也只是在代码前后加了两个<code>Console.WriteLine</code>，并没有太大的实际参考意义。下面我就以几个实际例子，来体现<code>Metalama</code>在复用代码方面的好处。<br /> 对于<code>Metalama</code>中的<code>Aspect</code>分为以下两种API</p> <p><strong>1.Aspect基础API</strong></p> <ul> <li>TypeAspect 对类型进行编译时代码插入,见示例3</li> <li>MethodAspect</li> <li>PropertyAspect</li> <li>ParameterAspect</li> <li>EventAspect</li> <li>FieldAspect</li> <li>FieldOrPropertyAspect</li> <li>ConstructorAspect</li> </ul> <p><strong>2.Override API（重写式API）</strong></p> <p>重写试API使用更方便、更直观,与上面基础API等价，但是更容易使用</p> <ul> <li>OverrideMethodAspect 对方法进行编译时代码插入，请见下面示例1</li> <li>OverrideFieldOrPropertyAspect 对字段或属性进行编译时代码插入，请见下面示例2</li> <li>OverrideEventAspect 对事件进行编译时插入代码</li> </ul> <p>以<code>MethodAspect</code> 和<code>OverrideMethodAspect</code> 为例，以下代码等价。</p> <p><strong>基础API MethodAspect</strong></p> <pre><code class="language-C#">    public class LogAttribute : MethodAspect     {         public override void BuildAspect(IAspectBuilder<IMethod> builder)         {            // 为方法添加重写            builder.Advices.OverrideMethod(builder.Target,nameof(this.MethodLog));         }         [Template]// 这个Template必须要加         public dynamic MethodLog()         {             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 开始运行.");             var result = meta.Proceed();             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 结束运行.");             return result;         }     }</code></pre> <p><strong>Override API</strong></p> <pre><code class="language-C#">    public class LogAttribute : OverrideMethodAspect     {         public override dynamic? OverrideMethod()         {             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 开始运行.");             var result = meta.Proceed();             Console.WriteLine(meta.Target.Method.ToDisplayString() + " 结束运行.");             return result;         }     }</code></pre> <p>下面针对各种情况举一些试例。<br /> 根据每个例子的不同也分别介绍如何对方法、字段、属性进行重写。</p> <h1 id="关于meta类">关于meta类</h1> <p>通过上面的示例我们可以看到，无论是在<code>基础API</code>中还是<code>Override API</code>中，在定义AOP方法时，都使用到了<code>meta</code>。<code>meta</code>是一个方便在<code>Aspect</code>中访问当前AOP上下文的工具类<br /> 常用的成员有：</p> <table> <thead> <tr> <th>成员</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td><code>meta.Proceed()</code></td> <td>等同于执行AOP作用目标直接执行，例如方法Aspect中就是原方法直接执行，属性的get中就是获取值，属性的Set中就是赋值value</td> </tr> <tr> <td><code>meta.Target</code></td> <td>当前AOP的作用目标，如作用目标是个方法则通过<code>meta.Target.Method</code> 调用，如果目标是个属性则通过<code>meta.Target.Propery</code> 调用</td> </tr> <tr> <td><code>meta.This</code></td> <td>等同于使用在AOP作用目标中的<code>this</code>，例如可以用于获取AOP目标所在类的其它属性，方法</td> </tr> <tr> <td><code>meta.ThisStatic</code></td> <td>用于访问AOP作用目标中的静态类型</td> </tr> </tbody> </table> <h1 id="示例1对方法实现一个重试n次的功能">示例1对方法：实现一个重试N次的功能</h1> <p>在平时的代码中，有这种场景，例如，我<strong>调用一个方法或API</strong>，他有一定的概率失败，例如发生了<strong>网络异常</strong>，所以我们就要设定一个重试机制（以重试3次然后放弃为例）。<br /> 假设我们有一个方法，代码详见示例中的<code>RetryDemo</code>。</p> <pre><code class="language-C#">    static int _callCount;     // 此方法第一二次调用会失败，第三次会成功     static void MyMethod()     {         _callCount++;         Console.WriteLine($"当前是第{_callCount}次调用.");         if (_callCount <= 2)         {             Console.WriteLine("前两次直接抛异常:-(");             throw new TimeoutException();         }         else         {             Console.WriteLine("成功 :-)");         }     }</code></pre> <p>如果我们直接编写代码，可以使用类似以下逻辑处理。</p> <pre><code class="language-C#">        for (int i = 0; i < 3; i++)         {             try             {                 MyMethod();                 break;             }             catch (Exception ex)             {                 // Console.WriteLine(ex);             }         }</code></pre> <p>这样的话，对于不同的方法我们就会出现大量的重试逻辑。<br /> 那么使用<code>Metalama</code>我们如何进行代码改造，去掉复用代码呢。<br /> 第一步，我们需要创建一个可以修改方法的AOP的<code>Attribute</code>,如下：</p> <pre><code class="language-C#">internal class RetryAttribute : OverrideMethodAspect {     // 重试次数     public int RetryCount { get; set; } = 3;     // 应用到方法的切面模板     public override dynamic? OverrideMethod()     {         for (var i = 0; ; i++)         {             try             {                 return meta.Proceed(); // 这是实际调用方法的位置             }             catch (Exception e) when (i < this.RetryCount)             {                 Console.WriteLine($"发生异常 {e.Message.GetType().Name}. 1秒后重试.");                 Thread.Sleep(1000);             }         }     } }</code></pre> <p>这里可以看到定义这个Attribute时，使用了<code>Metalama</code>提供的基类<code>OverrideMethodAspect</code>此基类是用于为方法添加编译时切面代码的<code>Attribute</code>.<br /> 然后我们将这个<code>Attribute</code>加到方法定义上。</p> <pre><code class="language-C#">    static int _callCount;      [Retry(RetryCount = 5)]     static void MyMethod()     {         _callCount++;         Console.WriteLine($"当前是第{_callCount}次调用.");         if (_callCount <= 2)         {             Console.WriteLine("前两次直接抛异常:-(");             throw new TimeoutException();         }         else         {             Console.WriteLine("成功 :-)");         }     }</code></pre> <p>这样在编译时<code>Metalama</code>就会将代码编译为如下图所示。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5272474a2fe74a1b414a74fbec502b63.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> <p>而<code>RetryAttribute</code>编译后则会变为</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c6f0fd9439ae041ef99ff415aca02d8a.jpg" alt="Metalama简介2.利用Aspect在编译时进行消除重复代码"></p> <p>也就是会将原有的<code>OverrideMethod</code>自动实现为<code>throw new System.NotSupportedException("Compile-time-only code cannot be called at run-time.")</code>。<br /> 最终调用结果为</p> <pre><code class="language-cmd">当前是第1次调用. 前两次直接抛异常:-( 发生异常 String. 1秒后重试. 当前是第2次调用. 前两次直接抛异常:-( 发生异常 String. 1秒后重试. 当前是第3次调用. 成功 :-)</code></pre> <p>源代码：https://github.com/chsword/metalama-demo/tree/main/src/RetryDemo</p> <h1 id="示例2对属性inotifypropertychanged自动属性的实现">示例2对属性：INotifyPropertyChanged自动属性的实现</h1> <p>在很多处理逻辑中我们会用到<code>INotifyPropertyChanged</code>如我们要获取以下类的属性更改：</p> <pre><code class="language-C#">public class MyModel {     public int Id { get; set; }     public string Name { get; set; } }</code></pre> <p>我们可以这么做：</p> <pre><code class="language-C#">using System.ComponentModel; public class MyModel: INotifyPropertyChanged {     private int _id { get; set; }     public int Id {         get {             return _id;         }         set         {             if (this._id != value)             {                 this._id = value;                 this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Id"));             }         }     }     private string _name;     public string Name     {         get         {             return _name;         }         set         {             if (this._name != value)             {                 this._name = value;                 this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Name"));             }         }     }     public event PropertyChangedEventHandler? PropertyChanged; }</code></pre> <p>但是这里，要将自动属性进行展开，并产生大量字段，对于这里的重复代码，我们可以用<code>Metalama进行处理</code>，我们最终要代码实现为如下：</p> <pre><code class="language-C#">public class MyModel: INotifyPropertyChanged {     [NotifyPropertyChanged]     public int Id { get; set; }     [NotifyPropertyChanged]     public string Name { get; set; }      public event PropertyChangedEventHandler? PropertyChanged; }</code></pre> <p>当然我们也要实现<code>NotifyPropertyChangedAttribute</code>:</p> <pre><code class="language-C#">public class NotifyPropertyChangedAttribute : OverrideFieldOrPropertyAspect {     public override dynamic OverrideProperty     {         // 保留原本get的逻辑         get => meta.Proceed();         set         {             // 判断当前属性的Value与传入value是否相等             if (meta.Target.Property.Value != value)             {                 // 原本set的逻辑                 meta.Proceed();                 // 这里的This等同于调用类的This                 meta.This.PropertyChanged?.Invoke(meta.This, new PropertyChangedEventArgs(meta.Target.Property.Name));             }         }     } }</code></pre> <p>这样就可以实现上面相同的效果。</p> <p>源代码：https://github.com/chsword/metalama-demo/tree/main/src/PropertyDemo</p> <h1 id="示例3对类型进一步实现inotifypropertychanged自动属性">示例3对类型：进一步实现INotifyPropertyChanged自动属性</h1> <p>刚才对属性在编译时生成<code>INotifyPropertyChanged</code>实现的代码中，其实可以再进一步优化，<code>INotifyPropertyChanged</code>接口的实现也可以通过<code>Metalama</code>进一步省去，最终代码为：</p> <pre><code class="language-C#">[TypeNotifyPropertyChanged] public class MyModel {     public int Id { get; set; }     public string Name { get; set; } }</code></pre> <p>那么<code>TypeNotifyPropertyChangedAttribute</code>又应该怎么实现呢，Type Aspect并没有对应的Override实现，所以要使用TypeAspect。</p> <pre><code class="language-C#">internal class TypeNotifyPropertyChangedAttribute : TypeAspect {     public override void BuildAspect(IAspectBuilder<INamedType> builder)     {         // 当前类实现一个接口         builder.Advices.ImplementInterface(builder.Target, typeof(INotifyPropertyChanged));         // 获取所有符合要求的属性         var props = builder.Target.Properties.Where(p => !p.IsAbstract && p.Writeability == Writeability.All);         foreach (var property in props)         {             //用OverridePropertySetter重写属性或字段             //参数1 要重写的属性 参数2 新的get实现 参数3 新的set实现             builder.Advices.OverrideFieldOrPropertyAccessors(property, null, nameof(this.OverridePropertySetter));         }     }     // Interface 要实现什么成员     [InterfaceMember]     public event PropertyChangedEventHandler? PropertyChanged;      // 也可以没有这个方法，直接调用 meta.This 这里只是展示另一种调用方式，更加直观     [Introduce(WhenExists = OverrideStrategy.Ignore)]     protected void OnPropertyChanged(string name)     {         this.PropertyChanged?.Invoke(meta.This, new PropertyChangedEventArgs(name));     }      // 重写set的模板     [Template]     private dynamic OverridePropertySetter(dynamic value)     {         if (value != meta.Target.Property.Value)         {             meta.Proceed();             this.OnPropertyChanged(meta.Target.Property.Name);         }          return value;     } }</code></pre> <p>这样就可以实现和以上相同效果的代码，以后再添加实现<code>INotifyPropertyChanged</code>的类，只要添加以上Attribute即可。</p> <p>源代码：https://github.com/chsword/metalama-demo/tree/main/src/TypeDemo</p> <h1 id="减少代码入侵">减少代码入侵</h1> <p>上面的示例3中，其实对方法还是有一定入侵的，至少要标记一个Attribute，<code>Metalama</code>还提供了其它无入侵的方式来为类或方法添加<code>Aspect</code>，我们将在后面来介绍。</p> <p>先上个代码</p> <pre><code class="language-C#">internal class Fabric : ProjectFabric {     public override void AmendProject(IProjectAmender amender)     {         // 添加 TypeNotifyPropertyChangedAttribute 到符合规则的类上         // 当前筛选以 Model 结尾的本项目中的类型添加 TypeNotifyPropertyChangedAttribute          amender.WithTargetMembers(c =>             c.Types.Where(t => t.Name.EndsWith("Model"))             ).AddAspect(t => new TypeNotifyPropertyChangedAttribute());     } }</code></pre> <h1 id="调试">调试</h1> <p>调试 Aspect 的<code>Attribute</code>时，尚不能使用断点直接调试，但可以通过以下方法：<br /> 在编译配置中除<code>Debug</code>或<code>Release</code>外还有一个<code>LamaDebug</code>。选择使用<code>LamaDebug</code>即可直接对<code>Metalama</code>的项目进行调试。</p> <ol> <li>在编译时就会调用的内容中，如BuildAspect,使用<code>System.Diagnostics.Debugger.Break()</code>.</li> <li>在Template方法或Override中, 使用<code>meta.DebugBreak</code>。</li> </ol> <p>如果是想以附加进程等方式添加断点调试，可以参考官方文档https://doc.metalama.net/aspects/debugging-aspects</p> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2528.htm">算法：在一个集合中选取所有符合条件的元素组合</a></p>
                                        <p>下一个：<a href="/html/category/article-2546.htm">SpringBoot整合 &#8211; 依赖以及配置文件</a></p>
                                    </div>
                                <div class="panel panel-default mt-5">
                    <div class="panel-heading">
                        <h3 class="m-0">推荐文章</h3>
                    </div>
                    <div class="panel-body">
                        <ul class="p-0 x-0">
                                                        <li class="py-2"><a href="/html/category/article-2463.htm">vue项目 v-for循环数据，鼠标移入移出改变颜色</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2431.htm">spring中jdbcTemplate.batchUpdate的几种使用情况_java</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2404.htm">Android开发基础——Fragment</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2397.htm">Spring Boot运行原理</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2388.htm">spring boot 基础学习 &#8211; thymeleaf页面模板技术</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2377.htm">远程调用RestTemplate</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2360.htm">feign.RetryableException: Read timed out executing&#8212;SpringCloud组件Feign连接超时处理</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2288.htm">机器学习基础：奇异值分解（SVD）</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2271.htm">前端文件上传核心思想详解</a></li>
                                                        <li class="py-2"><a href="/html/category/article-2258.htm">一文搞懂js中的typeof用法_在线工具</a></li>
                                                    </ul>
                    </div>
                </div>
                            </div>
            <div class="col-md-3">
                
<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-9528.htm" title="动物疫苗批发需要冷库吗（动物疫苗批发需要冷库吗知乎）">动物疫苗批发需要冷库吗（动物疫苗批发需要冷库吗知乎）</a></li>
                        <li class="py-2"><a href="/html/category/article-10034.htm" title="上海免费领养宠物的平台是哪个（上海地区宠物领养）">上海免费领养宠物的平台是哪个（上海地区宠物领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-10126.htm" title="福建农林动物医学专业怎么样（福建农林动物医学专业怎么样知乎）">福建农林动物医学专业怎么样（福建农林动物医学专业怎么样知乎）</a></li>
                        <li class="py-2"><a href="/html/category/article-10172.htm" title="我的奇怪朋友王一博cut（不看后悔）王一博我的奇怪朋友第一季，佟林，我的奇怪朋友，">我的奇怪朋友王一博cut（不看后悔）王一博我的奇怪朋友第一季，佟林，我的奇怪朋友，</a></li>
                        <li class="py-2"><a href="/html/category/article-9575.htm" title="在哪里免费领养边牧 在哪里免费领养边牧狗">在哪里免费领养边牧 在哪里免费领养边牧狗</a></li>
                        <li class="py-2"><a href="/html/category/article-9345.htm" title="广州宠物领养中心在哪里有 广州宠物领养中心在哪里有啊">广州宠物领养中心在哪里有 广州宠物领养中心在哪里有啊</a></li>
                        <li class="py-2"><a href="/html/category/article-9989.htm" title="猫咪领养协议模板简单一点（领养猫的协议是什么样的）">猫咪领养协议模板简单一点（领养猫的协议是什么样的）</a></li>
                        <li class="py-2"><a href="/html/category/article-9666.htm" title="宠物粮在哪里批发好一点（宠物粮在哪里买比较放心）">宠物粮在哪里批发好一点（宠物粮在哪里买比较放心）</a></li>
                        <li class="py-2"><a href="/html/category/article-9759.htm" title="动物防疫站疫苗多少钱一次啊图片及价格（动物防疫站疫苗多少钱一次啊图片及价格表）">动物防疫站疫苗多少钱一次啊图片及价格（动物防疫站疫苗多少钱一次啊图片及价格表）</a></li>
                        <li class="py-2"><a href="/html/category/article-10311.htm" title="花鼠明星俱乐部（花鼠能长多大）">花鼠明星俱乐部（花鼠能长多大）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/website/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>