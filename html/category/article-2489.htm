<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://pakistanaddress.github.io/html/category/article-2489.htm" />
<title>Hyperledger Fabric无系统通道启动及通道的创建和删除 - Pakistan Address</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/assets/addons/xcblog/img/pakistanaddress/favicon.ico" type="image/x-icon"/>
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/addons/xcblog/css/pakistanaddress/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/addons/xcblog/css/pakistanaddress/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/addons/xcblog/js/frontend/pakistanaddress/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?21f4e50ed805b3a1bd1374e6b345c04a";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Pakistan Address</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/html/category/">文章分类</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Hyperledger Fabric无系统通道启动及通道的创建和删除</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/html/category/">文章分类</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                <div class="wthree_single_grid1">
                      				  				  				<h2 id="前言">前言</h2> <p>在Hyperledger Fabric组织的动态添加和删除中，我们已经完成了在运行着的网络中动态添加和删除组织，但目前为止，我们启动 orderer 节点的方式都是通过系统通道的方式，这样自带系统通道的网络很不简洁优雅。好在 Fabric 2.3 以上就开始支持无系统通道创建应用通道的功能，本文将对此功能进行详细解释和介绍，然后通过无系统通道的方式启动联盟链网络并在此基础上完成通道的添加和删除。本实验必要的准备工作和 DNS 配置请参考准备工作。</p> <h2 id="背景介绍">背景介绍</h2> <h3 id="实验准备">实验准备</h3> <p>本文网络结构直接将Hyperledger Fabric定制联盟链网络工程实践 中创建的<code>1_3Org2Peer1Orderer1TLS</code> 复制为<code>3_RunWithNoSystemChannel</code> （建议直接将本案例仓库FabricLearn 下的<code>3_RunWithNoSystemChannel</code> 目录拷贝到本地运行）。默认情况下，所有命令皆在<code>3_RunWithNoSystemChannel</code> 根目录下执行，在开始后面的实验前按照以下命令启动基础实验网络：</p> <ol> <li>设置环境变量<code>source envpeer1soft</code></li> <li>启动CA网络<code>./0_Restart.sh</code></li> <li>注册用户<code>./1_RegisterUser.sh</code></li> <li>构造证书<code>./2_EnrollUser.sh</code></li> </ol> <p>本实验初始 docker 网络为：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0c57270956312fc73cc533feba999a4a.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="本文工作">本文工作</h3> <p>以无系统通道的方式启动 Hyperledger Fabric 网络，然后先用<code>configtxgen</code> 工具创建新通道<code>mychannel</code> 和<code>testchannel</code> ，并使用<code>osnadmin</code> 工具通过<code>orderer</code> 的<code>admin</code> 服务使<code>orderer</code> 加入这两条通道（实验代码已上传至：https://github.com/wefantasy/FabricLearn 的<code>3_RunWithNoSystemChannel</code> 下）<sup class="footnote-ref">[1]</sup>：</p> <table> <thead> <tr> <th style="text-align: center">项</th> <th style="text-align: center">运行端口</th> <th style="text-align: center">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><code>council.ifantasy.net</code></td> <td style="text-align: center">7050</td> <td style="text-align: center">council 组织的 CA 服务， 为联盟链网络提供 TLS-CA 服务</td> </tr> <tr> <td style="text-align: center"><code>orderer.ifantasy.net</code></td> <td style="text-align: center">7150</td> <td style="text-align: center">orderer 组织的 CA 服务， 为联盟链网络提供排序服务</td> </tr> <tr> <td style="text-align: center"><code>orderer1.orderer.ifantasy.net</code></td> <td style="text-align: center">7151</td> <td style="text-align: center">orderer 组织的排序服务</td> </tr> <tr> <td style="text-align: center"><code>orderer1.orderer.ifantasy.net</code></td> <td style="text-align: center">7152</td> <td style="text-align: center">orderer 组织的 ADMIN 服务</td> </tr> <tr> <td style="text-align: center"><code>soft.ifantasy.net</code></td> <td style="text-align: center">7250</td> <td style="text-align: center">soft 组织的 CA 服务， 包含成员： peer1 、 admin1</td> </tr> <tr> <td style="text-align: center"><code>peer1.soft.ifantasy.net</code></td> <td style="text-align: center">7251</td> <td style="text-align: center">soft 组织的 peer1 成员节点</td> </tr> <tr> <td style="text-align: center"><code>web.ifantasy.net</code></td> <td style="text-align: center">7350</td> <td style="text-align: center">web 组织的 CA 服务， 包含成员： peer1 、 admin1</td> </tr> <tr> <td style="text-align: center"><code>peer1.web.ifantasy.net</code></td> <td style="text-align: center">7351</td> <td style="text-align: center">web 组织的 peer1 成员节点</td> </tr> </tbody> </table> <h2 id="无系统通道启动">无系统通道启动</h2> <ol> <li>修改<code>compose/docker-base.yaml</code> 中<code>orderer-base</code> 内容为：</li> </ol> <pre><code class="language-yaml">  orderer-base:     image: hyperledger/fabric-orderer:${FABRIC_BASE_VERSION}     environment:       - ORDERER_HOME=${DOCKER_CA_PATH}/orderer       - ORDERER_GENERAL_LISTENPORT=7777       - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0       - ORDERER_GENERAL_BOOTSTRAPMETHOD=none       - ORDERER_CHANNELPARTICIPATION_ENABLED=true       # - ORDERER_GENERAL_GENESISMETHOD=file       # - ORDERER_GENERAL_GENESISFILE=${DOCKER_CA_PATH}/orderer/genesis.block       - ORDERER_GENERAL_LOCALMSPDIR=${DOCKER_CA_PATH}/orderer/msp       - ORDERER_GENERAL_LOGLEVEL=debug       - ORDERER_GENERAL_TLS_ENABLED=true       - ORDERER_GENERAL_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_GENERAL_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_GENERAL_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_ENABLED=true       - ORDERER_ADMIN_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_ADMIN_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_ADMIN_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:8888       - ORDERER_METRICS_PROVIDER=prometheus       - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9999       - ORDERER_DEBUG_BROADCASTTRACEDIR=data/logs     networks:       - ${DOCKER_NETWORKS}</code></pre> <p>相比源文件主要修改如下：</p> <ul> <li><code>ORDERER_GENERAL_GENESISMETHOD</code> ：将启动方式改为<code>none</code></li> <li><code>ORDERER_CHANNELPARTICIPATION_ENABLED</code> ：无系统通道启动，该字段必须设置为 true</li> <li>添加<code>ORDERER_ADMIN_TLS_*</code> 相关设置， 后续排序节点使用<code>osnadmin</code> 加入通道依赖于配置， 它的服务和证书与<code>ORDERER</code> 独立，可以选择其他的证书。</li> </ul> <ol start="2"> <li>修改<code>compose/docker-compose.yaml</code> 中<code>orderer-base</code> 内容为：</li> </ol> <pre><code class="language-yaml">  orderer1.orderer.ifantasy.net:     container_name: orderer1.orderer.ifantasy.net     extends:       file: docker-base.yaml       service: orderer-base     environment:       - ORDERER_HOST=orderer1.orderer.ifantasy.net       - ORDERER_GENERAL_LOCALMSPID=ordererMSP     volumes:       - ${LOCAL_CA_PATH}/orderer.ifantasy.net/registers/orderer1:${DOCKER_CA_PATH}/orderer       # - ${LOCAL_ROOT_PATH}/data/genesis.block:${DOCKER_CA_PATH}/orderer/genesis.block     ports:       - 7151:7777       - 7152:8888       - 7153:9999</code></pre> <p>相比源文件，主要添加了<code>ADMIN</code> 、<code>ORDERER_OPERATIONS_LISTENADDRESS</code> 的端口监听。</p> <ol start="3"> <li>在<code>envpeer1soft</code> 中添加<code>ORDERER ADMIN</code> 的环境变量：</li> </ol> <pre><code class="language-yaml">export ORDERER_CA=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem export ORDERER_ADMIN_TLS_SIGN_CERT=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/signcerts/cert.pem export ORDERER_ADMIN_TLS_PRIVATE_KEY=$LOCAL_CA_PATH/orderer.ifantasy.net/registers/orderer1/tls-msp/keystore/key.pem</code></pre> <ol start="4"> <li>无系统通道启动<code>orderer</code> 和<code>peer</code> 节点：</li> </ol> <pre><code class="language-bash">docker-compose -f $LOCAL_ROOT_PATH/compose/docker-compose.yaml up -d peer1.soft.ifantasy.net peer1.web.ifantasy.net orderer1.orderer.ifantasy.net</code></pre> <p>无系统通道启动成功后的容器环境：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/14eaef6e1462ea6ed4365a26f7619985.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h2 id="新建通道">新建通道</h2> <h3 id="新建通道文件">新建通道文件</h3> <p>接下来我们将创建两个通道，它们分别是<code>mychannel</code> 和<code>testchannel</code> ：</p> <pre><code class="language-bash">configtxgen -profile OrgsChannel -outputCreateChannelTx $LOCAL_ROOT_PATH/data/mychannel.tx -channelID mychannel configtxgen -profile OrgsChannel -outputBlock $LOCAL_ROOT_PATH/data/mychannel.block -channelID mychannel configtxgen -profile OrgsChannel -outputCreateChannelTx $LOCAL_ROOT_PATH/data/testchannel.tx -channelID testchannel configtxgen -profile OrgsChannel -outputBlock $LOCAL_ROOT_PATH/data/testchannel.block -channelID testchannel</code></pre> <p>在上面我们同时使用了<code>-outputCreateChannelTx</code> 和<code>-outputBlock</code> 参数创建了两个通道的<code>tx</code> 文件和<code>block</code> 文件，其中<code>block</code> 文件为加入通道时所使用的创世区块文件，可以由对应的<code>tx</code> 文件计算而来。</p> <h3 id="排序节点加入通道">排序节点加入通道</h3> <p>在排序节点加入通道前，我们可以使用以下命令查看当前的通道：</p> <pre><code class="language-bash">source envpeer1soft osnadmin channel list -o orderer1.orderer.ifantasy.net:7152 --ca-file $ORDERER_CA --client-cert $ORDERER_ADMIN_TLS_SIGN_CERT --client-key $ORDERER_ADMIN_TLS_PRIVATE_KEY</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4d6a601910c53e38c387fefcaca01d6f.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>这里的参数<code>ORDERER_CA</code> 、<code>ORDERER_ADMIN_TLS_SIGN_CERT</code> 、<code>ORDERER_ADMIN_TLS_PRIVATE_KEY</code> 必须与上面<code>compose/docker-base.yaml</code> 中的<code>ORDERER_ADMIN_TLS_*</code> 相关证书文件一致。<strong>端口必须与<code>ORDERER_ADMIN_LISTENADDRESS</code> 一致</strong>，否则可能会出现以下错误：</p> <pre><code class="language-bash">error: Get "https://orderer1.orderer.ifantasy.net:7151/participation/v1/channels": net/http: HTTP/1.x transport connection broken: malformed HTTP response "\x00\x00\x06\x04\x00\x00\x00\x00\x00\x00\x05\x00\x00@\x00"</code></pre> <p>如果没有报错，可以使用<code>osnadmin channel join</code> 根据创世区块加入通道：</p> <pre><code class="language-bash">osnadmin channel join --channelID mychannel --config-block $LOCAL_ROOT_PATH/data/mychannel.block -o orderer1.orderer.ifantasy.net:7152 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY" osnadmin channel join --channelID testchannel --config-block $LOCAL_ROOT_PATH/data/testchannel.block -o orderer1.orderer.ifantasy.net:7152 --ca-file "$ORDERER_CA" --client-cert "$ORDERER_ADMIN_TLS_SIGN_CERT" --client-key "$ORDERER_ADMIN_TLS_PRIVATE_KEY"</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/131e6e6ebe74b1edd1ade39149c0d854.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>这里<code>--config-block</code> 指向的文件必须为<code>block</code> 文件，否则可能会出现错误：</p> <pre><code class="language-bash">osnadmin: error: parsing arguments: failed to retrieve channel id - block is empty. Try --help</code></pre> <p>所有工作完成后，可以再次使用<code>osnadmin channel list</code> 命令查看已加入的通道：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fe27cd31b020cb4d039b1855ae541a67.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="节点加入通道">节点加入通道</h3> <p>节点加入通道只需要能访问通道对应的<code>block</code> 创世区块文件即可，为了方便管理，我们先将创世区块复制到各组织的公共资产目录下：</p> <pre><code class="language-bash">cp $LOCAL_ROOT_PATH/data/mychannel.block $LOCAL_CA_PATH/soft.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/mychannel.block $LOCAL_CA_PATH/web.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/testchannel.block $LOCAL_CA_PATH/soft.ifantasy.net/assets/ cp $LOCAL_ROOT_PATH/data/testchannel.block $LOCAL_CA_PATH/web.ifantasy.net/assets/</code></pre> <p>现在使 soft 组织的 peer 节点加入创建的两个通道：</p> <pre><code class="language-bash">source envpeer1soft peer channel join -b $LOCAL_CA_PATH/soft.ifantasy.net/assets/mychannel.block peer channel join -b $LOCAL_CA_PATH/soft.ifantasy.net/assets/testchannel.block peer channel list</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/27bac80246f0d07c3d3231be42cabb72.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>然后使 soft 组织的 peer 节点加入创建的两个通道：</p> <pre><code class="language-bash">source envpeer1web peer channel join -b $LOCAL_CA_PATH/web.ifantasy.net/assets/mychannel.block peer channel join -b $LOCAL_CA_PATH/web.ifantasy.net/assets/testchannel.block peer channel list</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/38529ae7503f2a9665994b038344bc8e.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h3 id="安装链码到指定通道">安装链码到指定通道</h3> <p>现在我们的网络中有 soft 和 web 两个组织，每个组织有个<code>peer1</code> 节点，每个节点都加入了<code>mychannel</code> 和<code>testchannel</code> 两个通道，如果想将链码安装到<code>testchannel</code> 通道，只需要按以下流程：</p> <ol> <li>两个组织分别安装链码：</li> </ol> <pre><code class="language-bash">source envpeer1soft # peer lifecycle chaincode package basic.tar.gz --path asset-transfer-basic/chaincode-go --label basic_1 peer lifecycle chaincode install basic.tar.gz peer lifecycle chaincode queryinstalled source envpeer1web peer lifecycle chaincode install basic.tar.gz peer lifecycle chaincode queryinstalled  export CHAINCODE_ID=basic_1:06613e463ef6694805dd896ca79634a2de36fdf019fa7976467e6e632104d718</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6c475095265b379b0ca22711d687836f.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <p>由于本项目是从Hyperledger Fabric定制联盟链网络工程实践 中复制而来，所以这里直接安装该实验中打包过的链码<code>basic.tar.gz</code> ，并且设置<code>CHAINCODE_ID</code> 为链码安装后的<code>ID</code> 。在安装时不必指定具体通道，因为安装行为是针对节点而非通道，即 将节点安装到 peer 节点。</p> <ol start="2"> <li>两个组织分别批准链码：</li> </ol> <pre><code class="language-bash">source envpeer1soft peer lifecycle chaincode approveformyorg -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA  --channelID testchannel --name basic --version 1.0 --sequence 1 --waitForEvent --init-required --package-id $CHAINCODE_ID peer lifecycle chaincode queryapproved -C testchannel -n basic --sequence 1 source envpeer1web peer lifecycle chaincode approveformyorg -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA  --channelID testchannel --name basic --version 1.0 --sequence 1 --waitForEvent --init-required --package-id $CHAINCODE_ID peer lifecycle chaincode queryapproved -C testchannel -n basic --sequence 1</code></pre> <p>若想将链码安装到<code>testchannel</code> 通道上，只需要在批准链码时指定<code>--channelID</code> 为<code>testchannel</code> 即可。此时已可以在<code>testchannel</code> 上查看到链码批准情况：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f61cb66c829012d8b161a8e148d7db82.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <ol start="3"> <li>web 组织提交链码：</li> </ol> <pre><code class="language-bash">source envpeer1web peer lifecycle chaincode commit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --init-required --version 1.0 --sequence 1 --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE peer chaincode invoke --isInit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["InitLedger"]}'</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7d230e5dd22661284e96413c0a030656.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"><br /> 4. 初始化并调用链码：</p> <pre><code class="language-bash">peer chaincode invoke --isInit -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["InitLedger"]}' sleep 5 peer chaincode invoke -o orderer1.orderer.ifantasy.net:7151 --tls --cafile $ORDERER_CA --channelID testchannel --name basic --peerAddresses peer1.soft.ifantasy.net:7251 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses peer1.web.ifantasy.net:7351 --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE -c '{"Args":["GetAllAssets"]}'</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3ae270b3b4120d92e9a2b39f4d98ac48.jpg" alt="Hyperledger Fabric无系统通道启动及通道的创建和删除"></p> <h2 id="删除通道">删除通道</h2> <p>区块链的不可篡改性注定了我们无法从网络上删除通道，只能将新数据（正常事务或配置更新）附加到区块链网络<sup class="footnote-ref">[2]</sup>。到现在我们已经讨论过了组织、节点及通道的添加和删除方式，发现 Fabric 联盟链通常对删除操作并没有提供支持。</p> <h2 id="参考">参考</h2> <hr class="footnotes-sep"/> <section class="footnotes"> <ol class="footnotes-list"> <li id="fn1" class="footnote-item"> <p>yuan1028.fabric 2.3系统通道. 简书. [2021-01-21]↩︎</p> </li> <li id="fn2" class="footnote-item"> <p>JACOB WILSON.How do you delete a channel on Hyperledger fabric?. it-qa.com. [2019-04-05]↩︎</p> </li> </ol> </section> 			                </div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/html/category/article-2488.htm">一文搞定数据库连接池，太TM简单了，收藏！！！</a></p>
                                        <p>下一个：<a href="/html/category/article-2490.htm">Semaphore的工作原理及实例</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7274.htm" title="养狗容易得什么病如何预防（养狗狗容易得什么病）">养狗容易得什么病如何预防（养狗狗容易得什么病）</a></li>
                        <li class="py-2"><a href="/html/category/article-6208.htm" title="网络迷踪是恐怖片吗（弹窗惊魂）">网络迷踪是恐怖片吗（弹窗惊魂）</a></li>
                        <li class="py-2"><a href="/html/category/article-7643.htm" title="宠物领养协议法律效力如何 宠物领养协议法律效力如何">宠物领养协议法律效力如何 宠物领养协议法律效力如何</a></li>
                        <li class="py-2"><a href="/html/category/article-6630.htm" title="动物疫苗能放冰箱吗 动物疫苗能放冰箱吗多久">动物疫苗能放冰箱吗 动物疫苗能放冰箱吗多久</a></li>
                        <li class="py-2"><a href="/html/category/article-7136.htm" title="饲料颗粒机全套设备（饲料颗粒机全套设备厂家直销）">饲料颗粒机全套设备（饲料颗粒机全套设备厂家直销）</a></li>
                        <li class="py-2"><a href="/html/category/article-6033.htm" title="塞尔达传说海拉鲁大陆（塞尔达传说海拉鲁大陆上藏匿了 900 个）">塞尔达传说海拉鲁大陆（塞尔达传说海拉鲁大陆上藏匿了 900 个）</a></li>
                        <li class="py-2"><a href="/html/category/article-7550.htm" title="大兴24小时宠物医院（大兴宠物医院电话号码）">大兴24小时宠物医院（大兴宠物医院电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-6631.htm" title="开个小型宠物食品加工厂需要多少钱 开个小型宠物食品加工厂需要多少钱呢">开个小型宠物食品加工厂需要多少钱 开个小型宠物食品加工厂需要多少钱呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7321.htm" title="哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）">哈尔滨农大兽医院电话号码是多少（中国农业哈尔滨兽医研究所）</a></li>
                        <li class="py-2"><a href="/html/category/article-7504.htm" title="生物质燃料颗粒好卖吗（生物燃料颗粒前景）">生物质燃料颗粒好卖吗（生物燃料颗粒前景）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/addons/xcblog/img/pakistanaddress/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Pakistan Address 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/addons/xcblog/js/frontend/pakistanaddress/bootstrap.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>